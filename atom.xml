<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>知识参考</title>
  
  
  <link href="https://zs.fyi/atom.xml" rel="self"/>
  
  <link href="https://zs.fyi/"/>
  <updated>2023-07-20T13:17:43.751Z</updated>
  <id>https://zs.fyi/</id>
  
  <author>
    <name>ZS.FYI</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Microsoft Visual C++ 14.0 or greater is required</title>
    <link href="https://zs.fyi/archives/python-vc-14-0-error.html"/>
    <id>https://zs.fyi/archives/python-vc-14-0-error.html</id>
    <published>2020-09-19T15:43:22.000Z</published>
    <updated>2023-07-20T13:17:43.751Z</updated>
    
    <content type="html"><![CDATA[<p>「error: Microsoft Visual C++ 14.0 or greater is required」是不是令你痛苦不堪、眉头紧皱？是不是在万般搜索后仍旧无果？是不是网上经验教训一大堆，但是都不能从根本上解决问题？那么，以下可能是你能找到的最全面准确的办法。</p><span id="more"></span><h3 id="Python-版本"><a href="#Python-版本" class="headerlink" title="Python 版本"></a>Python 版本</h3><p>以我正在使用的 <code>Python 3.7.6</code> 为例。</p><h3 id="Visual-C-版本"><a href="#Visual-C-版本" class="headerlink" title="Visual C++ 版本"></a>Visual C++ 版本</h3><p>与上面相对应，Visual C++ 版本应为 <code>14.x</code>。</p><p>为什么是 14.x 呢？这是因为目前有 14.0.X、14.16.X、14.27.x 三个版本，它们分别是 Visual Studio 2015，Visual Studio 2017，Visual Studio 2019 自带的编译工具。并且，根据官方的描述</p><blockquote><p>Visual C++ 2015, 2017 and 2019 all share the same redistributable files.</p><p>For example, installing the Visual C++ 2019 redistributable will affect programs built with Visual C++ 2015 and 2017 also. However, installing the Visual C++ 2015 redistributable will not replace the newer versions of the files installed by the Visual C++ 2017 and 2019 redistributables.</p></blockquote><p>你安装一个就行了。</p><p>以我安装的 <code>14.27.29016.0</code> 为例。</p><h3 id="三者对应关系"><a href="#三者对应关系" class="headerlink" title="三者对应关系"></a>三者对应关系</h3><table><thead>  <tr>    <th colspan="2">Visual C++</th>    <th>CPython</th>    <th>Visual Studio</th>  </tr></thead><tbody>  <tr>    <td rowspan="3">14.x</td>    <td>14.27.x</td>    <td rowspan="3">3.5, 3.6, 3.7, 3.8</td>    <td>2019</td>  </tr>  <tr>    <td>14.16.x</td>    <td>2017</td>  </tr>  <tr>    <td>14.0.x</td>    <td>2015</td>  </tr>  <tr>    <td colspan="2">10</td>    <td>3.3, 3.4</td>    <td>2010</td>  </tr>  <tr>    <td colspan="2">9</td>    <td>2.6, 2.7, 3.0, 3.1, 3.2</td>    <td>2008</td>  </tr></tbody></table><h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><p><mark>注意</mark>：以 Python 3.7.6，只安装（不用费劲安装 Visual Studio 2019）Microsoft Visual C++ 14.2 为例。</p><ol><li><p><code>pip install --upgrade setuptools</code> 确保 setuptools 版本为 34.4.0 及以上</p></li><li><p>安装 <a href="https://www.visualstudio.com/downloads/#build-tools-for-visual-studio-2019">Microsoft Build Tools for Visual Studio 2019</a> 并运行，应该会提示需要先下载一些文件</p></li><li><p>勾选左侧最上方 C++ build tools，然后查看右侧，确保 MSVC v142 - VS 2019 C++ x64&#x2F;x86 build tools 和 Windows 10 SDK 被选中。默认情况下应该不需要动，直接点击安装，等待完成即可</p></li></ol><p><img data-src="/images/2010/VS-Build-Tools-2019.png" alt="VS-Build-Tools-2019"></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li><p>官方文档：<a href="https://wiki.python.org/moin/WindowsCompilers#Which_Microsoft_Visual_C.2B-.2B-_compiler_to_use_with_a_specific_Python_version_.3F">Which Microsoft Visual C++ compiler to use with a specific Python version ?</a></p></li><li><p>各版本 Visual C++ 下载地址：<a href="https://support.microsoft.com/en-us/help/2977003/the-latest-supported-visual-c-downloads">The latest supported Visual C++ downloads</a></p></li><li><p>Visual Studio 2017 及之前的版本下载地址：<a href="https://visualstudio.microsoft.com/vs/older-downloads/">Still want an older version?</a></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;「error: Microsoft Visual C++ 14.0 or greater is required」是不是令你痛苦不堪、眉头紧皱？是不是在万般搜索后仍旧无果？是不是网上经验教训一大堆，但是都不能从根本上解决问题？那么，以下可能是你能找到的最全面准确的办法。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="https://zs.fyi/tags/Python/"/>
    
    <category term="环境配置" scheme="https://zs.fyi/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>NexT 主题之 Tag Plugins</title>
    <link href="https://zs.fyi/archives/next-tag-plugins.html"/>
    <id>https://zs.fyi/archives/next-tag-plugins.html</id>
    <published>2020-08-26T03:50:01.000Z</published>
    <updated>2023-07-20T13:17:43.751Z</updated>
    
    <content type="html"><![CDATA[<p>NexT 主题通过一些标签「插件」来增强页面显示效果和提供额外信息，如按钮、标注、流程图等。以下是我所需要的部分，完整文档可查阅<a href="https://theme-next.js.org/docs/tag-plugins/">这里</a>。</p><span id="more"></span><h3 id="居中引用"><a href="#居中引用" class="headerlink" title="居中引用"></a>居中引用</h3><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% centerquote %&#125;最好只有一行文字&#123;% endcenterquote %&#125;</span><br><span class="line"></span><br><span class="line">// 简写形式</span><br><span class="line">&#123;% cq %&#125;最好只有一行文字&#123;% endcq %&#125;</span><br></pre></td></tr></table></figure><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><blockquote class="blockquote-center"><p>最好只有一行文字</p></blockquote><h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><h4 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% button url, text, icon [class], [title] %&#125;</span><br><span class="line"></span><br><span class="line">// 简写形式</span><br><span class="line">&#123;% btn url, text, icon [class], [title] %&#125;</span><br><span class="line"></span><br><span class="line">url     : URL 绝对或者相对路径。</span><br><span class="line">text    : 按钮显示的文字。text 和 icon 至少指定一个。</span><br><span class="line">icon    : Font Awesome icon 名。text 和 icon 至少指定一个。</span><br><span class="line">[class] : 可选参数。icon 样式：fa-fw | fa-lg | fa-2x | fa-3x | fa-4x | fa-5x</span><br><span class="line">[title] : 可选参数。鼠标悬停时显示的文字。</span><br></pre></td></tr></table></figure><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% button https://zs.fyi, ZS.FYI, home fa-fw fa-lg, Zheng Shuai&#x27;s blog %&#125;</span><br></pre></td></tr></table></figure><a class="btn" href="https://zs.fyi" title="Zheng Shuai's blog"><i class="fa fa-home fa-fw fa-lg"></i>ZS.FYI</a><p>更多示例可查阅该<a href="https://theme-next.js.org/docs/tag-plugins/button.html">文档</a>。</p><h3 id="标注"><a href="#标注" class="headerlink" title="标注"></a>标注</h3><h4 id="用法-2"><a href="#用法-2" class="headerlink" title="用法"></a>用法</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label [class]@text %&#125;</span><br><span class="line"></span><br><span class="line">[class] : 可选参数，未指定则使用浏览器默认样式。支持的值有：default | primary | success | info | warning | danger</span><br><span class="line">text    : &#x27;success @text&#x27; 和 &#x27;success@text&#x27; 的效果是一样的。</span><br></pre></td></tr></table></figure><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label default @default %&#125;</span><br><span class="line">&#123;% label primary @primary %&#125;</span><br><span class="line">&#123;% label success @success %&#125;</span><br><span class="line"><span class="emphasis">*&#123;% label info @italic + info %&#125;*</span></span><br><span class="line"><span class="strong">**&#123;% label warning @bold + warning %&#125;**</span></span><br><span class="line">~~&#123;% label danger @strikethrough + danger %&#125;~~</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">mark</span>&gt;</span></span>mark<span class="language-xml"><span class="tag">&lt;/<span class="name">mark</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li><mark class="label default">default</mark></li><li><mark class="label primary">primary</mark></li><li><mark class="label success">success</mark></li><li><em><mark class="label info">italic + info</mark></em></li><li><strong><mark class="label warning">bold + warning</mark></strong></li><li><del><mark class="label danger">strikethrough + danger</mark></del></li><li><mark>mark</mark></li></ul><h3 id="Mermaid"><a href="#Mermaid" class="headerlink" title="Mermaid"></a>Mermaid</h3><p>Mermaid 是一个用于画流程图、状态图、时序图、甘特图等的库，使用 JS 进行本地渲染。</p><h4 id="用法-3"><a href="#用法-3" class="headerlink" title="用法"></a>用法</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mermaid type %&#125;</span><br><span class="line">something</span><br><span class="line">&#123;% endmermaid %&#125;</span><br><span class="line"></span><br><span class="line">type : 类型</span><br></pre></td></tr></table></figure><p>可以在<a href="https://mermaid-js.github.io/mermaid/">这里</a>查阅支持哪些图及其详细用法。</p><h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mermaid pie %&#125;</span><br><span class="line">&quot;Dogs&quot; : 386</span><br><span class="line">&quot;Cats&quot; : 85</span><br><span class="line">&quot;Rats&quot; : 15</span><br><span class="line">&#123;% endmermaid %&#125;</span><br></pre></td></tr></table></figure><pre class="mermaid">pie&quot;Dogs&quot; : 386&quot;Cats&quot; : 85&quot;Rats&quot; : 15</pre><h3 id="注释说明"><a href="#注释说明" class="headerlink" title="注释说明"></a>注释说明</h3><h4 id="用法-4"><a href="#用法-4" class="headerlink" title="用法"></a>用法</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note [class] [no-icon] [summary] %&#125;</span><br><span class="line">任何内容</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">[class]   : 可选参数。支持的值有：default | primary | success | info | warning | danger</span><br><span class="line">[no-icon] : 可选参数。不显示 icon</span><br><span class="line">[summary] : 可选参数。</span><br></pre></td></tr></table></figure><h4 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note %&#125;</span><br><span class="line">假装是四级标题，&#123;% label @未定义 %&#125;样式</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note "><p>假装是四级标题，<mark class="label ">未定义</mark>样式</p></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note default %&#125;</span><br><span class="line">假装是四级标题，&#123;% label default @default %&#125; 样式</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note default"><p>假装是四级标题，<mark class="label default">default</mark> 样式</p></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note primary %&#125;</span><br><span class="line">假装是四级标题，&#123;% label primary @primary %&#125; 样式</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note primary"><p>假装是四级标题，<mark class="label primary">primary</mark> 样式</p></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note success %&#125;</span><br><span class="line">假装是四级标题，&#123;% label success @success %&#125; 样式</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note success"><p>假装是四级标题，<mark class="label success">success</mark> 样式</p></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note info %&#125;</span><br><span class="line">假装是四级标题，&#123;% label info @info %&#125; 样式</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note info"><p>假装是四级标题，<mark class="label info">info</mark> 样式</p></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note warning %&#125;</span><br><span class="line">假装是四级标题，&#123;% label warning @warning %&#125; 样式</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note warning"><p>假装是四级标题，<mark class="label warning">warning</mark> 样式</p></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note danger %&#125;</span><br><span class="line">假装是四级标题，&#123;% label danger @danger %&#125; 样式</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note danger"><p>假装是四级标题，<mark class="label danger">danger</mark> 样式</p></div><h3 id="嵌入-PDF"><a href="#嵌入-PDF" class="headerlink" title="嵌入 PDF"></a>嵌入 PDF</h3><h4 id="用法-5"><a href="#用法-5" class="headerlink" title="用法"></a>用法</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% pdf url [height] %&#125;</span><br><span class="line"></span><br><span class="line">url      : PDF 文件的绝对路径。</span><br><span class="line">[height] : 可选参数。高度（单位：px）。</span><br></pre></td></tr></table></figure><h4 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h4><p>暂无</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;NexT 主题通过一些标签「插件」来增强页面显示效果和提供额外信息，如按钮、标注、流程图等。以下是我所需要的部分，完整文档可查阅&lt;a href=&quot;https://theme-next.js.org/docs/tag-plugins/&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Hexo" scheme="https://zs.fyi/tags/Hexo/"/>
    
    <category term="NexT" scheme="https://zs.fyi/tags/NexT/"/>
    
  </entry>
  
  <entry>
    <title>迟来的驾照</title>
    <link href="https://zs.fyi/archives/driver-license.html"/>
    <id>https://zs.fyi/archives/driver-license.html</id>
    <published>2020-08-17T14:45:52.000Z</published>
    <updated>2023-07-20T13:17:43.747Z</updated>
    
    <content type="html"><![CDATA[<p>因为本科寒暑假时间都比较短，我就一直懒得去考驾照，最近才把这事解决。一两个月，从一个什么都不懂的小白，到能够把车开起来的菜鸟。</p><p>以下所述，因地区不同，费用、项目、考试要求等都不尽相同，仅供参考。</p><span id="more"></span><h3 id="学习费用"><a href="#学习费用" class="headerlink" title="学习费用"></a>学习费用</h3><p>报的当地最大的一个驾校，学的是 C1。</p><table><thead><tr><th>项目</th><th>费用</th><th>备注</th></tr></thead><tbody><tr><td>报名费</td><td>￥2280</td><td></td></tr><tr><td>拍照费</td><td>￥20</td><td></td></tr><tr><td>体检费</td><td>￥25</td><td></td></tr><tr><td>科一费用</td><td>￥30</td><td>驾校包车路费</td></tr><tr><td>科二费用</td><td>￥230</td><td>模拟 + 交通</td></tr><tr><td>科三费用</td><td>￥300</td><td>模拟 + 交通</td></tr><tr><td>科四费用</td><td>￥30</td><td>驾校包车路费</td></tr></tbody></table><p>总共 2915 元，我觉得价格上是非常便宜了。四次考试费用都是驾校代缴的，应该是算在报名费或模拟费用里了。不过，我都是一把过的，不知道补考（非考试当天的第二次机会）怎么收费。</p><h3 id="科目练习"><a href="#科目练习" class="headerlink" title="科目练习"></a>科目练习</h3><h4 id="科一和科四"><a href="#科一和科四" class="headerlink" title="科一和科四"></a>科一和科四</h4><p>报完名让下了个「理论培训 - 安驾 365」的 App，科一和科四都是在上面打卡看视频学习。每次开始学习和学习完签退都需要进行人脸识别，中途也会时不时要求你进行前述操作。科一和科四的视频总时长都在 10 小时以上。</p><p>从 5 月 20 日开始，中途偷了几天懒，29 号刷完，历时 10 天。</p><h4 id="科二"><a href="#科二" class="headerlink" title="科二"></a>科二</h4><p>考完科目一后一直在等驾校安排，加上那段时间一直在下雨，等了得有十几天，就跑去驾校问怎么还没安排练车。原来是把我给漏了，我真的是……</p><p>教练车是福田皮卡，车况相当一般，离合、刹车、方向盘、变速杆要么太松要么太紧，油门是锁死的，能挂的档位也只有一档和倒档。练车全程通过人脸识别认证打卡，用的是国脉畅行驾驶培训机构计时培训应用平台，有总时长要求，达到才能约考。</p><p>去的第一天上午没有摸车，先在一旁「模拟」，就是学习打方向盘，如何规范地打整圈和半圈。下午，教练也没有管我，在一位比我早来的学员指导下，居然倒库也进了几把。</p><p>教练教了之后差不多一个礼拜都在旁边小场地（不是科二练全程的场地）练倒车入库这一个项目，我觉得应该不用这么久的，估计是教练车不太够就一直没教我们剩下的项目。</p><p>第一天学侧方停车、曲线行驶、直角转弯和坡道定点停车与起步的时候，感觉怎么一个个都这么难啊，这么多点位要看，曲线行驶必压线。不过，多练了几遍全程后，就会发现曲线行驶和直角转弯是最简单的两个。</p><p>从 6 月 14 日开始打卡，到 28 号（25 号后因为时长够了就没再打卡）考前一天，算上中途没去的几天，历时 15 天。</p><h4 id="科三"><a href="#科三" class="headerlink" title="科三"></a>科三</h4><p>考完科目二后，教练安排问题，技能又被迫冷却了二十天左右。</p><p>科三的教练车也是皮卡，不过车况要好很多。科三除了要求打卡一定时长，还要达到一定的里程数，好像是 120 公里。我们这边，科三和科二的教练不是同一个。查了下，教我的好像是个十几年的老教练。</p><p>练科三就舒服多了，起码可以轰油门了，教练教的也比较细致，可能是我问的多。一开始觉得科三挺难的，因为从座椅的调整到离合的使用，跟科二的习惯都不一样，加上档位跟速度的匹配，油门跟离合的配合，第一天刚上路的时候连直线行驶也做不到。教练一一讲解，还模拟了很多可能的突发情景以及该如何处置，比如紧急情况越级减档、车辆为什么会闯动、车辆熄火的原因。此外，还纠正了挂挡的动作。练了几天后，觉得其实也不难，只不过要注意的细节比较多。</p><p>从 7 月 21 日开始，28 日满时长满公里数，历时 8 天。</p><p><strong>小结</strong></p><table><thead><tr><th>科目</th><th>练习时长</th><th>备注</th></tr></thead><tbody><tr><td>科一和科四</td><td>10 天</td><td>远程学习</td></tr><tr><td>科二</td><td>15 天</td><td>场地练习</td></tr><tr><td>科三</td><td>8 天</td><td>路训</td></tr></tbody></table><p>实际练车时间并没有多长，大部分都花在等安排和等预约考试上了。如果能进行相应优化，使各流程无缝衔接上，即使在练车和考试要求更严格的今天，从报名到拿驾照的时间也能控制在 40 天左右。</p><p><img data-src="/images/2008/training-records.JPEG" alt="training-records"></p><h3 id="预约考试"><a href="#预约考试" class="headerlink" title="预约考试"></a>预约考试</h3><p>可能是因为地方小的缘故，预约时间倒也不算长，基本一礼拜内都能约到。</p><table><thead><tr><th>科目</th><th>预约时间</th><th>考试时间</th><th>备注</th></tr></thead><tbody><tr><td>科一</td><td>5 月 29 日</td><td>6 月 2 日</td><td></td></tr><tr><td>科二</td><td>6 月 24 日</td><td>6 月 29 日</td><td></td></tr><tr><td>科三</td><td>7 月 30 日</td><td>8 月 5 日</td><td></td></tr><tr><td>科四</td><td></td><td>8 月 14 日</td><td>距科三考试十天内无需预约</td></tr></tbody></table><h3 id="考试流程"><a href="#考试流程" class="headerlink" title="考试流程"></a>考试流程</h3><h4 id="科一和科四-1"><a href="#科一和科四-1" class="headerlink" title="科一和科四"></a>科一和科四</h4><p>看完视频，把题库里的题刷一刷，基本不会有问题。科一错了一道，科四满分。</p><ol><li>排队进场，核验身份证和人脸比对。</li><li>上机考试开始：</li></ol><ul><li>科一 45 分钟，100 道题，每题 1 分，90 分合格。</li><li>科四 45 分钟，50 道题，每题 2 分，90 分合格。</li></ul><ol start="3"><li>成绩合格，签字拍照离场。</li></ol><h4 id="科二-1"><a href="#科二-1" class="headerlink" title="科二"></a>科二</h4><p>每个项目都有时间要求，但据我观察一般不会出现超时的情况，所以无需担心，安心完成项目即可。项目中停车会扣分，但已完成当前项目未到达下一项目的行驶途中可以停车等待。满分 100 分，80 分合格。</p><p>我们这边坡道定点停车和起步项目是不踩油门的。</p><table><thead><tr><th>项目顺序</th><th>考试要求</th><th>备注</th></tr></thead><tbody><tr><td>倒车入库</td><td>不压线车身不扫线等等</td><td>左侧入库和右侧入库</td></tr><tr><td>侧方停车</td><td>同上</td><td>出库前打左转向灯</td></tr><tr><td>曲线行驶</td><td>同上</td><td></td></tr><tr><td>直角转弯</td><td>同上</td><td>转弯前打相应转向灯</td></tr><tr><td>坡道定点停车和起步</td><td>同上</td><td>争取别溜车和熄火</td></tr></tbody></table><h4 id="科三-1"><a href="#科三-1" class="headerlink" title="科三"></a>科三</h4><p>我们这里开始考试前的准备动作是：先上车调整座椅，感受方向盘、离合、刹车和变速杆的力度。然后下车从车前左侧开始，逆时针顺序先后按车前左侧、车尾右侧、车前右侧的三个按钮，完成绕车一周。</p><p>接着上车进行人脸识别验证，坐在副驾的考官点击「开始考试」，此后禁止说话和做小动作。先进行模拟夜间灯光考试，考试合格后听到语音指令就可以起步了。起步要求开左转向灯，按喇叭，挂一档，松手刹。</p><p>无论是灯光考试还是有语音播报的道路考试项目，都不要抢语音，等播报完成后再进行相应操作，否则直接不合格。</p><p>考场是双向四车道，中间有绿化带分隔，有三条考试线路。满分 100 分，90 分合格。</p><table><thead><tr><th>项目顺序</th><th>考试要求</th><th>备注</th></tr></thead><tbody><tr><td>起步后至下一项目前</td><td>逐级升到三档</td><td>一档和二档行驶距离过长会被判不合格，无语音播报</td></tr><tr><td>通过直行路口</td><td>点刹减速</td><td>有语音播报</td></tr><tr><td>加减档操作</td><td>通过路口后快速提速升四档，行驶五秒后降回三档</td><td>为了让感应器检测到，此项目换完档后离合要快速松开。无语音播报</td></tr><tr><td>直线行驶</td><td>直线行驶 100 米</td><td>视野看向远方，方向盘微调。有语音播报</td></tr><tr><td>通过直行路口</td><td>点刹减速</td><td>无语音播报</td></tr><tr><td>经过学校</td><td>点刹减速</td><td>无语音播报</td></tr><tr><td>经过公交车站</td><td>点刹减速</td><td>无语音播报，完成后可开启左转向灯为下一项目作准备</td></tr><tr><td>掉头</td><td>点刹车，减二档，走左侧车道</td><td>有语音播报，完成后可开启右转向灯为下一项目作准备同时加速升三档</td></tr><tr><td>变更车道</td><td>观察后视镜是否可变道</td><td>有语音播报，完成后可开启左转向灯为下一项目作准备</td></tr><tr><td>通过直行路口</td><td>点刹减速</td><td>前面第二个路口，无语音播报</td></tr><tr><td>超车</td><td>观察后视镜是否允许超车，驶入左侧车道后打右转向灯等几秒后回原车道完成超车</td><td>有语音播报。转向灯不用关，下一项目需要用</td></tr><tr><td>右转</td><td>点刹车，减二档，走左侧车道</td><td>有语音播报，完成后可开启左转向灯为掉头项目作准备同时加速升三档</td></tr><tr><td>会车</td><td>点刹减速</td><td>有语音播报</td></tr><tr><td>掉头</td><td>点刹车，减二档，视考试路线选择走左侧车道还是右侧车道</td><td>有语音播报，完成后可开启右转向灯为下一项目作准备</td></tr><tr><td>靠边停车</td><td>减一档，双脚放在离合和刹车上准备停车</td><td>有语音播报。停稳后拉手刹、回空挡、熄火、解安全带、快速开门关门，人脸验证，等待语音播报成绩合格后再下车</td></tr></tbody></table><p>科三不难，就是要注意的细节比较多，通过科三基本上等同于拿到驾照了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>机动车驾驶员考试相比人生中的其他重要考试还是简单太多，平时好好练、多总结、考试时心态调整好，就不会有什么问题。</p><p>当然，为了顺利通过考试，考场上的一些应试动作与平常上路驾驶还是有一些区别。</p><p>拿到驾照只是合法驾驶机动车的开始，如何安全文明驾驶才是一生要修炼的课题。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;因为本科寒暑假时间都比较短，我就一直懒得去考驾照，最近才把这事解决。一两个月，从一个什么都不懂的小白，到能够把车开起来的菜鸟。&lt;/p&gt;
&lt;p&gt;以下所述，因地区不同，费用、项目、考试要求等都不尽相同，仅供参考。&lt;/p&gt;</summary>
    
    
    
    
    <category term="日常" scheme="https://zs.fyi/tags/%E6%97%A5%E5%B8%B8/"/>
    
    <category term="驾照" scheme="https://zs.fyi/tags/%E9%A9%BE%E7%85%A7/"/>
    
    <category term="考试" scheme="https://zs.fyi/tags/%E8%80%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>加速 SSH 连接</title>
    <link href="https://zs.fyi/archives/ssh-proxycommand-proxyjump.html"/>
    <id>https://zs.fyi/archives/ssh-proxycommand-proxyjump.html</id>
    <published>2020-02-25T16:10:35.000Z</published>
    <updated>2023-07-20T13:17:43.751Z</updated>
    
    <content type="html"><![CDATA[<p>有时候，你想通过 SSH 连接花重金购买的远在大洋彼岸的虚拟服务器进行诸如编译固件、跑程序等操作的时候，而你发现本地网络与远程服务器的连接并不是那么稳定，那么可以通过以下两种方式提升 SSH 连接速度和稳定性。</p><span id="more"></span><h3 id="通过代理连接"><a href="#通过代理连接" class="headerlink" title="通过代理连接"></a>通过代理连接</h3><p>其实就是借助 <a href="https://man.openbsd.org/ssh_config.5#ProxyCommand">ProxyCommand</a> 这个选项来实现的，并且有几种不同的写法。而且，Windows 和 macOS 下的实现方式也不一样。</p><p>假定本地代理地址为 <code>127.0.0.1</code>，端口为 <code>1080</code>，代理方式为 <code>socks5</code>，要连接的远程主机用户为 <code>root</code>，主机 IP 为 <code>1.1.1.1</code>。</p><h4 id="Windows-connect"><a href="#Windows-connect" class="headerlink" title="Windows - connect"></a>Windows - connect</h4><p>如果下面无效的话请先安装 <a href="https://web.archive.org/web/20080516100455/http://www.meadowy.org/~gotoh/projects/connect">connect</a> 这个小工具并将其添加至环境变量，或者直接在 Git Bash 中操作。</p><p>先解释一下参数含义：<code>connect</code> 即是上面安装的工具，<code>-S</code> 表示使用 socks5 代理，<code>-a none</code> 表示本地代理无需认证，<code>%h %p</code> 分别对应远程主机名和端口。</p><ul><li>写法一</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -o &quot;ProxyCommand connect -S 127.0.0.1:1080 -a none %h %p&quot; root@1.1.1.1</span><br></pre></td></tr></table></figure><ul><li>写法二</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -o ProxyCommand=&quot;connect -S 127.0.0.1:1080 -a none %h %p&quot; root@1.1.1.1</span><br></pre></td></tr></table></figure><ul><li>写法三</li></ul><p>写到 <code>~/.ssh/config</code> 文件中，如针对 GitHub 可以这样写：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">    User git</span><br><span class="line">    Hostname github.com</span><br><span class="line">    Port 22</span><br><span class="line">    ProxyCommand connect -S 127.0.0.1:1080 -a none %h %p</span><br></pre></td></tr></table></figure><h4 id="macOS-netcat"><a href="#macOS-netcat" class="headerlink" title="macOS - netcat"></a>macOS - netcat</h4><p>macOS 下可以直接看这篇<a href="https://www.xiebruce.top/650.html#i">文章</a>。</p><h3 id="借助跳板机连接"><a href="#借助跳板机连接" class="headerlink" title="借助跳板机连接"></a>借助跳板机连接</h3><p>太详细的我也懒得写了，目前只写一下 Windows 如何实现。ProxyJump 和 ProxyCommand 都是可以的，并且如果同时写在配置文件中，只能是最先匹配到的那个生效。</p><p>假定跳板机和真正要登录的远程主机用户都为 <code>root</code>，跳板机 IP 为 <code>8.8.8.8</code>，要登录的主机 IP 为 <code>1.1.1.1</code>。</p><p>各参数含义与第一部分一致，<code>-W</code> 表示将客户端的标准输入输出转发到相应端口的远程主机上。</p><h4 id="ProxyJump"><a href="#ProxyJump" class="headerlink" title="ProxyJump"></a>ProxyJump</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -o &quot;ProxyJump root@8.8.8.8&quot; root@1.1.1.1</span><br></pre></td></tr></table></figure><h4 id="ProxyCommand"><a href="#ProxyCommand" class="headerlink" title="ProxyCommand"></a>ProxyCommand</h4><ul><li>写法一</li></ul><p><mark>注意</mark>：<code>%h</code> 和 <code>%p</code> 之间是 <code>:</code> 而不是空格。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -o &quot;ProxyCommand ssh root@8.8.8.8 -W %h:%p&quot; root@1.1.1.1</span><br></pre></td></tr></table></figure><ul><li>写法二</li></ul><p>使用这条命令，必须先安装 <a href="https://eternallybored.org/misc/netcat/">netcat</a> 并将其添加至环境变量。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -o &quot;ProxyCommand ssh root@8.8.8.8 nc %h %p&quot; root@1.1.1.1</span><br></pre></td></tr></table></figure><h4 id="写入配置文件"><a href="#写入配置文件" class="headerlink" title="写入配置文件"></a>写入配置文件</h4><p>即写入到 <code>~/.ssh/config</code> 文件中，这个我目前没有需求，同样可以查看这篇<a href="https://www.xiebruce.top/650.html#i-9">文章</a>获取详细内容。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;有时候，你想通过 SSH 连接花重金购买的远在大洋彼岸的虚拟服务器进行诸如编译固件、跑程序等操作的时候，而你发现本地网络与远程服务器的连接并不是那么稳定，那么可以通过以下两种方式提升 SSH 连接速度和稳定性。&lt;/p&gt;</summary>
    
    
    
    
    <category term="环境配置" scheme="https://zs.fyi/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    <category term="SSH" scheme="https://zs.fyi/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>专治 Windows 10 各种不服</title>
    <link href="https://zs.fyi/archives/windows-bugs.html"/>
    <id>https://zs.fyi/archives/windows-bugs.html</id>
    <published>2020-01-23T11:28:46.000Z</published>
    <updated>2023-07-20T13:17:43.751Z</updated>
    
    <content type="html"><![CDATA[<p>大约从 2015 年开始使用 Windows 10 系统，这是一个不断遇到坑然后想办法填坑的过程，以下便是遇到的各种稀奇古怪的问题以及可能的解决方案。</p><span id="more"></span><h3 id="Windows-10-开机后浏览器自动打开-MSN-中文网"><a href="#Windows-10-开机后浏览器自动打开-MSN-中文网" class="headerlink" title="Windows 10 开机后浏览器自动打开 MSN 中文网"></a>Windows 10 开机后浏览器自动打开 MSN 中文网</h3><p>重装系统后，遇到这个问题，得到微软社区的解答后问题解决，顺便记录一下。</p><ol><li><p>Windows 10 专业版，打开组策略</p></li><li><p>依次展开<code>计算机配置 - 管理模板 - 系统 - Internet 通信管理</code>，然后单击 <code>Internet 通信设置</code></p></li><li><p>在详细信息窗格中，双击<code>关闭 Windows 网络连接状态指示器活动测试</code>，然后单击<code>已启用</code>，点<code>确定</code></p></li></ol><p><img data-src="/images/2001/Group-Policy.png" alt="Group-Policy"></p><h3 id="Task-Scheduler-CPU-占用高"><a href="#Task-Scheduler-CPU-占用高" class="headerlink" title="Task Scheduler CPU 占用高"></a>Task Scheduler CPU 占用高</h3><h4 id="情形"><a href="#情形" class="headerlink" title="情形"></a>情形</h4><ol><li><p>风扇一直转个不停</p></li><li><p>查看任务管理器，CPU 占用一直是 99%</p></li><li><p>Task Scheduler 占用 CPU 高达 60%</p></li></ol><p><img data-src="/images/2001/Task-Manager.png" alt="Task-Manager"></p><h4 id="查找解决方案"><a href="#查找解决方案" class="headerlink" title="查找解决方案"></a>查找解决方案</h4><ol><li><p>个人博客：<a href="http://www.tikas.me/task-scheduler-cpu-to-high/">http://www.tikas.me/task-scheduler-cpu-to-high/</a></p></li><li><p>微软社区，有个人提了个相同问题，可惜没人回答</p></li></ol><h4 id="尝试解决"><a href="#尝试解决" class="headerlink" title="尝试解决"></a>尝试解决</h4><ol><li><p><kbd>Start</kbd> + <kbd>X</kbd>，然后按 <kbd>G</kbd>，进入计算机管理</p></li><li><p>定位到<code>任务计划程序库 - Microsoft - Windows - Customer Experience Improvement Program</code>，在右侧可以看到有三个计划任务，都是微软所谓的客户体验改善计划</p></li><li><p>右键将它们全部禁止</p></li><li><p>重启</p></li></ol><p><img data-src="/images/2001/Task-Scheduler.png" alt="Task-Scheduler"></p><h4 id="最终解决"><a href="#最终解决" class="headerlink" title="最终解决"></a>最终解决</h4><p>直接将这三个服务删除</p><h3 id="删除-Windows-10-桌面右键菜单中的图形选项和图形属性选项"><a href="#删除-Windows-10-桌面右键菜单中的图形选项和图形属性选项" class="headerlink" title="删除 Windows 10 桌面右键菜单中的图形选项和图形属性选项"></a>删除 Windows 10 桌面右键菜单中的图形选项和图形属性选项</h3><p>我的笔记本电脑经常在集成显卡驱动更新后，点击鼠标右键要等很长时间才能弹出菜单来。作为强迫症自然不能忍受，网络搜索得到答案后，写在这作为记录。</p><ol><li><p>按下 <kbd>Start</kbd> + <kbd>R</kbd> 调出运行，输入 <code>regedit</code> 回车</p></li><li><p>在注册表编辑器中定位到</p></li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKEY_CLASSES_ROOT\Directory\Background\shellex\ContextMenuHandlers</span><br></pre></td></tr></table></figure><ol start="3"><li>删除 <code>igfxDTCM</code> 和 <code>igfxcui</code> 两个项目</li></ol><h3 id="Windows-10-用户账号历史头像删除"><a href="#Windows-10-用户账号历史头像删除" class="headerlink" title="Windows 10 用户账号历史头像删除"></a>Windows 10 用户账号历史头像删除</h3><p>数次更换头像后，在当前头像右侧会显示之前设置的头像，作为强迫症这是绝对不能忍的。</p><p>解决方法如下：</p><ol><li><p><kbd>Start</kbd> + <kbd>R</kbd> 运行，输入 <code>%APPDATA%\Microsoft\Windows\AccountPictures</code>，然后确定</p></li><li><p>进入后，可以看到之前使用过的头像，删除即可</p></li><li><p>再按下 <kbd>Start</kbd> + <kbd>I</kbd>，进入<code>账户 - 你的信息</code>，可以看到之前的头像已经消失</p></li></ol><h3 id="通过组策略禁用-Windows-10-系统的自动更新功能"><a href="#通过组策略禁用-Windows-10-系统的自动更新功能" class="headerlink" title="通过组策略禁用 Windows 10 系统的自动更新功能"></a>通过组策略禁用 Windows 10 系统的自动更新功能</h3><p>众所周知近年微软发布的更新经常性的导致 Windows 10 用户出现诸如开机黑屏或者是直接无法启动的问题。显然对于绝大多数用户来说能否稳定的运行才是最重要的，同时也并不是所有的用户都有能力解决各类问题。</p><p>例如近期微软更新致使部分用户启动出现黑屏的问题，虽有临时解决方案但并不是所有的设备都可顺利解决。因此还不如直接禁用掉 Windows 10 的自动更新策略，省的每次安装更新都是提心吊胆的害怕出现新的问题。基于安全性考虑我们是不会建议大家不安装更新的，此处的禁用只是禁用掉自动更新而不是禁用更新。</p><ol><li><p>快捷键 <kbd>Start</kbd> + <kbd>R</kbd> 打开运行，然后在运行的对话框中填写 <code>gpedit.msc</code> 并确定</p></li><li><p>打开组策略后点击左侧菜单依次展开<code>计算机配置 — 管理模板 — Windows 组件 — Windows 更新</code></p></li></ol><p><img data-src="/images/2001/Windows-Update.png" alt="Windows-Update"></p><ol start="3"><li>双击<code>配置自动更新</code>即可打开如下图的新窗口，在新窗口左侧的选项里将默认的<code>未配置</code>更改为<code>已禁用</code>即可</li></ol><p><img data-src="/images/2001/AutoUpdate.png" alt="AutoUpdate"></p><div class="note info"><p>将此项变更为已禁用后系统将不再自动检查和下载安装更新， 因此你需要定期去更新里手动进行检查。原文出处为 <a href="https://www.landiannews.com/archives/40677.html">https://www.landiannews.com/archives/40677.html</a></p></div><h3 id="如何删除-Windows-启动项中的「Program」"><a href="#如何删除-Windows-启动项中的「Program」" class="headerlink" title="如何删除 Windows 启动项中的「Program」"></a>如何删除 Windows 启动项中的「Program」</h3><p>这世界对强迫症患者太不友好，比如 Windows 10 上某一软件卸载后可能启动项还残留在那里，并且名称显示为 Program（下图中第二项），关键他喵的名称前还没有软件图标（当然没有，毕竟软件已经被卸载了）。</p><p><img data-src="/images/2001/Before.png" alt="Before"></p><p>通过 Google，得知可以修改注册表来解决这一问题：</p><p>首先 <kbd>Start</kbd> + <kbd>R</kbd> 呼出运行，输入 <code>regedit</code>，回车打开注册表编辑器</p><ul><li>如果是要删除系统开机启动项（影响所有用户），注册表定位到</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run</span><br></pre></td></tr></table></figure><ul><li>如果要删除当前用户的开机启动项，注册表定位到</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run</span><br></pre></td></tr></table></figure><p>像我的就是属于第二种情况，进入注册表后找到已删除软件的残余启动项</p><p><img data-src="/images/2001/Registry.png" alt="Registry"></p><p>接下来当然是右键直接删除该键值了</p><p>然后再打开任务管理器，发现原本闹心的「Program」果然不见了，世界又充满爱了</p><p><img data-src="/images/2001/After.png" alt="After"></p><h3 id="Windows-10-升级-1803-后多了个-OEM-分区并分配盘符"><a href="#Windows-10-升级-1803-后多了个-OEM-分区并分配盘符" class="headerlink" title="Windows 10 升级 1803 后多了个 OEM 分区并分配盘符"></a>Windows 10 升级 1803 后多了个 OEM 分区并分配盘符</h3><h4 id="问题概述"><a href="#问题概述" class="headerlink" title="问题概述"></a>问题概述</h4><p>手上的一台联想笔记本在更新到 Windows 1803 版后在<code>此电脑 - 设备和驱动器</code>下「多了一个 OEM 分区」并且分配了盘符。</p><p><img data-src="/images/2001/This-PC-Before.png" alt="This-PC-Before"></p><p><img data-src="/images/2001/Disk-Management-Before.png" alt="Disk-Management-Before"></p><p>其实也不能算多了一个分区，这个分区原本应该是用于系统恢复的，本不该分配盘符，但估计是这次更新的 Bug 导致这样的问题。分配的盘符是跟在已占用的盘符之后，比如我外接了一个硬盘里面有两个分区，占用了 D 和 E，所以之后是 F。</p><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>网上搜索一番，发现有这个问题的还不在少数。但是很奇怪，我的另一台笔记本没有出现这种情况。</p><p>下面是解决办法（感谢知乎用户 <a href="https://www.zhihu.com/people/fisher-sam-5">@Fisher Sam</a>）和我的参考示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">以管理员权限运行命令提示符，逐行运行</span><br><span class="line"></span><br><span class="line">diskpart</span><br><span class="line"></span><br><span class="line">list disk</span><br><span class="line"></span><br><span class="line">select disk x      （x 表示磁盘序号）</span><br><span class="line"></span><br><span class="line">list volume</span><br><span class="line"></span><br><span class="line">select volume x    （x 表示卷号）</span><br><span class="line"></span><br><span class="line">remove letter=x    （x 表示盘符）</span><br></pre></td></tr></table></figure><p><img data-src="/images/2001/DiskPart.png" alt="DiskPart"></p><h4 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h4><p><img data-src="/images/2001/This-PC-After.png" alt="This-PC-After"></p><p><img data-src="/images/2001/Disk-Management-After.png" alt="Disk-Management-After"></p><h4 id="参考方案"><a href="#参考方案" class="headerlink" title="参考方案"></a>参考方案</h4><ul><li><p><a href="https://www.zhihu.com/question/275658123">windows10 升级1803版后为什么多了个OEM分区并多分配了一个盘符？</a></p></li><li><p><a href="https://www.zhihu.com/question/275581629">win10升级1803后多了一个OEM分区是什么，可以取消吗？</a></p></li></ul><h3 id="CPU-频率锁定在-0-4GHz"><a href="#CPU-频率锁定在-0-4GHz" class="headerlink" title="CPU 频率锁定在 0.4GHz"></a>CPU 频率锁定在 0.4GHz</h3><p>如下图，查到的解决办法各不相同，最后哪一种都没有采用。我目前的做法是，将控制面板中的电池计划选项重置为默认，然后关机重启，勉强解决燃眉之急。</p><p><img data-src="/images/2001/CPU.png" alt="CPU"></p><h3 id="更改无线网络名称"><a href="#更改无线网络名称" class="headerlink" title="更改无线网络名称"></a>更改无线网络名称</h3><p>注册表地址如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\NetworkList\Profiles</span><br></pre></td></tr></table></figure><h3 id="Windows-10-无法进入休眠状态"><a href="#Windows-10-无法进入休眠状态" class="headerlink" title="Windows 10 无法进入休眠状态"></a>Windows 10 无法进入休眠状态</h3><p>系统是 Windows 专业版 1909，电源计划是默认的平衡模式。有时候晚上合盖后第二天早上笔记本发烫，揭开盖子直接进入解锁登录界面。这次又遇到了，寻找解决方法，并稍作记录。</p><p><img data-src="/images/2002/powercfg.png" alt="powercfg"></p><p>如图，我的笔记本支持 Standby (S3)、Hibernate、Hybrid Sleep、Fast Startup 这四种 sleep states。其中第一种就相当于 Sleep，中文翻译为睡眠；第二种则叫做休眠；第三种叫做混合睡眠；第四种是 Windows 8 时引入的快速关机。</p><p>它们之间乱七八糟的关系和区别可以查看以下几篇文章：</p><ul><li><p><a href="https://blog.csdn.net/Listener_ri/article/details/50835594">hybrid-sleep和sleep以及hibernate的区别</a></p></li><li><p><a href="https://blog.csdn.net/y97523szb/article/details/78108777">睡眠、休眠、混合睡眠三者之间的关系与区别</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/47006051">关于电脑的待机、睡眠、休眠，这篇应该可以解答你所有的疑问</a>（推荐）</p></li><li><p><a href="https://www.howtogeek.com/102897/whats-the-difference-between-sleep-and-hibernate-in-windows/">What’s the Difference Between Sleep and Hibernate in Windows?</a></p></li></ul><p>下面则是电池平衡模式下默认的高级设置选项，留存方便日后对比：</p><p><img data-src="/images/2002/default_settings.png" alt="default_settings"></p><p>上面第三篇文章中有这么两段话点醒了我</p><blockquote><p>不过呢，随着移动时代的到来，微软肯定也意识到了这个问题。从 Windows 8 开始，Windows 引入了一种新的电源状态，叫 S0 Standby，或 Modern Standby，原理和我上面分析的 iPhone 熄屏状态一模一样。该状态在一些 Windows 平板电脑上实现了，比如 Surface Pro 3，小米平板二代。</p><p>用 <code>powercfg -a</code> 可查得当前系统是否支持 Modern Standby。Modern Standby 又分两种，一种是不带网络连接的，另一种是带网络连接的，后者在进入熄屏状态时可以被特定的网络数据包唤醒（需要网卡硬件支持），后者也称 Connected Standby。小米平板二代支持后者。</p></blockquote><p>同时结合这篇<a href="https://blog.csdn.net/hanziyuan08/article/details/89396894">文章</a>，我查看了 <code>Computer\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Power</code> 下的「CsEnabled」键值，竟然默认是 1。</p><p><img data-src="/images/2002/CsEnabled.png" alt="CsEnabled"></p><p>那么问题来了，上面第一张图明明显示我的电脑不支持 S0 Standby，电池驱动管理却依然将其开启。我觉得很可能就是这个问题了。</p><h3 id="恢复-Linux-U-盘启动盘在-Windows-下的使用"><a href="#恢复-Linux-U-盘启动盘在-Windows-下的使用" class="headerlink" title="恢复 Linux U 盘启动盘在 Windows 下的使用"></a>恢复 Linux U 盘启动盘在 Windows 下的使用</h3><p>通过 DD 方式制作 Linux 启动盘后，将 U 盘插在 Windows 笔记本上，要么在文件资源管理器中不显示或者显示可用空间只有 200MB，尽管在磁盘管理器中是正常的。而且，此时尝试直接格式化也是没有用的。可通过以下两步解决：</p><p>第一步，调用 diskpart 命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">diskpart</span><br><span class="line">list disk</span><br><span class="line">select disk &lt;number&gt;  # &lt;number&gt; 为实际磁盘编号</span><br><span class="line">clean</span><br></pre></td></tr></table></figure><p><img data-src="/images/2011/diskpart.png" alt="diskpart"></p><p>第二步，在磁盘管理器中创建</p><p><img data-src="/images/2011/disk-management.png" alt="disk-management"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;大约从 2015 年开始使用 Windows 10 系统，这是一个不断遇到坑然后想办法填坑的过程，以下便是遇到的各种稀奇古怪的问题以及可能的解决方案。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Windows" scheme="https://zs.fyi/tags/Windows/"/>
    
    <category term="Bug" scheme="https://zs.fyi/tags/Bug/"/>
    
  </entry>
  
  <entry>
    <title>计算机字体初了解</title>
    <link href="https://zs.fyi/archives/computer-font.html"/>
    <id>https://zs.fyi/archives/computer-font.html</id>
    <published>2020-01-23T06:23:49.000Z</published>
    <updated>2023-07-20T13:17:43.747Z</updated>
    
    <content type="html"><![CDATA[<p>[占坑]</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[占坑]&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="字体" scheme="https://zs.fyi/tags/%E5%AD%97%E4%BD%93/"/>
    
  </entry>
  
  <entry>
    <title>重装系统的成本及前后工作</title>
    <link href="https://zs.fyi/archives/the-price-of-windows-reinstallation.html"/>
    <id>https://zs.fyi/archives/the-price-of-windows-reinstallation.html</id>
    <published>2020-01-17T14:31:07.000Z</published>
    <updated>2023-07-20T13:17:43.751Z</updated>
    
    <content type="html"><![CDATA[<p>这次重装系统（为何要重装有兴趣的可翻看上上篇）我是一万个不愿意的，因为我知道系统重装的成本有多大。就单纯装个系统来说可能只需要十几分钟，但是装系统前的准备工作（主要是备份和制作安装启动 U 盘）以及系统装完后的恢复备份、软件安装调试、系统设置等，要想完全恢复之前的使用环境，差不多得需要一天的时间。现在是晚上的 10:42，先记录下该做的一些工作，按步骤来就不会出错。</p><span id="more"></span><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="安装-U-盘"><a href="#安装-U-盘" class="headerlink" title="安装 U 盘"></a>安装 U 盘</h4><p>使用 <a href="https://www.microsoft.com/zh-cn/software-download/windows10">Windows Media Creation Tool</a> 制作安装 U 盘 —&gt; 完成</p><h4 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h4><p>备份<code>桌面</code>文件。右键选中<code>桌面</code>文件夹，在属性中将文件移动到其他盘 —&gt; 未完成</p><p>备份<code>文档</code>文件，参照上述方法 —&gt; 未完成</p><p>用户目录下的一些 dotfile 如 ssh 密钥、gpg 密钥和配置文件等 —&gt; 未完成</p><h4 id="驱动"><a href="#驱动" class="headerlink" title="驱动"></a>驱动</h4><p>从官网下载驱动 —&gt; 完成</p><h4 id="统计安装软件"><a href="#统计安装软件" class="headerlink" title="统计安装软件"></a>统计安装软件</h4><p>按上次重装系统后软件安装顺序排序如下：</p><p>✅ 已安装 - 谷歌浏览器 —&gt; 下载万物，当然得先用 IE&#x2F;Edge 下载它</p><p>✅ 已安装 - 微信</p><p>✅ 已安装 - 坚果云 —&gt; 论文同步</p><p>❌ 未安装 - Zoommy —&gt; 貌似万年没打开过了</p><p>✅ 已安装 - TIM</p><p>✅ 已安装 - EndNote X8 —&gt; 文献管理，白嫖的中科大授权，严格意义上的盗版</p><p>✅ 已安装 - Tableau —&gt; 向官方申请的教育授权，本地反激活完成</p><p>✅ 已安装 - 火狐浏览器</p><p>✅ 已安装 - JetBrains Toolbox —&gt; 向官方申请的教育授权，无需反激活</p><p>✅ 已安装 - 1Password —&gt; 别忘记主密码</p><p>✅ 已安装 - R</p><p>✅ 已安装 - RStudio</p><p>❌ 未安装 - Fences —&gt; 购买的正版密钥，本地反激活完成</p><p>✅ 已安装 - Listary —&gt; 购买的正版密钥，无法&#x2F;不需反激活</p><p>✅ 已安装 - Internet Download Manager —&gt; 购买的正版密钥，无法&#x2F;不需反激活</p><p>✅ 已安装 - Notion —&gt; 通过 Scoop 安装</p><p>✅ 已安装 - MATLAB —&gt; 学校购买授权，帐号登录</p><p>✅ 已安装 - Navicat —&gt; 学校邮箱申请密钥，反激活完成</p><p>✅ 已安装 - Axure —&gt; 教育授权，本地反激活完成</p><p>✅ 已安装 - MS Office 家庭和学生版 2016 —&gt; 购买机器附送的，绑定账号</p><p>✅ 已安装 - 幕布 —&gt; 通过 Scoop 安装</p><p>✅ 已安装 - 印象笔记 —&gt; 登录国内和国际版两个账号</p><p>✅ 已安装 - MindManager</p><p>✅ 已安装 - PicGo —&gt; 通过 Scoop 安装</p><p>✅ 已安装 - MS Visio 专业版 2019 —&gt; 购买，绑定账号</p><p>✅ 已安装 - WinRAR</p><p>✅ 已安装 - Python 3.7 —&gt; 不要装 3.8，无法正常运行 Jupyter Notebook</p><p>❌ 未安装 - XMeters —&gt; 购买的正版密钥，无法&#x2F;不需反激活 —&gt; 先不装了</p><p>✅ 已安装 - PotPlayer —&gt; 竟然被 Scoop extras bucket 收录了</p><p>✅ 已安装 - ManicTime —&gt; 购买的正版密钥，本地反激活完成</p><p>✅ 已安装 - Rtools</p><p>✅ 已安装 - Spotify</p><p>✅ 已安装 - TeX Live —&gt; 配置文件还原</p><h3 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h3><p>最简单，略过，选项该关闭该保留全凭个人喜好</p><p>不过有一点要记住，安装时先创建一个本地账户而不要登录微软账号，否则用户文件夹名会恶心你</p><h3 id="恢复工作"><a href="#恢复工作" class="headerlink" title="恢复工作"></a>恢复工作</h3><ul><li><p>驱动安装 —&gt; 可选，看看官网有没有适配最新系统的驱动发布</p></li><li><p>备份文件恢复 —&gt; 移动文件</p></li><li><p>安装软件 —&gt; 无尽的下载……下载……载……想到 MATLAB 和 TeX Live 就头疼</p></li><li><p>环境变量设置 —&gt; 绝大部分交由 Scoop 完成，剩余的软件安装过程中就可做到</p></li><li><p>自定义 DNS —&gt; 可选</p></li><li><p>一些软件设置，如语言工具设置国内镜像源</p></li></ul><p>现在已经凌晨 12:18 了，明天继续。</p><h3 id="实际安装步骤及观察"><a href="#实际安装步骤及观察" class="headerlink" title="实际安装步骤及观察"></a>实际安装步骤及观察</h3><ol><li><p>安装完系统后，联网，等待一段时间，自动安装驱动及补丁</p></li><li><p>修改设备名称后，重启</p></li><li><p>通过蓝牙连接鼠标和键盘</p></li><li><p>解决英文操作系统下中文乱码问题：<code>Control Panel - Clock and Region - Region - Administrative - Language for non-Unicode programs</code>，将其改为简体中文即可</p></li><li><p>登录微软账号同步设置和 OneDrive 文件，先进行简单设置和覆盖原有设置，如去掉固定在任务栏的快捷图标，将默认输入语言设置为中文、默认应用语言和系统显示语言设置为英文</p></li><li><p>安装 Scoop，参考的是之前写的 <a href="https://zs.fyi/archives/scoop-guidebook.html">Scoop 不完全上手指南</a>。安装完后，用户文件夹下多了一个 <code>.config</code> 文件夹，里面有 Scoop 的配置文件</p></li><li><p>先通过 Scoop 安装 shadowsocksr-csharp，前提是添加 extras bucket，而添加 extras bucket 的前提是安装 git 和 7zip。这一过程是异常痛苦的，网络环境并不太好，只能看着下载进度条慢慢地走……</p></li><li><p>垃圾小米笔记本，安装 git 时自动休眠睡死了，转向处理这一问题的 bug 分支。</p></li><li><p><del>初步判断是集成显卡驱动问题</del>并不是，可能跟主板芯片和电池管理驱动有关，所以老老实实把所有驱动打了一遍。为了加快驱动下载速度，安装 Internet Download Manager，而密钥存储在 1Password 中，先下载安装 1P。</p></li><li><p>安装 git 后，将原来的 <code>.gitconfig</code> 文件复制到用户目录下覆盖新生成的配置文件</p></li><li><p>安装完谷歌浏览器后，登录账号同步设置及插件，复制机场的订阅地址到小飞机，开启飞行模式</p></li><li><p>之前通过 Scoop 安装的一些软件虽然可以<a href="https://zs.fyi/archives/windows-open-with.html#Scoop-%E8%BF%81%E7%A7%BB%E5%8F%8A%E9%87%8D%E8%A3%85%E5%90%8E%E6%81%A2%E5%A4%8D%E4%BD%BF%E7%94%A8">无损迁移恢复使用</a>，但最终还是决定全部重装一遍，完整记录下来。</p></li><li><p>Scoop install: adb | android-sdk | anki | annie | aria2 | autohotkey | blender | bluescreenview | captura | chromedriver | concfg | curl | dark | dropit | everything | ffmpeg | figlet | fork | geckodriver | geekuninstaller | gimp | gpg | graphviz | honeyview | hugo | inkscape | joplin | lessmsi | motrix | msys2 | neovim | nodejs-lts | nvm | openjdk13 | openshot | pandoc | pandownload | php | proxifier-portable | pshazz | racket | screentogif | sharex | sqlite | sudo | sumatrapdf | telegram | time | touch | v2ray | v2rayn | vnote | vscode | which | winscp | yarn | youtube-dl | zotero</p></li><li><p>go 改为手动安装</p></li><li><p>将之前备份的文件还原回去</p></li><li><p>之后就剩一些「大块头」的软件以及收尾工作</p></li><li><p>最后就是系统设置</p></li><li><p>done</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;这次重装系统（为何要重装有兴趣的可翻看上上篇）我是一万个不愿意的，因为我知道系统重装的成本有多大。就单纯装个系统来说可能只需要十几分钟，但是装系统前的准备工作（主要是备份和制作安装启动 U 盘）以及系统装完后的恢复备份、软件安装调试、系统设置等，要想完全恢复之前的使用环境，差不多得需要一天的时间。现在是晚上的 10:42，先记录下该做的一些工作，按步骤来就不会出错。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Windows" scheme="https://zs.fyi/tags/Windows/"/>
    
    <category term="日常" scheme="https://zs.fyi/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>如何让应用在进入桌面前启动</title>
    <link href="https://zs.fyi/archives/early-start.html"/>
    <id>https://zs.fyi/archives/early-start.html</id>
    <published>2020-01-17T09:54:29.000Z</published>
    <updated>2023-07-20T13:17:43.747Z</updated>
    
    <content type="html"><![CDATA[<p>Windows 10 上安装了 <a href="https://www.stardock.com/products/fences/">Fences</a> 用来管理桌面上一些常用文件（夹），虽然它被设置为开机自启，但是在进入桌面后很长一段时间内它还处于启动状态，桌面文件不能迅速加载出来。受<a href="https://meta.appinn.net/t/windows-10-windows-10/13337">如何调整 Windows 10 软件开机启动顺序</a>启发，将这一过程记录下来，同时加入了前文中未提到的一些细节、注意事项以及如何卸载。</p><span id="more"></span><h3 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h3><p>首先，给出下面会使用到的工具的 repo：<a href="https://github.com/sylveon/EarlyStart">sylveon&#x2F;EarlyStart</a></p><ol><li><p>到 <a href="https://github.com/sylveon/EarlyStart/releases">release page</a> 下载，我此时使用的是 <a href="https://github.com/sylveon/EarlyStart/releases/download/1.0.0/EarlyStart.zip">1.0.0 版本</a>。下载完后解压，并将文件夹放置在一个固定位置，比如我的是 <code>D:\Code\EarlyStart</code></p></li><li><p>右键选中 <code>EarlyStart.exe</code>，在属性中<code>常规 - 安全</code>下取消勾选。如果和我一样，没有这个复选框的话，那就不用管。更多可参考：<a href="https://www.tenforums.com/tutorials/5357-unblock-file-windows-10-a.html#option1">Unblock the main executable</a></p></li><li><p>以管理员身份运行 CMD，进入第一步中的文件夹路径。如果你和我一样也将其放置在非系统盘，那么需要加 <code>/d</code> 参数才行，比如我的是 <code>cd /d D:\Code\EarlyStart</code></p></li><li><p>接着运行 <code>%windir%\Microsoft.NET\Framework\v4.0.30319\InstallUtil.exe .\EarlyStart.exe</code>，应该会有<code>成功完成</code>之类的字样，可以关闭 CMD 了</p></li></ol><p><img data-src="/images/2001/EarlyStart.png" alt="EarlyStart"></p><ol start="5"><li>在用户文件夹下，即 <code>C:\Users\&lt;username&gt;</code> 下新建一个 <code>.earlystart</code> 文件，然后将想要 earlystart 的应用程序路径每行写入一个。比如我的是 <code>&quot;C:\Program Files (x86)\Stardock\Fences\Fences.exe&quot;</code></li></ol><p><mark>注意</mark>：如果你写入上述文件的某一行程序路径无效的话，那么在这之后指定的任何程序都不会被 earlystart</p><ol start="6"><li>重启观察是否有变化</li></ol><h3 id="如何卸载"><a href="#如何卸载" class="headerlink" title="如何卸载"></a>如何卸载</h3><ol><li><p>以管理员身份运行 CMD，进入上述第一步的文件夹内</p></li><li><p>运行 <code>%windir%\Microsoft.NET\Framework\v4.0.30319\InstallUtil.exe /u .\EarlyStart.exe</code> 提示<code>成功</code>之类的字样就 OK 了</p></li><li><p>删除 <code>.earlystart</code> 文件，如果喜欢的话</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;Windows 10 上安装了 &lt;a href=&quot;https://www.stardock.com/products/fences/&quot;&gt;Fences&lt;/a&gt; 用来管理桌面上一些常用文件（夹），虽然它被设置为开机自启，但是在进入桌面后很长一段时间内它还处于启动状态，桌面文件不能迅速加载出来。受&lt;a href=&quot;https://meta.appinn.net/t/windows-10-windows-10/13337&quot;&gt;如何调整 Windows 10 软件开机启动顺序&lt;/a&gt;启发，将这一过程记录下来，同时加入了前文中未提到的一些细节、注意事项以及如何卸载。&lt;/p&gt;</summary>
    
    
    
    
    <category term="软件" scheme="https://zs.fyi/tags/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="Windows" scheme="https://zs.fyi/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>记一次 Windows 蓝屏修复？</title>
    <link href="https://zs.fyi/archives/windows-bluescreen.html"/>
    <id>https://zs.fyi/archives/windows-bluescreen.html</id>
    <published>2020-01-16T15:47:18.000Z</published>
    <updated>2023-07-20T13:17:43.751Z</updated>
    
    <content type="html"><![CDATA[<p>之前一直在折腾 Docker for Windows，但是网络方面的坑太深了我跨不过去，最终只得作罢。如果只是这样那还好，好聚好散、不合适就分，最恼人的是在我卸载完 Docker 到「Windows 功能」中关闭 Hyper-V 重启时竟然蓝屏了，停止代码为 <code>SYSTEM THREAD EXCEPTION NOT HANDLED</code>，且之后时不时会蓝屏一下，只能通过还原点还原系统。要是放以前，我应该早就掏出 U 盘重装了，但我实在不想折腾了，一想到那些大型软件又得重装一遍就头疼。所以，本着能修就修的想法，暂时找到以下解决办法（或许不是）。</p><span id="more"></span><h3 id="查找问题"><a href="#查找问题" class="headerlink" title="查找问题"></a>查找问题</h3><p>通过使用 BlueScreenView 查看 dump 文件，确定是由 <code>winhvr.sys</code> 驱动引起的 <code>ntoskrnl.exe</code> 崩溃，然后再看下面的文件描述，应该是 Hyper-V 跟网络虚拟服务导致的系统内核损坏，其他的就看不出什么名堂了。见下图：</p><p><img data-src="/images/2001/BlueScreenView.png" alt="BlueScreenView"></p><p>另外，dmp 文件我放在这里了：<a href="/images/2001/011620-8250-01.dmp">011620-8250-01.dmp</a>，大佬可以帮忙看看，有遇到类似问题的也可以作为参考。</p><p>有了以上基本信息，大致知道该往哪个方向查找资料了。</p><h3 id="解决问题？"><a href="#解决问题？" class="headerlink" title="解决问题？"></a>解决问题？</h3><p>我是以 <code>winhvr.sys ntoskrnl.exe 蓝屏</code> 为关键词进行谷歌搜索的，查到的<a href="https://social.technet.microsoft.com/Forums/zh-CN/b95905a4-5b9a-4936-9d65-b7f68df089d6/ntoskrnlexe3401323631-277142116165281240501997820256dmp?forum=win10itprogeneralCN">这篇</a>我认为是最有帮助的，虽然也有一点小错误。</p><p>参照上面回复中提供的解决方法，操作如下：</p><ol><li><p>首先以管理员身份运行 CMD，输入 <code>sfc /SCANNOW</code> 进行系统扫描验证并尝试修复，扫描结果发现确实存在损坏文件。</p></li><li><p>接着，运行 <code>DISM /Online /Cleanup-Image /RestoreHealth</code> 应该会自动运行什么还原操作。</p></li><li><p>待上述操作完成后，输入 <code>sfc /VERIFYONLY</code> 再进行系统扫描验证，发现已经可以了，不存在完整性冲突。</p></li></ol><p><img data-src="/images/2001/SCANNOW.png" alt="SCANNOW"></p><p>不过，至于是否真的解决了问题，我也不确定，后续没再更新的话就是没问题了。</p><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>似乎并没有用，之后 <code>sfc /VERIFYONLY</code> 虽然扫描验证说不存在完整性冲突但还是蓝屏了几次。而且，一个奇怪的现象是，关机后启动不会蓝屏，选择重启大概率会蓝屏。这是之后两次的 dmp 文件：<a href="/images/2001/011720-10140-01.dmp">011720-10140-01.dmp</a> 和 <a href="/images/2001/011720-10281-01.dmp">011720-10281-01.dmp</a></p><p>受不了了，我太菜了，实在找不到办法解决了，最后决定重装系统了。另外，我后来复盘发现，极有可能是 VMware 和 Hyper-V 冲突的原因，然而当时没有意识到。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前一直在折腾 Docker for Windows，但是网络方面的坑太深了我跨不过去，最终只得作罢。如果只是这样那还好，好聚好散、不合适就分，最恼人的是在我卸载完 Docker 到「Windows 功能」中关闭 Hyper-V 重启时竟然蓝屏了，停止代码为 &lt;code&gt;SYSTEM THREAD EXCEPTION NOT HANDLED&lt;/code&gt;，且之后时不时会蓝屏一下，只能通过还原点还原系统。要是放以前，我应该早就掏出 U 盘重装了，但我实在不想折腾了，一想到那些大型软件又得重装一遍就头疼。所以，本着能修就修的想法，暂时找到以下解决办法（或许不是）。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Windows" scheme="https://zs.fyi/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Docker for Windows 网络方面的坑</title>
    <link href="https://zs.fyi/archives/docker-tutorial.html"/>
    <id>https://zs.fyi/archives/docker-tutorial.html</id>
    <published>2020-01-15T05:33:48.000Z</published>
    <updated>2023-07-20T13:17:43.747Z</updated>
    
    <content type="html"><![CDATA[<p>最先在小众软件上分享：<a href="https://meta.appinn.net/t/docker-for-windows/13263">Docker for Windows 网络方面的坑</a></p><span id="more"></span><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>Windows 10 LTSC 2019 Version 1809</li><li>启用 Hyper-V</li><li>安装 Docker for Windows 非 Docker Toolbox</li></ul><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol><li>网络状态未识别，默认安装的两个虚拟交换机 Default Switch 和 DockerNAT 一直是未识别的网络</li></ol><p><img data-src="/images/2001/Internet.png" alt="Internet"></p><p><img data-src="/images/2001/vEthernet.png" alt="vEthernet"></p><ol start="2"><li>默认安装的虚拟机不显示 IP 地址，Hyper-V 也无法连接上虚拟机</li></ol><p><img data-src="/images/2001/VM.png" alt="VM"></p><ol start="3"><li>命令 <code>docker-machine ls</code> 显示为空，即使上图中 Docker 的宿主机是存在的</li></ol><p><img data-src="/images/2001/docker-machine.png" alt="docker-machine"></p><p>和这位遇到的情况差不多：<a href="https://segmentfault.com/q/1010000014706486">docker hyper-V 无法访问虚拟机</a></p><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>放弃。有 Linux 不用，我在 Windows 上用 Docker 图的啥啊，又不馋她身子。</p><p>另外，这类的 issue 三年前就有人提了：<a href="https://github.com/docker/for-win/issues/367">Docker HyperV vEthernet (DockerNAT) is Un-identified Network (Public Network) in tray</a>，至今似乎仍未解决。</p><h3 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h3><p>我继续查了点资料后，发现 Docker 默认的网络模式其实是 bridge，参见：<a href="https://docs.docker.com/network/">docker docs - Networking overview</a></p><p>但是，Docker bridge 的实现方式好像又跟 Linux bridge 不太一样，具体我没看太懂，参见：<a href="https://www.v2ex.com/t/344321">探索 Docker bridge 的正确姿势 小白亲测有效！</a></p><p>Docker bridge 模式下 Docker Daemon 会创建一个名为 docker0 的虚拟网桥（<a href="https://yeasy.gitbooks.io/docker_practice/advanced_network/docker0.html">配置 docker0 网桥</a>），用于连接宿主机与容器，或者是容器之间的通信……</p><p>不过呢，以上所说的都是 Linux 环境下的。Docker for Windows 虽然同样默认 bridge 模式，但是由于实现方式不同，</p><blockquote><p>Because of the way networking is implemented in Docker Desktop for Windows, you cannot see a docker0 interface on the host. This interface is actually within the virtual machine.</p></blockquote><p>Windows 上是不存在 docker0 这玩意儿的，参见：<a href="https://docs.docker.com/docker-for-windows/networking/">docker docs - Networking features in Docker Desktop for Windows</a></p><p>所以，我就一直在这里面转不出来。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最先在小众软件上分享：&lt;a href=&quot;https://meta.appinn.net/t/docker-for-windows/13263&quot;&gt;Docker for Windows 网络方面的坑&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="Docker" scheme="https://zs.fyi/tags/Docker/"/>
    
    <category term="Windows" scheme="https://zs.fyi/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>用 IPv6 来拯救你的校园网</title>
    <link href="https://zs.fyi/archives/ssr-ipv6-proxifier.html"/>
    <id>https://zs.fyi/archives/ssr-ipv6-proxifier.html</id>
    <published>2020-01-10T03:33:45.000Z</published>
    <updated>2023-07-20T13:17:43.751Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>之前的服务器被我手贱搞崩了，我原本不打算重发的。但后来想想你们从别处跳转过来看到的如果只是 <code>404 Not Found</code>，除了一脸懵逼之外，心里也会有几分不爽。于是，有了以下精简版，也跟之前的有些不一样。</p></div><span id="more"></span><h3 id="购置-VPS"><a href="#购置-VPS" class="headerlink" title="购置 VPS"></a>购置 VPS</h3><p>你用哪家都行，支持 IPv6 就好。</p><p>我在用的是 RamNode 家的，这是<a href="https://clientarea.ramnode.com/aff.php?aff=3737">邀请链接</a>。不喜，可直接访问其<a href="https://www.ramnode.com/">首页</a>。</p><p>顺便一提，他家现在更新面板了，而且采用计时收费的方式，随时可以销毁服务器。如果决定使用他家的 VPS Instance，<del>建议系统选择为 Ubuntu 18.04 及以上而不要选 Debian 系列的，好像 Debian 系列有 Bug，IPv6 是不通的</del><mark>他家的 Bug 很诡异，自己在 Debian 9、Ubuntu 18、CentOS 7 中一个个尝试吧，反正按时计费</mark>。</p><h3 id="服务端搭建"><a href="#服务端搭建" class="headerlink" title="服务端搭建"></a>服务端搭建</h3><p>新手简单使用的话，直接看这个就好：<a href="https://github.com/233boy/ss/wiki/Shadowsocks%E6%90%AD%E5%BB%BA%E8%AF%A6%E7%BB%86%E5%9B%BE%E6%96%87%E6%95%99%E7%A8%8B">某大型同性交友网站指南</a>。</p><h3 id="客户端安装"><a href="#客户端安装" class="headerlink" title="客户端安装"></a>客户端安装</h3><p>愿意尝试使用 <a href="https://zs.fyi/archives/scoop-guidebook.html">Scoop</a> 的话，安装只需一条命令：<code>scoop install shadowsocksr-csharp</code>。</p><p>手动安装的话依然是：<a href="https://github.com/shadowsocksrr/shadowsocksr-csharp/releases">某大型同性交友网站</a>。</p><h3 id="客户端使用"><a href="#客户端使用" class="headerlink" title="客户端使用"></a>客户端使用</h3><p>如果是用上面脚本的话，你甚至可以通过「二维码扫描」自动填写相关服务信息。</p><p>此外，建议「系统代理模式」选<code>全局模式</code>，「PAC」选<code>更新 PAC 为 GFWList</code>，「代理规则」选<code>绕过局域网和大陆</code>。</p><h3 id="Proxifier-设置"><a href="#Proxifier-设置" class="headerlink" title="Proxifier 设置"></a>Proxifier 设置</h3><p>可以看看这篇，他也是参考了我之前写的：<a href="https://phantomt.github.io/2019/05/02/Linux-000-VPS/#%E4%BD%BF%E7%94%A8Proxifier%E8%BF%9B%E8%A1%8C%E5%85%A8%E5%B1%80%E4%BB%A3%E7%90%86">Phantom T</a>。</p><p>其他的应该就没有了。</p><p>好好学习，爱国敬业。多思考，增强明辨是非的能力，不信谣不传谣。</p><p>外网优秀的学习资源那么多，如果只是看些捕风捉影、耸人听闻的假消息，实在是不应该。</p>]]></content>
    
    
    <summary type="html">&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;之前的服务器被我手贱搞崩了，我原本不打算重发的。但后来想想你们从别处跳转过来看到的如果只是 &lt;code&gt;404 Not Found&lt;/code&gt;，除了一脸懵逼之外，心里也会有几分不爽。于是，有了以下精简版，也跟之前的有些不一样。&lt;/p&gt;
&lt;/div&gt;</summary>
    
    
    
    
    <category term="IPv6" scheme="https://zs.fyi/tags/IPv6/"/>
    
    <category term="校园网" scheme="https://zs.fyi/tags/%E6%A0%A1%E5%9B%AD%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>使用「小鹤双拼」三个月后</title>
    <link href="https://zs.fyi/archives/xnheulpb.html"/>
    <id>https://zs.fyi/archives/xnheulpb.html</id>
    <published>2020-01-07T17:14:48.000Z</published>
    <updated>2023-07-20T13:17:43.751Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇属于旧文新发。在百度统计里面看见有访问这个页面的，于是改了固定链接格式后，再把这篇文章从简书拿过来。以下为原文。</p></div><p>作为一个喜欢折腾、手速不快、键位不熟的人，三个月前尝试并开始使用双拼输入法，现分享一下我的体会。</p><span id="more"></span><h3 id="可选输入方式"><a href="#可选输入方式" class="headerlink" title="可选输入方式"></a>可选输入方式</h3><p>就我所知，目前输入方式大致有三种：手写输入、键盘输入以及语音输入。</p><p>手写输入，顾名思义就是通过手写然后机器识别的方式完成输入过程；键盘输入，应该是使用最多的输入形式吧，不管是五笔输入、全拼输入、双拼输入还是叼到爆的速录机，都是通过敲击键盘以特定编码方式「组字」的过程；随着语音识别技术（以科大讯飞为代表）的发展，语音输入在移动端的使用也越来越多。</p><h3 id="几个名词"><a href="#几个名词" class="headerlink" title="几个名词"></a>几个名词</h3><p>在分析各输入法的优缺点之前先介绍几个名词。</p><ul><li><p>重码率：不同的汉字或词组具有相同的编码的概率，比如<code>博客</code>和<code>播客</code>都对应着相同的编码 <code>BoKe</code>，<code>帅</code>和<code>衰</code>都对应着 <code>Shuai</code> 等。</p></li><li><p>击键次数：平均输入一个字所敲击键盘的次数。</p></li><li><p>上手难度：这个就见仁见智了。</p></li></ul><h3 id="简单对比"><a href="#简单对比" class="headerlink" title="简单对比"></a>简单对比</h3><p>手写输入：这个上手难度低，只要会写字就行，而且如果字没有写错的话，重码率也很低。不过以我的观察，该输入方式使用最多的群体是「70 后」及之前的爷爷奶奶辈。</p><p>语音输入：这个就更简单了，对着手机说话就行，用嘴输入，无论是使用普通话还是粤语、四川话等好像识别度都还可以。但是，使用平台有限，如果在电脑上使用语音输入的话就显得有点怪怪的。所以，目前还没有可以在 PC 端使用的语音输入法。</p><p>键盘输入：</p><ul><li><p>五笔输入：重码率极低，击键次数也少，可谓效率最佳；但是学习门槛高，常常会使学习者有种「步子迈大了，咔」的挫败感，目前大多存活在 90 年代第一波接触电脑的人中。</p></li><li><p>全拼输入：毫无长处，也没有明显的短板，最中庸。从上面提到的三个方面讲：重码率不低，经常需要选字，尤其在打那些生僻的单个字的时候，翻好几页选字的时候真真想狗带；击键次数很多（大部分情况下应该是最多的），比如<code>中华人民共和国</code>全拼为 <code>ZhongHuaRenMinGongHeGuo</code> 需要击键 23 次，当然有云输入自然不需要这么费劲，后面再讲；在上手难度上起码得会拼音，高于手写输入和语音输入。这是一种妥协的方案。借用「少数派」上一篇文章中的某句话，这世界分分秒秒来去匆匆，中庸的，却往往是最合适的，全拼自然就成为传播最广的输入方式。</p></li><li><p>双拼输入：本质上也是拼音输入，是对键盘的重新定制，可以看作是对全拼输入的改善和提高。所以，在重码率和上手难度方面和全拼输入是一样的，只是对全拼输入的最大缺点——击键次数过多进行化解。</p></li></ul><h3 id="全拼输入-VS-双拼输入"><a href="#全拼输入-VS-双拼输入" class="headerlink" title="全拼输入 VS 双拼输入"></a>全拼输入 VS 双拼输入</h3><p>前面已经说过，双拼不是对全拼的重新改造，只是对键盘的重新定制。</p><p>汉字拼音是由声母和韵母构成的，但声母和韵母所需要输入的字母个数是不一定的，从一个到三个不等，按键时就需要进行多次输入才能组成一个声母或韵母。比如<code>中国</code>二字的拼音为 <code>Zhong Guo</code>，使用全拼输入的话中的声母为 <code>Zh</code> 需要击键两次，韵母为 <code>ong</code> 需要击键三次，国的声母为 <code>G</code> 只需击键一次，韵母 <code>uo</code> 则需击键两次。但是，双拼输入遵循两键一字的理念，比如使用小鹤双拼方案的话输入中国只需要敲击 <code>vsgo</code> 就行了。</p><p>我觉得双拼能做到的不仅是按键上的减少，事实上它更加符合学习拼音的人的思维习惯，比如<code>凉的</code>这两个字。我们在脑袋中思考这两个字的方式都是 <code>l + iang</code> 和 <code>d + e</code> 这样<code>声母 + 韵母</code>的方式，如果用双拼输入就非常有节奏感，两键一个字。而全拼则是 <code>liang</code> <code>de</code>，前五后二并没有输入节奏。可能单个词组影响不大，但是放在句子中间的影响则会明显很多，特别是长篇写作的时候，全拼真是让人心累。</p><h3 id="云输入（智能联想）"><a href="#云输入（智能联想）" class="headerlink" title="云输入（智能联想）"></a>云输入（智能联想）</h3><p>在云输入（智能联想）技术还没有这么先进的时候，全拼输入在击键次数过多和重码率高这两方面的缺陷是很明显的。所以，我觉得智能联想技术的出现正是为了弥补这两方面的缺陷。</p><p>还是以上面的<code>中华人民共和国</code>为例，全拼输入需要击键 23 次的话效率是很低的；但是有了智能联想技术，可能你只需要输入<code>中华人民</code>后面的就联想出来了，或者输入每个字的首字母 <code>zhrmghg</code> 也能联想出来。</p><p>在这方面做得比较好的，同时用的人数也是最多的（PC 端和移动端）应该就属搜狗输入法了吧。我曾经也用过，广为诟病的广告弹窗在高级设置里也能关闭且不复发，但用过一段时间后还是觉得它太臃肿，最终卸载不用。其他的输入法貌似也差不多，没找到一个满意的，所以用回了 Windows 自带的输入法，自定义了小鹤双拼方案，用着省心舒心。这年头的软件啥都想干，争着抢占用户的每一个流量入口，就不能走点心吗？</p><h3 id="双拼方案选择"><a href="#双拼方案选择" class="headerlink" title="双拼方案选择"></a>双拼方案选择</h3><p>层出不穷。常见的双拼方案有<code>自然码方案</code>、<code>微软方案</code>、<code>搜狗方案</code>和我在用的<code>小鹤双拼方案</code>等，具体的我也没有太关注，只是键位映射不同罢了。凭个人喜好选择就好了。</p><p>比如「小鹤双拼」方案：</p><p><img data-src="/images/2001/xnheulpb.png" alt="xnheulpb"></p><p>一开始我没搞清，我直接在小鹤双拼的官网下载安装了小鹤双拼飞扬版。其实小鹤双拼输入法是包括双拼和双形的，新手以及满足日常需求的话只需要学习双拼或者在别的输入法（如搜狗）中启用小鹤双拼方案，最多再加个辅助码就行了。</p><p>双拼 + 双形重码率更低，打字效率更高，但同时记忆量也更大（需要记忆字根），下图为字根图：</p><p><img data-src="/images/2001/zigf.png" alt="zigf"></p><p><img data-src="/images/2001/zigftu.png" alt="zigftu"></p><p>双拼 + 双形合二为一图：</p><p><img data-src="/images/2001/zigfzixk.png" alt="zigfzixk"></p><p>有兴趣，可前往小鹤双拼官网进一步学习：<a href="https://flypy.com/index.html">小鹤双拼输入法</a></p>]]></content>
    
    
    <summary type="html">&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇属于旧文新发。在百度统计里面看见有访问这个页面的，于是改了固定链接格式后，再把这篇文章从简书拿过来。以下为原文。&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;作为一个喜欢折腾、手速不快、键位不熟的人，三个月前尝试并开始使用双拼输入法，现分享一下我的体会。&lt;/p&gt;</summary>
    
    
    
    
    <category term="利器" scheme="https://zs.fyi/tags/%E5%88%A9%E5%99%A8/"/>
    
    <category term="小鹤双拼" scheme="https://zs.fyi/tags/%E5%B0%8F%E9%B9%A4%E5%8F%8C%E6%8B%BC/"/>
    
    <category term="输入法" scheme="https://zs.fyi/tags/%E8%BE%93%E5%85%A5%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>尝试系统学习使用 Zotero</title>
    <link href="https://zs.fyi/archives/learn-to-use-zotero.html"/>
    <id>https://zs.fyi/archives/learn-to-use-zotero.html</id>
    <published>2020-01-06T05:55:51.000Z</published>
    <updated>2023-07-20T13:17:43.747Z</updated>
    
    <content type="html"><![CDATA[<p>恰逢 Zotero 6.0 正式版发布没多久，来填两年多前留的这个坑，应该不会太晚。主要讲一讲如何设置并且快速上手使用，而且根据我的观察，很多人对其中一些概念分得似乎不是很清，影响了他们的工作流程设定。</p><span id="more"></span><h3 id="前置要求"><a href="#前置要求" class="headerlink" title="前置要求"></a>前置要求</h3><p>在开始之前，先安装下面的插件和软件。当然，假定你已经安装了 <a href="https://www.zotero.org/download/">Zotero</a> 最新版以及你所使用的浏览器对应的 Zotero Connector 插件。</p><h4 id="插件篇"><a href="#插件篇" class="headerlink" title="插件篇"></a>插件篇</h4><ul><li><p><a href="http://zotfile.com/">ZotFile</a> 可以方便添加附件及重命名</p></li><li><p><a href="https://github.com/l0o0/jasminum">Jasminum - 茉莉花</a> 对国内文献数据库（如：CNKI）支持良好，可自动下载文献 PDF</p></li><li><p><a href="https://retorque.re/zotero-better-bibtex/">Better BibTeX</a> 可选，如果你不知道 LaTeX 是啥的话</p></li><li><p><a href="https://github.com/ethanwillis/zotero-scihub">Zotero Scihub</a> 可帮助你尝试从 Sci-Hub 上下载文献</p></li></ul><h4 id="软件篇"><a href="#软件篇" class="headerlink" title="软件篇"></a>软件篇</h4><ul><li><a href="https://www.pdflabs.com/tools/pdftk-server/">PDFtk Server</a> 上面的茉莉花插件需要，可帮助自动生成和添加 PDF 书签（仅在支持的情况下，如国内硕博论文和一些外文期刊。下载硕博论文 PDF 版，可转到<a href="https://chn.oversea.cnki.net/index/">知网海外版</a>）。你可通过 <a href="https://zs.fyi/archives/scoop-guidebook.html">Scoop</a> 安装 <code>scoop install pdftk</code>。当然，也可手动<a href="https://www.pdflabs.com/tools/pdftk-server/">安装</a>。由于我使用的是 Windows，如果你是其他系统的话，请到上面茉莉花页面查看对应安装说明。</li></ul><h4 id="账号篇"><a href="#账号篇" class="headerlink" title="账号篇"></a>账号篇</h4><ul><li><p>Zotero 账号，官网注册即可</p></li><li><p>支持 WebDAV 协议的云存储工具，如<a href="https://www.jianguoyun.com/">坚果云</a>等，下文以此为例</p></li><li><p>任一你常用的云存储服务，如 OneDrive 等，下文以此为例</p></li></ul><h3 id="软件及插件设置"><a href="#软件及插件设置" class="headerlink" title="软件及插件设置"></a>软件及插件设置</h3><p>以下描述中英文参杂，我也懒得切换软件语言和配图，还请仔细查找对照设置项。以下选项属个人偏好，如果第一次使用的话，可完全根据我的来，之后再作调整。</p><p>不过到这里出现了两种路径，即只在桌面端使用 Zotero 和搭配 iPad 使用。在那之前，先介绍一下 Zotero，我们利用它保存的无非两种数据：文献条目信息及对应的附件，前者包含文献的元数据，方便写作时引用和著录，后者则是文献 PDF 和笔记等。Zotero 免费提供了 300MB 的存储空间，如果附件也一并同步的话肯定是不够的，当然你也可以年付 120 美金以获取无限空间，那样的话也不用纠结和折腾了。</p><p>好了，确定你我都是暂时无力负担官方存储服务之人，在附件同步的选择上只剩下链接形式和 WebDAV 这两种，与上面两种路径分别对应。使用前者同步的是纯 PDF 文件，使用后者的话，每一条文献条目会同步两个文件，一个是 PDF 的压缩文件，另一个我也不知道是啥，可参看<a href="https://www.zotero.org/support/sync">官方文档</a>页面。</p><p>因此，如果不需要在平板上看文献的话，我不建议使用 WebDAV 同步。顺嘴说一句，团队类型的文献库即使是附件也只能通过官方同步，不过个人使用可以先不管。</p><h4 id="两种路径共有设置"><a href="#两种路径共有设置" class="headerlink" title="两种路径共有设置"></a>两种路径共有设置</h4><p><strong>General</strong></p><ul><li><p>取消勾选 Automatically take snapshots when creating items from web pages</p><p>我不需要它自动创建文献的网页快照</p></li><li><p>取消勾选 Automatically rename attachment files using parent metadata</p><p>使用 ZotFile 来重命名</p></li><li><p>取消勾选 Automatically tag items with keywords and subject headings</p><p>不让软件自动打标签</p></li></ul><p><strong>Cite</strong></p><ul><li>添加国标引用和著录样式，留给你自己去探索</li></ul><p><strong>茉莉花插件设置</strong></p><ul><li><p>勾选 Retrieve CNKI meta data when add Chinese articles</p></li><li><p>PDFtk Server Execute File Path 选择 PDFtk Server 安装目录下的 bin 目录</p></li><li><p>在 Unofficial Translators Repository 中更新所有解析器，并在 浏览器插件设置 Advanced - Translators 中点击 Update Translators</p></li></ul><p><strong>Zotero Scihub 插件</strong></p><ul><li><p>取消勾选自动下载 PDF，在新版本中它可能会打断浏览器插件和茉莉花插件的文献下载</p></li><li><p>根据实际情况修改 URL，如 <a href="https://sci-hub.se/">https://sci-hub.se/</a></p></li></ul><p><strong>ZotFile 插件设置</strong></p><ul><li><p>Source Folder for Attaching Files 设置为常用的下载文件夹</p></li><li><p>Other Advanced Settings 选择 Always rename</p></li></ul><h4 id="区别设置"><a href="#区别设置" class="headerlink" title="区别设置"></a>区别设置</h4><div class="tabs" id="two-ways"><ul class="nav-tabs"><li class="tab active"><a href="#two-ways-1">只在桌面端使用</a></li><li class="tab"><a href="#two-ways-2">搭配 iPad 使用</a></li></ul><div class="tab-content"><div class="tab-pane active" id="two-ways-1"><p><strong>Sync</strong></p><ul><li>登录账号并取消勾选 Sync automatically，也可保持勾选</li></ul><p><strong>Advanced</strong></p><ul><li>Base Directory 设置为 OneDrive PDF 文件夹，即你想放置和同步 PDF 文献的地方</li></ul><p><strong>ZotFile 插件设置</strong></p><ul><li>Custom Location 设置为上述 Base Directory</li></ul></div><div class="tab-pane" id="two-ways-2"><p><strong>Sync</strong></p><ul><li><p>登录账号并在下方文件同步处将默认的 Zotero 改为 WebDAV，这是坚果云官方提供的<a href="https://help.jianguoyun.com/?p=3168">帮助文档</a></p></li><li><p>在 iPad 上登录账号，并将同步方式改为 WebDAV，使用方式同上</p></li></ul></div></div></div><h3 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h3><p>至此，大致的工作流已经形成了。</p><p>采用 WebDAV 同步的同学，在数据库中看到一篇不错的文献，点击浏览器上插件的图标将自动为你抓取文献信息和尝试下载文献 PDF 并保存到 Zotero 上。否则你将需要手动下载保存到常用下载文件夹，然后回到 Zotero 右键点击该文献条目，选择 Attach New File，弹出对话框询问你是否将最近下载的那个文件添加为附件。然后，坚果云等工具工作，便可以在 iPad 上点击文献条目，下载文献，阅读。你在任一平台上做的笔记也会同步到其他平台。在 Zotero 6.0 正式版和移动端推出后我就是转向这种方式的。</p><p>采用另一种方式同步的同学，前面添加文献条目和附件的步骤都相同，你甚至也能在 iPad 上阅读（比如安装 OneDrive iPad 版），但是无法直接在 Zotero 移动端中像上面一样点击阅读，因为你是以链接形式添加的附件。</p><!-- **Sync**登录账号并取消勾选 Sync automatically（弃用）附件通过坚果云与 iPad 同步（新增） --><!-- **Advanced**Base Directory 设置为 OneDrive PDF 文件夹（弃用） --><!-- **ZotFile 插件设置**Source Folder for Attaching Files 设置为下载文件夹Custom Location 设置为上述 Base Directory（弃用）Other Advanced Settings 选择 Always rename -->]]></content>
    
    
    <summary type="html">&lt;p&gt;恰逢 Zotero 6.0 正式版发布没多久，来填两年多前留的这个坑，应该不会太晚。主要讲一讲如何设置并且快速上手使用，而且根据我的观察，很多人对其中一些概念分得似乎不是很清，影响了他们的工作流程设定。&lt;/p&gt;</summary>
    
    
    
    
    <category term="利器" scheme="https://zs.fyi/tags/%E5%88%A9%E5%99%A8/"/>
    
    <category term="软件" scheme="https://zs.fyi/tags/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="Zotero" scheme="https://zs.fyi/tags/Zotero/"/>
    
    <category term="文献管理" scheme="https://zs.fyi/tags/%E6%96%87%E7%8C%AE%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Windows 右键「打开方式」</title>
    <link href="https://zs.fyi/archives/windows-open-with.html"/>
    <id>https://zs.fyi/archives/windows-open-with.html</id>
    <published>2020-01-04T09:39:38.000Z</published>
    <updated>2023-07-20T13:17:43.751Z</updated>
    
    <content type="html"><![CDATA[<p>虽然标题是右键「打开方式」，但可能会把近期碰到的问题、发现、猜想都揉在一起。</p><span id="more"></span><h3 id="右键中的「打开方式」"><a href="#右键中的「打开方式」" class="headerlink" title="右键中的「打开方式」"></a>右键中的「打开方式」</h3><p>之前通过 Scoop 安装了 vscode，用 vscode 打开过 <code>.py</code> 文件，而后又把 vscode 卸载了。我发现，当你右键单击 <code>.py</code> 文件选择打开方式时，会发现残存的东西（如下图），不用说肯定又和注册表有关。</p><p><img data-src="/images/2001/open-with.png" alt="open-with"></p><p>打开注册表编辑器，搜索 <code>C:\Users\Zheng\scoop\apps\vscode\current\Code.exe</code> 在路径 <code>计算机\HKEY_CLASSES_ROOT\py_auto_file\shell\open\command</code> 下发现了相关注册表值，将其删除，问题似乎解决，在这篇<a href="https://www.lmdouble.com/1820352339.html">文章</a>中也得到印证。但是，这个问题是否真的解决了呢，有没有其他的注册表残留项。问题的关键在于，我对 Windows 注册表不了解，不了解它的文件结构和各部分功能，下次遇到其他问题又得像瞎子一样乱撞，在网络上疯狂查找资料。所以，得了解有关注册表的知识，包括设计思路、演变发展、各部分功能等。</p><h3 id="从-CMD-打开文件夹"><a href="#从-CMD-打开文件夹" class="headerlink" title="从 CMD 打开文件夹"></a>从 CMD 打开文件夹</h3><p>在解决上述问题的过程中，还学习到了一点，从 CMD 快速打开一些特殊文件夹。</p><p>假设说，你当前的 CMD Prompt 是在桌面，即 <code>C:\Users\Zheng\Desktop&gt;</code>，那么</p><p><code>start .</code> 可以快速打开当前所在目录，<code>start ..</code> 打开的则是用户目录，<code>.</code> 和 <code>..</code> 和 Linux 中是一致的。</p><p>类推，<code>start %appdata%</code> 打开的便是用户程序安装目录，<code>start shell:startup</code> 打开的是「用户启动文件夹」，等等。</p><h3 id="关于软件安装位置的困惑"><a href="#关于软件安装位置的困惑" class="headerlink" title="关于软件安装位置的困惑"></a>关于软件安装位置的困惑</h3><p>以我 64 位的 Windows 10 系统来说，软件可能安装在如下位置：</p><ul><li><code>C:/Program Files</code> 和 <code>C:/Program Files (x86)</code></li><li><code>C:/Users/&lt;username&gt;/AppData</code></li><li><code>C:/ProgramData</code></li></ul><p>这些安装位置的不同跟权限和系统架构有着直接关系。很多软件现在都默认安装在用户文件夹下，因为可以实现静默安装，尤其是一些流氓软件。此外，像上面后两个目录默认是隐藏状态的，一般人可能还不容易找到，更别谈修改删除，当然可能这部分（甚至是大部分）用户也不会想要去干点什么。</p><h3 id="Scoop-迁移及重装后恢复使用"><a href="#Scoop-迁移及重装后恢复使用" class="headerlink" title="Scoop 迁移及重装后恢复使用"></a>Scoop 迁移及重装后恢复使用</h3><p>根据 GitHub issue「<a href="https://github.com/lukesampson/scoop/issues/2894">How to use scoop after reinstalling the system</a>」及参考该<a href="https://jiayaoo3o.github.io/2019/03/19/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%A6%82%E4%BD%95%E6%81%A2%E5%A4%8D%E4%BD%BF%E7%94%A8scoop/">文章</a>（文章作者即为上述 issue 的提出者），步骤如下：</p><ol><li><p>将 Scoop 安装目录完整保存至他处</p></li><li><p>将上述保存的文件夹放置在目标处</p></li><li><p>在用户环境变量中，新建一个 SCOOP 变量，值为第二步中 scoop 文件夹地址，如 <code>D:\Scoop</code></p></li><li><p>在用户变量 Path 中新增一条，值为第二步中 scoop 文件夹下 shims 文件夹地址，如 <code>D:\Scoop\shims</code></p></li><li><p>允许脚本执行：<code>set-executionpolicy remotesigned -s currentuser</code></p></li><li><p><code>scoop reset *</code> 等待 scoop 重置完</p></li></ol><h3 id="Python-3-8-1-下-Jupyter-Notebook-启动报错"><a href="#Python-3-8-1-下-Jupyter-Notebook-启动报错" class="headerlink" title="Python 3.8.1 下 Jupyter Notebook 启动报错"></a>Python 3.8.1 下 Jupyter Notebook 启动报错</h3><p>原本打算将 Python 转到也使用 Scoop 进行安装，安装完后发现 Python 版本为 3.8.1 并且启动不了 Jupyter Notebook。在网上查到，<a href="https://stackoverflow.com/questions/58422817/jupyter-notebook-with-python-3-8-notimplementederror">这一问题</a>跟 tornado 有关并且知道了解决办法。</p><p>但是呢，我不想这样做，于是尝试通过 <code>scoop install python37</code> 安装 3.7.6 版本的 Python，安装完后 <code>scoop reset python37</code> 但是 <code>python --version</code> 依然显示 3.8.1。几番尝试之后，无果，作罢，不知道是我的姿势有问题，还是说 <code>scoop reset</code> 目前只支持在 2.7 和 3.x 版本之间切换而不支持 3.7.6 与 3.8.1 版本间的切换？最后，还是采用手动的方式安装 Python 3.7.6，问题解决。Python 和 R 也是为数不多的没有通过 Scoop 进行安装的软件。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;虽然标题是右键「打开方式」，但可能会把近期碰到的问题、发现、猜想都揉在一起。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Windows" scheme="https://zs.fyi/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Scoop 不完全上手指南</title>
    <link href="https://zs.fyi/archives/scoop-guidebook.html"/>
    <id>https://zs.fyi/archives/scoop-guidebook.html</id>
    <published>2020-01-03T05:11:06.000Z</published>
    <updated>2023-07-20T13:17:43.751Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>以下基本上都是对 <a href="https://github.com/lukesampson/scoop/wiki">Wiki</a> 的整理，调整顺序的同时加入一些自己的理解，无语言障碍可直接到 GitHub 或<a href="https://scoop.netlify.com/">官方文档</a>阅读。</p></div><span id="more"></span><h3 id="Scoop-是什么"><a href="#Scoop-是什么" class="headerlink" title="Scoop 是什么"></a>Scoop 是什么</h3><p>借用 Mike Zick 对 Cygwin 和 MSYS 的<a href="http://sourceforge.net/mailarchive/forum.php?thread_name=200506130821.11185.mszick@morethan.org&forum_name=mingw-msys">描述</a>，他对 Scoop 作了一个类比描述：</p><blockquote><p>Scoop is an installer</p><p>The goal of Scoop is to let you use Unix-y programs in a normal Windows environment</p></blockquote><p>并且他也称，Scoop 并不是一个包管理器，而是通过读取 JSON 描述文件来安装程序及其依赖。Scoop 专注于开源和命令行开发工具，不符合其标准的不可能进入 main bucket（Scoop 安装后便自带的），因而虽然通过 <code>scoop install skype</code> 也能安装 Skype，但是只能放在 extra bucket 中。</p><p>在与 <a href="https://chocolatey.org/">Chocolatey</a> 对比时，他提到了 Scoop 的一些特性，其中不乏吸引我选择使用它而非前者的因素。</p><ol><li><p>Scoop 默认安装在用户文件夹下（<code>~/scoop/</code>），那么在权限方面就很友好，安装程序时不会跳出 UAC 提醒，不需要管理员权限。</p></li><li><p>不会对路径造成污染。像是平常手动安装以及通过 Chocolatey 安装程序时，安装目录散落各地，有在 <code>C:/Program Files</code> 和 <code>C:/Program Files (x86)</code> 的，也有在 <code>C:/Users/&lt;username&gt;/AppData</code> 的，还有在 <code>C:/ProgramData</code> 的。其实这些安装位置都是跟 “install for all users” 和 “install only for me” 的区别有关的，背后对应的是不同的权限（我瞎说的），但是看上去非常乱也不好管理。Scoop 则是将程序的 shims（我理解为指向所安装软件当前版本的快捷方式，非科班的我面对这些术语流下了眼泪）集中放在一个文件夹中统一管理，并将其添加至环境变量。</p></li><li><p>相比包管理器和应用仓库更简单（simpler）。使用 Scoop 最简单的形式只需 Git + JSON 就够了，通过 Git 读取同步 repo 中描述如何安装某个程序的文件（里面写明了程序的版本、下载地址、解压目录、bin 及安装前后的工作等），然后 <code>scoop install &lt;app&gt;</code> 完事。</p></li><li><p>可安装程序的某个特定版本并可以在版本间切换。如 <code>scoop install python27</code> 便可以安装 Python 2.7 版本（当然得先通过 <code>scoop bucket add versions</code> 添加 versions bucket），同时 <code>scoop install python</code> 安装的则是 Python 的最新版本。</p></li></ol><h3 id="安装-Scoop"><a href="#安装-Scoop" class="headerlink" title="安装 Scoop"></a>安装 Scoop</h3><p>其实安装之前，应该先将 Scoop 中的几个重要概念讲清楚的，比如上面多次提到的 bucket。但是，既然是上手指南，实用为先，概念可以暂先这样理解：所谓 app 就是要安装的一个应用程序，app manifest 则是含有某个应用程序安装信息（如上所述，程序版本、下载地址等）的 JSON 文件，bucket 则是存放这些 manifest 的 repo（如托管在 GitHub 上的 <a href="https://github.com/ScoopInstaller/Main/tree/master/bucket">main bucket</a>）。</p><p>首先，唤出 PowerShell（Windows 10 下都可以），<code>set-executionpolicy remotesigned -scope currentuser</code>，然后选择允许（Y）执行本地脚本。</p><ul><li>如果是想安装在默认位置，即 <code>C:/Users/&lt;username&gt;/scoop</code> 的话，直接运行</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Invoke-Expression</span> (<span class="built_in">New-Object</span> System.Net.WebClient).DownloadString(<span class="string">&#x27;https://get.scoop.sh&#x27;</span>)</span><br></pre></td></tr></table></figure><p>或者 <code>iwr -useb get.scoop.sh | iex</code> 即可。</p><ul><li>如果是想自定义安装位置，如 <code>D:/Scoop</code>，那么逐条运行下面命令</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$env:SCOOP</span>=<span class="string">&#x27;D:\Scoop&#x27;</span></span><br><span class="line">[<span class="type">environment</span>]::setEnvironmentVariable(<span class="string">&#x27;SCOOP&#x27;</span>,<span class="variable">$env:SCOOP</span>,<span class="string">&#x27;User&#x27;</span>)</span><br><span class="line"><span class="built_in">iwr</span> <span class="literal">-useb</span> get.scoop.sh | <span class="built_in">iex</span></span><br></pre></td></tr></table></figure><p>至于如何安装全局应用到自定义目录就先不说了。至此，如无报错信息，Scoop 安装完成。</p><h3 id="卸载-Scoop"><a href="#卸载-Scoop" class="headerlink" title="卸载 Scoop"></a>卸载 Scoop</h3><p>卸载非常简单，只需运行 <code>scoop uninstall scoop</code> 即可。</p><h3 id="使用-Scoop"><a href="#使用-Scoop" class="headerlink" title="使用 Scoop"></a>使用 Scoop</h3><p>记得随时使用 <code>scoop help</code> 查看帮助信息</p><h4 id="scoop-search"><a href="#scoop-search" class="headerlink" title="scoop search"></a>scoop search</h4><p>查找软件，通常是想看看某个程序是否可以通过 Scoop 安装</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop search &lt;app&gt;</span><br></pre></td></tr></table></figure><p>如</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop search python</span><br></pre></td></tr></table></figure><h4 id="scoop-install"><a href="#scoop-install" class="headerlink" title="scoop install"></a>scoop install</h4><p>安装应用程序，分两种情况：</p><ul><li>只为当前用户安装，安装在 Scoop 目录下的 apps 文件夹</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop install &lt;app&gt;</span><br></pre></td></tr></table></figure><p>如</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop install python</span><br></pre></td></tr></table></figure><ul><li>为所有用户安装，默认安装在 <code>C:/ProgramData/scoop</code> 或者是上文提到的自定义的全局应用安装目录，并且需要以管理员身份运行</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop install &lt;app&gt; <span class="literal">-g</span></span><br></pre></td></tr></table></figure><p>如</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop install python <span class="literal">-g</span></span><br></pre></td></tr></table></figure><p>如果要安装特定版本的应用，比如说 <code>curl 7.56.1</code>，则应该这样</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop install <span class="built_in">curl</span>@<span class="number">7.56</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="scoop-uninstall"><a href="#scoop-uninstall" class="headerlink" title="scoop uninstall"></a>scoop uninstall</h4><p>卸载某一程序</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop uninstall &lt;app&gt;</span><br></pre></td></tr></table></figure><p>如</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop uninstall python</span><br></pre></td></tr></table></figure><p>卸载程序并移除所有配置文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop uninstall &lt;app&gt; <span class="literal">-p</span></span><br></pre></td></tr></table></figure><p>如</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop uninstall python <span class="literal">-p</span></span><br></pre></td></tr></table></figure><p>卸载全局安装的应用程序，需以管理员身份运行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop uninstall &lt;app&gt; <span class="literal">-g</span></span><br></pre></td></tr></table></figure><p>如</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop uninstall python <span class="literal">-g</span></span><br></pre></td></tr></table></figure><h4 id="scoop-update"><a href="#scoop-update" class="headerlink" title="scoop update"></a>scoop update</h4><p>更新 Scoop 及所有 bucket 但不更新 app</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop update</span><br></pre></td></tr></table></figure><p>更新某一特定程序</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop update &lt;app&gt;</span><br></pre></td></tr></table></figure><p>如</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop update python</span><br></pre></td></tr></table></figure><p>更新 Scoop、bucket 及所有程序</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop update *</span><br></pre></td></tr></table></figure><p>更新全局安装的程序，需要以管理员身份运行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop update &lt;app&gt; <span class="literal">-g</span></span><br></pre></td></tr></table></figure><p>如</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop update python <span class="literal">-g</span></span><br></pre></td></tr></table></figure><h4 id="scoop-list"><a href="#scoop-list" class="headerlink" title="scoop list"></a>scoop list</h4><p>查看已安装的程序</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop list</span><br></pre></td></tr></table></figure><h4 id="scoop-status"><a href="#scoop-status" class="headerlink" title="scoop status"></a>scoop status</h4><p>查看哪些程序可以升级</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop status</span><br></pre></td></tr></table></figure><h4 id="scoop-config"><a href="#scoop-config" class="headerlink" title="scoop config"></a>scoop config</h4><p>需要设置的一般也就是两个，aria2 开关以及 proxy 设置</p><p>开闭 aria2 <code>scoop config aria2-enabled true</code> or <code>scoop config aria2-enabled false</code>，但不建议开启，经常有各种奇奇怪怪的问题。同时，启用 aria2 前需要先安装 <code>scoop install aria2</code></p><p>proxy 设置，如 <code>scoop config proxy 127.0.0.1:1080</code></p><h4 id="scoop-home"><a href="#scoop-home" class="headerlink" title="scoop home"></a>scoop home</h4><p>查看某一程序的主页</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop home &lt;app&gt;</span><br></pre></td></tr></table></figure><p>如</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop home python</span><br></pre></td></tr></table></figure><p>便唤起浏览器，打开 Python <a href="https://www.python.org/">官网</a></p><h4 id="scoop-reset"><a href="#scoop-reset" class="headerlink" title="scoop reset"></a>scoop reset</h4><p>借用 Wiki <a href="https://github.com/lukesampson/scoop/wiki/Switching-Ruby-And-Python-Versions">例子</a></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先添加 versions bucket</span></span><br><span class="line">scoop bucket add versions</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同时安装 Python 2.7 和最新版本</span></span><br><span class="line">scoop install python27 python</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到 Python 2.7.x</span></span><br><span class="line">scoop reset python27</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到 Python 3.x</span></span><br><span class="line">scoop reset python</span><br></pre></td></tr></table></figure><h4 id="scoop-cleanup"><a href="#scoop-cleanup" class="headerlink" title="scoop cleanup"></a>scoop cleanup</h4><p>删除已安装软件的旧版本，如删除所有软件旧版本</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop cleanup *</span><br></pre></td></tr></table></figure><h4 id="scoop-cache"><a href="#scoop-cache" class="headerlink" title="scoop cache"></a>scoop cache</h4><p>清理软件缓存，通常是下载的软件安装包。以下命令清除所有缓存，即清空 Scoop 目录下的 cache 文件夹</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop cache <span class="built_in">rm</span> *</span><br></pre></td></tr></table></figure><h4 id="scoop-bucket"><a href="#scoop-bucket" class="headerlink" title="scoop bucket"></a>scoop bucket</h4><p>查看「已知库」</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop bucket known</span><br></pre></td></tr></table></figure><p>查看已经添加的库</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop bucket list</span><br></pre></td></tr></table></figure><p>删除已经添加的库</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop bucket <span class="built_in">rm</span> &lt;bucket&gt;</span><br></pre></td></tr></table></figure><p>添加库，分两种情况：</p><ul><li>添加「已知库」</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop bucket add &lt;bucket&gt;</span><br></pre></td></tr></table></figure><p>如添加上文提到的 versions 库</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop bucket add versions</span><br></pre></td></tr></table></figure><ul><li>添加第三方库</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop bucket add &lt;bucket&gt; &lt;bucket_url&gt;</span><br></pre></td></tr></table></figure><p>如添加 Ash258、chawyehsu 和我的库</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scoop bucket add Ash258 https://github.com/Ash258/Scoop<span class="literal">-Ash258</span>.git</span><br><span class="line">scoop bucket add dorado https://github.com/chawyehsu/dorado.git</span><br><span class="line">scoop bucket add spoon https://github.com/FDUZS/spoon.git</span><br></pre></td></tr></table></figure><h3 id="Scoop-进阶"><a href="#Scoop-进阶" class="headerlink" title="Scoop 进阶"></a>Scoop 进阶</h3><p>看完以上内容，入门足够。我也刚使用不到半年，认为进阶需要搞懂以下几点：</p><ol><li><p>App Manifest 创建并可以实现「自动更新」</p></li><li><p>“Current” 文件夹及背后设计思路</p></li><li><p>找出其设计缺陷之处，即让你不爽的点</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;以下基本上都是对 &lt;a href=&quot;https://github.com/lukesampson/scoop/wiki&quot;&gt;Wiki&lt;/a&gt; 的整理，调整顺序的同时加入一些自己的理解，无语言障碍可直接到 GitHub 或&lt;a href=&quot;https://scoop.netlify.com/&quot;&gt;官方文档&lt;/a&gt;阅读。&lt;/p&gt;
&lt;/div&gt;</summary>
    
    
    
    
    <category term="利器" scheme="https://zs.fyi/tags/%E5%88%A9%E5%99%A8/"/>
    
    <category term="Scoop" scheme="https://zs.fyi/tags/Scoop/"/>
    
  </entry>
  
  <entry>
    <title>1Password、Enpass、Bitwarden 使用体验之比较</title>
    <link href="https://zs.fyi/archives/comparison-among-three-password-managers.html"/>
    <id>https://zs.fyi/archives/comparison-among-three-password-managers.html</id>
    <published>2019-12-30T15:37:10.000Z</published>
    <updated>2023-07-20T13:17:43.747Z</updated>
    
    <content type="html"><![CDATA[<p>一篇关于三款密码管理工具主观不全面，偏体验和细节的比较评测，主要从价格、同步情况、密码填充和界面等方面展开。</p><span id="more"></span><p>半年多前，一次偶然机会得知 1Password（下称 1P）提供一年的家庭版试用机会，到期后付费也就不到 60 美元 &#x2F; 年（个人版不到 36 美元），并不算贵，于是便注册了个账号开始尝试使用密码管理软件。我算是比较谨慎的人，自从接触网络以来没有使用过弱密码，最开始使用的也含有十位以上的数字字母，后来加入了特殊字符以及逐渐演化出的一套自定义密码规则和根据账号重要程度的三级密码分级制度。这算是在使用 1P 前我自认为比较完善的密码管理方法，兼顾了密码记忆难度和安全性。但是，有时候账号的重要程度是无法严格区分的那么后期记忆的时候就有可能用错不同等级的密码，此外不同应用（网站）对密码的要求不一样（有不少不支持密码中含有特殊字符的，又或者我自定义的密码规则超出了最大长度只能删减或者降低密码等级缩短长度），还有就是如果开启 TOTP 验证必须安装诸如 Google Authenticator 的应用非常麻烦（麻烦之处有二：一为填写验证码时必须拿出手机而无法直接在桌面电脑上完成，二则是考虑到同步及意外情况需换用支持 TOTP 验证同步的应用。虽然与「不将鸡蛋放在一个篮子里」相悖，但我曾遇到过这类意外和通过申诉、人工服务等找回密码的窘境，所以同步功能自然在我考虑范围之内）。</p><p>说回到密码管理软件，1P 确实改变了我的密码管理习惯并且极大地提高了生活幸福感。比如，新注册的账号我都直接用 Password Generator 生成 24 位（如果支持的话，否则减少长度）含大小写字母、数字、特殊字符的随机密码，我可以毫无顾忌地开启 TOTP 验证，发现哪些密码是多个账号共用的，通过浏览器插件一键填充，支持通过 Windows Hello、Face ID 解锁等。但是，就 1P 而言，它并不完美。首先，同步速度真的是不敢恭维，有时必须得退出应用后重新启动它似乎才会反应过来；然后是保存的 Item 中有些网站应用的图标无法成功抓取只留一个「小锁」，这对于强迫症患者来说是非常抓狂的；再有就是关于密码分享的，比如我将我 Private Vault 中的某个账号密码分享给家人后在 All Vaults 中会显示两个（一个在 Private，一个在 Shared），这是正常的。但是，当我修改 Private Vault 中这个账号某些信息后，我所期望的是 Shared Vault 中该账号信息也随之变化，但事实并非如此。我得先将原来共享的删除后，再重复一次共享操作。这有点像「浅拷贝」和「深拷贝」的区别，不知能否明白我的意思。</p><p><img data-src="/images/1912/1Password-Generator.png" alt="1Password-Generator"></p><p>除了上面提到的三个痛点，1P 确实是我今年尝试过的最爽的应用之一。但人嘛，总想追求最好的，即使可能并不存在或者这已经是最好的。于是，在一众密码管理软件中，我努力寻找属于我的那一个。我首先剔除了 LastPass（出过安全事故）和 KeePass（首先自然是 Windows 下的 UI 不讨喜，其次是以插件的形式添加功能需投入很多时间打磨，以及各个平台客户端的设计风格不统一），SafeInCloud、Dashlane 等之前听得比较少，最后考虑到时间成本等因素只挑选了 Enpass 和 Bitwarden 加入比较。同时，由于手上只有 Windows 笔记本和 iPhone，故无法对 macOS、Linux 和 Android 下的使用表现进行评价。所以，这是一篇主观不全面，偏体验和细节的比较评测。</p><h3 id="收费模式"><a href="#收费模式" class="headerlink" title="收费模式"></a>收费模式</h3><ul><li><p><strong>受限的免费版</strong>：在提供免费版本上，各家也有不同的思路。比如，1Password 只提供 30 天试用而没有可供免费使用的「阉割版」。Enpass 则是桌面端、移动端都提供全功能的免费版本，但是移动端免费版本能保存的密码条数最多只有 25 条且只有一个 Vault。Bitwarden 的思路又不同，它提供免费版本且对密码条数没有限制，但是某些功能只有高级账户才能使用，其中就包括对我来说非常关键的 TOTP 认证。此外，像密码泄露检查、弱密码和多账号共用密码检查等也需要高级账户才能解锁。</p></li><li><p><strong>订阅制</strong>：1Password 是这三者中最贵的，个人版年付 2.99 美元 &#x2F; 月，家庭版年付 4.99 美元 &#x2F; 月。Enpass 年付 0.99 美元 &#x2F; 月，现在还有圣诞节半价优惠。Bitwarden 则是个人版 10 美元 &#x2F; 年，家庭版 1 美元 &#x2F; 月。</p></li><li><p><strong>一次性买断</strong>：Enpass 是三者中唯一仍旧提供买断制的，平常价格为 49.99 美元，同样现在半价优惠为 24.99 美元。</p></li></ul><h3 id="数据存储和同步方式"><a href="#数据存储和同步方式" class="headerlink" title="数据存储和同步方式"></a>数据存储和同步方式</h3><ul><li><p><strong>本地存储 + WebDAV&#x2F;Dropbox</strong>：同样，这三者中 Enpass 又是比较特别的一个，它的密码可以完全只存放在本地，也可以借助 iCloud、Dropbox 等云存储同步，还支持 WebDAV。那么，借助 WebDAV 可以将密码通过坚果云来同步，极大加快了同步速度，解决了上面提到的使用 1P 时同步慢的问题。</p></li><li><p><strong>官方服务器</strong>：默认情况下，1P 和 Bitwarden 都是通过官方服务器来同步密码的，我感觉这俩的速度都差不多，可能后者要快那么一点。当然，有此感觉也可能是对 1P 的龟速怨念所致。</p></li><li><p><strong>自建服务器</strong>：Bitwarden 的服务端、桌面端、移动端等都是开源的，它也非常慷慨大方地提供了通过 Docker 来自行部署的<a href="https://help.bitwarden.com/article/install-on-premise/">方法</a>，并且全过程非常地简单。唯一的一点就是，要求服务器的内存至少 2GB。但是，有个兄弟用 Rust 实现了这一功能，并将<a href="https://github.com/dani-garcia/bitwarden_rs">源码</a>公布在 GitHub 上，对服务器的要求大大降低。我在按照官方教程部署完之后，与 bitwarden_rs 版比较发现，在前者中那些高级账户的 features 仍然没有解锁或者说是根据你注册时使用的邮箱来决定是否解锁（邮箱账号是否已经是 Premium），而在 Rust 版中所有的功能都是可以直接用的。此外，在搭建过程中还是遇到不少坑的，比如通过官方的 Docker 安装后一直无法收到 Verification Email，后百般尝试才解决。搭建过程和踩的坑可能会另写一篇文章。</p></li></ul><p>更新：在删除测试用的密码时，我发现似乎官方版 Docker 搭建的同步和响应速度要快些，不知是不是心理作用。</p><p>更新：不得不说，官方版吃内存真是猛啊……</p><p><img data-src="/images/1912/GCP.png" alt="GCP"></p><h3 id="密码填充"><a href="#密码填充" class="headerlink" title="密码填充"></a>密码填充</h3><p>作为密码管理软件的核心功能，我反而觉得没有什么可说的。如果连密码填充都做不好的话，还有什么必要选它呢。这三者的密码填充方式也不太相同，Bitwarden 属于一次点击自动填充，Enpass 默认设置是双击自动填充并提交。1P 可能是因为我最先使用且已经全面接管了谷歌浏览器的「自动填充」，在网页表单右侧会驻留一个「小锁」并显示填充浮窗，单击即可完成填充，如果开启了 TOTP 会连 one-time password 也一并复制供后续填充。</p><p><img data-src="/images/1912/1Password-Chrome.png" alt="1Password-Chrome"></p><p><img data-src="/images/1912/1Password-Web-Form.png" alt="1Password-Web-Form"></p><p>但，以上所述功能在这三款软件使用期间均遇到抽风的情况。</p><h3 id="用户界面"><a href="#用户界面" class="headerlink" title="用户界面"></a>用户界面</h3><p>就 Windows 下来说，我觉得 1P 和 Bitwarden 的界面都还可以，但是不太喜欢 Enpass，它的设计风格 Windows 气息太浓了，没阴影、没圆角、没渐变，丑拒。</p><p><img data-src="/images/1912/1Password-PC.png" alt="1Password-PC"></p><p><img data-src="/images/1912/Bitwarden-PC.png" alt="Bitwarden-PC"></p><p><img data-src="/images/1912/Enpass-PC.png" alt="Enpass-PC"></p><p>iOS 下其实也和 PC 下差不多，Enpass 我感觉依旧最丑，虽然比 Windows 版好看了一点。不过，下图一最左侧 Face ID 解锁 Enpass 时下面的一大块黑真的是辣眼睛。</p><p><img data-src="/images/1912/Enpass-iOS.JPG" alt="Enpass-iOS"></p><p><img data-src="/images/1912/1Password-iOS.JPG" alt="1Password-iOS"></p><p><img data-src="/images/1912/Bitwarden-iOS.JPG" alt="Bitwarden-iOS"></p><p>在功能布局上，三者的侧重点也不一样。Enpass 的底栏分别是所有密码条目按字母升序（左上角同步，右上角可以新添密码）、分类标签页和 TOTP 及附件查看（乱七八糟）、密码检测和生成页、设置页，给我的感觉就是页面功能分类不清和重复多余。比如说，我觉得 All Items 页和 Groups 可以合并在一起，将搜索框、同步按钮及新增按钮挪到 Groups 中去。相比之下，我觉得 1P 的思路可能更好一下，虽然它也有四栏，但却不会给我凌乱的感觉。第一栏中显示的是加星的那些密码项和最近使用过的，同时还提供了搜索框。第二栏是分类页，右上角可以新增条目且同样可以检索密码项。第三栏就比较特别和有意思，它是一个标签页，虽然我这里目前是空的，但可以想见即使以后添加了各种标签大概率一页也足够全部显示，不会显得繁杂。但是，前面的「分类」和这里的「标签」是否也存在重复呢，仔细观察的话会发现很多软件中都有这二者共存的现象，找机会我得好好研究一下。第四栏设置页就不多说了。Bitwarden 是这三者中界面最简洁的，第一栏将分类和具体密码项放在一起，顶部是搜索和新增按钮，第二栏就完全只是一个密码生成器，最后一栏同样是设置页。我不是很认同其第二栏的做法，就我来说移动端功能基本就是填充密码，像注册账号生成密码之类的工作都会在桌面上完成，所以对我来说将这一功能单独放在一栏完全没必要。</p><h3 id="一些重要的细节"><a href="#一些重要的细节" class="headerlink" title="一些重要的细节"></a>一些重要的细节</h3><ul><li><p><strong>Website Icon 的获取逻辑</strong>：1P 在这方面的表现应该是最差的，一开始在「三个痛点」中就有提到，另外两款软件都能获取到偏偏它不行。Enpass 和 Bitwarden 在抓取逻辑上也存在不同。就我不严谨观察发现，在 <a href="https://mail.zju.edu.cn/">https://mail.zju.edu.cn</a> 的抓取上两者表现不一样，Enpass 抓取的图标居然是浙大的校徽「求是鹰」，而这是 <a href="https://www.zju.edu.cn/">https://www.zju.edu.cn</a>的 icon，与之相对 Bitwarden 则正确抓取了「邮件」icon。但是，这俩货在别的网站上抓取的好像又是一样的，不知为何。</p></li><li><p><strong>「复制」操作后的反馈</strong>：Bitwarden 的反馈是最好的，你分别复制 Username、Password、Website 项，得到的反馈也一一对应：Username copied、Password copied、Website copied。其次是 Enpass，它虽然有明显的反馈但是你无论是复制什么，它只会告诉你 Copied to Clipboard。相比之下，1P 的反馈就没有那么明显，只是表单字段底色变成深色。</p></li><li><p><strong>表单字段抓取</strong>：我觉得 Enpass 在这方面的表现是最差的。下图是我完全使用 Enpass 注册的一个账号（密码生成 + 表单抓取保存），当你点开「Show Webform」时会发现它抓取了很多不必要的信息并且需要经常到「FORM MAPPING」中进行调整（因为有些网站注册时需要填用户名、邮箱、密码等信息，但是登录时「用户名」只能是邮箱而不是前述用户名，但 Enpass 填充时会将用户名填入表单）。</p></li></ul><p><img data-src="/images/1912/Enpass-Webform.png" alt="Enpass-Webform"></p><p>并且，在应对像 Box 这类<a href="https://account.box.com/login">登录页面</a>时，Enpass 显得更加力不从心。这类登录页面有这样一个特点，你需要先填写用户名（Username&#x2F;Email），点击下一步后才会出现密码框和登录按钮。起先我以为这样设计，Box 会先对输入的用户名进行核验，后来发现其实不会，那我就不是很明白这样操作的意义了。</p><p><img data-src="/images/1912/Box-login.png" alt="Box-login"></p><p>那么，Enpass 会抓取些什么呢？下面是谷歌浏览器 Enpass 插件提示我保存的 Item，发现漏掉了用户名（此处为 Email），我觉得是不堪使用的。</p><p><img data-src="/images/1912/Enpass-Add-Item.png" alt="Enpass-Add-Item"></p><ul><li><strong>Item 自动命名</strong>：在这一项中，我最喜欢 Bitwarden 的处理方式，它的 Item Name 使用的都是登录网站的域名，比如登录的 Website 为 <code>mail.zju.edu.cn</code>，那么其 Item Name 就同样是 <code>mail.zju.edu.cn</code>。这对于一个强迫症患者来说真的是无比舒适。1P 默认抓取的应该是 <code>head</code> 标签下 <code>title</code> 标签的值，中规中矩。我最不喜欢的是 Enpass 的处理方式，它同样是根据登录网站的域名来确定 Item Name 的。只不过，我认为它的做法有点简单粗暴甚至自以为是，直接截取域名的二级域，然后首字母大写其余一律小写。仍旧以 <code>mail.zju.edu.cn</code> 为例，那么它默认保存的 Item Name 为 <code>Zju</code>，对这种做法我只能呵呵。</li></ul><p><img data-src="/images/1912/Bitwarden-Items.png" alt="Bitwarden-Items"></p><p><img data-src="/images/1912/Enpass-Items.png" alt="Enpass-Items"></p><ul><li><p><strong>TOTP 添加方式</strong>：Windows 下除 1P 可以扫描二维码外，其余两个都必须手动输入 code 或者掏出手机来扫码。虽然 1P 有些二维码也不能直接识别必须借助手机，但是有总比没有好，还是必须给好评的。</p></li><li><p><strong>单击 Tray Icon 后的表现</strong>：Enpass 又是个奇葩，你无论是左键单击还是右键单击任务栏的图标，它的表现都是一样的：打开它的 mini 界面，类似于 1P 中的「1Password mini」。我们平常所养成的习惯或者遵循的惯例是，<code>右键单击任务栏图标退出软件</code>，但我们若想退出 Enpass 还得再多一步操作，加上不区分左右键单击功能，我认为不太合理。另外两个就很好。</p></li></ul><h3 id="我的选择"><a href="#我的选择" class="headerlink" title="我的选择"></a>我的选择</h3><p>首先自然不会选 Enpass，除了支持 WebDAV 和一众网盘同步，提供一次性买断外，好像找不出什么优点甚至全是缺点了。我纠结的其实是 1P 和 Bitwarden，前者的诸如弱密码、共用密码检测可以直接在桌面端查看，但这些属于 Bitwarden Premium 才能解锁的 feature 且只能在 Web 端查看。通过 Bitwarden 官方 Docker 镜像自建同样需要升级到 Premium，Rust 版其实又不太放心（后期官方调整更改 API），还需支付服务器的费用，虽然不是什么事。价格的话，其实一年 10 刀跟一年 36 刀我觉得没有什么差别，这样想来，我为何觉得手上的 1P 更香了，只不过还是得忍受它的几个缺点。至于 Bitwarden，真的没什么缺点（虽然同步速度也不太行），可玩性又很大，比如在搭建过程中温习了 Docker 相关知识，应当持续关注。</p><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><ul><li><p>感谢 Enpass、Bitwarden、1Password 开发者开发出这么好用的工具，虽然我注定和你们其中二者分手，但你们依然是好人</p></li><li><p>感谢 Google Cloud Platform 慷慨提供的 300 美元赠金，测试所用的 4C4G 和 1C4G 虚拟服务器来自于此</p></li><li><p>感谢坚果云对 WebDAV 的支持</p></li><li><p>感谢阿里云免费使用的邮件推送服务</p></li><li><p>感谢 Freenom 提供的免费域名</p></li><li><p>感谢 Cloudflare 提供的免费域名解析</p></li><li><p>感谢 Docker 及 bitwarden_rs 开发者</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;一篇关于三款密码管理工具主观不全面，偏体验和细节的比较评测，主要从价格、同步情况、密码填充和界面等方面展开。&lt;/p&gt;</summary>
    
    
    
    
    <category term="利器" scheme="https://zs.fyi/tags/%E5%88%A9%E5%99%A8/"/>
    
    <category term="软件" scheme="https://zs.fyi/tags/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="密码管理" scheme="https://zs.fyi/tags/%E5%AF%86%E7%A0%81%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Excel 2016 打开空白</title>
    <link href="https://zs.fyi/archives/excel-2016-blank.html"/>
    <id>https://zs.fyi/archives/excel-2016-blank.html</id>
    <published>2019-12-27T12:00:55.000Z</published>
    <updated>2023-07-20T13:17:43.747Z</updated>
    
    <content type="html"><![CDATA[<p>如题，有时候莫名其妙 Excel 直接双击打开文件一片空白。其实之前也遇到过，在网上找了相关资料暂时解决了，但是今天又遇到了，尝试了另一种方法成功解决，特此记录。</p><span id="more"></span><p>查到的解决方法中，最多的是修改注册表。已知的需要修改以下三处：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HKEY_CLASSES_ROOT\Excel.csv\shell\Open\command</span><br><span class="line">HKEY_CLASSES_ROOT\Excel.Sheet.12\shell\Open\command</span><br><span class="line">HKEY_CLASSES_ROOT\Excel.Sheet.8\shell\Open\command</span><br></pre></td></tr></table></figure><p>修改前看到的值应该是 <code>&quot;C:\Program Files\Microsoft Office\Root\Office16\EXCEL.EXE&quot; &quot;/DDE&quot;</code>，需将其修改为 <code>&quot;C:\Program Files\Microsoft Office\Root\Office16\EXCEL.EXE&quot; &quot;%1&quot;</code>。</p><p>但不确定除这三处外其他地方是否也需要修改。所以，如果你对如何修改注册表不了解的话，可以采取「修复 Office 应用程序」这种更简单稳妥的方式。</p><p>如果是 Windows 10 的话，流程如下：<kbd>Start</kbd> + <kbd>I</kbd> 打开「Windows 设置」，找到「应用」，然后在「应用和功能」中找到安装的 Office，点击「修改」，选择「联机修复」即可。更多详情可查看：<a href="https://support.office.com/zh-cn/article/%E4%BF%AE%E5%A4%8D-office-%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F-7821d4b6-7c1d-4205-aa0e-a6b40c5bb88b">修复 Office 应用程序</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;如题，有时候莫名其妙 Excel 直接双击打开文件一片空白。其实之前也遇到过，在网上找了相关资料暂时解决了，但是今天又遇到了，尝试了另一种方法成功解决，特此记录。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Office" scheme="https://zs.fyi/tags/Office/"/>
    
  </entry>
  
  <entry>
    <title>Scoop 并没有那么好</title>
    <link href="https://zs.fyi/archives/scoop-is-not-that-good.html"/>
    <id>https://zs.fyi/archives/scoop-is-not-that-good.html</id>
    <published>2019-12-27T11:53:59.000Z</published>
    <updated>2023-07-20T13:17:43.751Z</updated>
    
    <content type="html"><![CDATA[<p>了解过 Scoop 的想必在不少网站上看过介绍它的文章，其中「少数派」就有三篇。但是，这些文章几乎都是赞美，很少有指出其缺点的。</p><span id="more"></span><p>在 Linux 上有 APT、Yum、Pacman 等，macOS 上有 Homebrew，而 Windows 上一直缺少一个像样的包管理器。正如 Scoop 的 slogan 所讲「A command-line installer for Windows」，它在很大程度上确实扛起了这一重担，通过命令行这种 cool &amp; sexy 方式就可以完成软件的搜索、安装、升级、卸载，甚至可以在软件的不同版本之间切换。</p><p>很多时候，尤其是跟开发有关的，我不仅需要安装一个软件，还需要一个工具帮我管理 path。也就是说，当涉及到需要 path 或环境变量的时候，我会非常乐于使用 Scoop 去做，它提供了一套自动化的方法来帮我们完成这项乏味的工作，这是 Scoop 带给我们最大的价值。</p><p>但，我觉得它还是不够好。</p><p>下面就我通过 Scoop 安装的软件，挑出一些来讲在哪些方面存在缺点。</p><p>首先是 7-Zip，这应该算是 Scoop 上除了 aria2、git 之外必装的软件，毕竟都需要解压这一过程。那通过 Scoop 安装的 7-Zip 与手动安装的有什么区别呢？首先先明确，因为 Scoop 不会写入注册表，所以 7-Zip 的一些常用快捷功能如提取和压缩文件不会自动集成到鼠标右键，需要打开软件进行手动设置。这番操作下来，像这种小软件，我还不如直接手动下载安装文件进行安装。</p><p>再来说说 vscode（Visual Studio Code）。同样是因为不写注册表（似乎有点成也萧何败也萧何的感觉了），在 Scoop 中安装完 vscode 后不会自动关联 <code>.py</code>、<code>.js</code>、<code>.go</code>、<code>.md</code> 等文件类型。当你想要打开如 <code>demo.py</code> 时，如果之前没有用 vscode 打开过 Python 文件，不好意思先得选择用哪个软件打开，而且很有可能还得一层层找到 vscode 的安装目录才行。虽然这些都是一次性的工作，但这样下来 Scoop 似乎并没有带来多大的幸福感。</p><p>其次再来说说 R 和 RStudio，后者的使用是要基于前者的。<del>通过 Scoop 安装的 R 由于安装目录并没有在预设的「标准目录」，所以当启动 RStudio 时它会很困惑，你说你已经安装了 R 可是为啥我找不到哩……于是，我们又得手动为它指定 R 的安装目录。</del><mark>更正</mark>：其实使用 Scoop 安装更简单，直接 <code>scoop install rstudio</code> 便会依次为你安装 R 和 RStudio，rtools 也可以用 Scoop 安装。</p><p>这算是我目前使用不长的时间内发现的槽点，它为我们省去了一些工作，但同时又把一些原本软件安装过程中可以自动完成的事非让我们手动来做。我觉得 Scoop 适合用来安装像 aria2、curl、sudo 等工具，其他的像 Docker 等需要 UAC 提权或者需要写注册表的软件和许多 GUI 程序都不太适合（7-Zip 我觉得也要手动再安装一个，或者其他解压缩软件）。</p><p>再谈到它的 slogan，Scoop 其实只是一个 installer，我们不应把它当成像 pacman 一样的包管理器，用于掌管万物。根据自己的使用习惯，将其用来维护一些开发工具和小众软件（如 pandoc 这类没有自动更新功能的工具，以及另一些只能提示更新但不能自动更新的软件）即可。或许，可以将两者结合起来，一个 <code>scoop home [软件名]</code> 如 <code>scoop home 7zip</code> 轻松唤起浏览器并打开软件主页，手动下载安装完事，Scoop 深藏功与名。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;了解过 Scoop 的想必在不少网站上看过介绍它的文章，其中「少数派」就有三篇。但是，这些文章几乎都是赞美，很少有指出其缺点的。&lt;/p&gt;</summary>
    
    
    
    
    <category term="利器" scheme="https://zs.fyi/tags/%E5%88%A9%E5%99%A8/"/>
    
    <category term="软件" scheme="https://zs.fyi/tags/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="Scoop" scheme="https://zs.fyi/tags/Scoop/"/>
    
  </entry>
  
  <entry>
    <title>常用设置及一些镜像站</title>
    <link href="https://zs.fyi/archives/some-configurations.html"/>
    <id>https://zs.fyi/archives/some-configurations.html</id>
    <published>2019-12-27T11:39:29.000Z</published>
    <updated>2023-07-20T13:17:43.751Z</updated>
    
    <content type="html"><![CDATA[<p>一些常用的代理设置方式，公共 DNS 记录以及软件镜像源，记录备用。</p><span id="more"></span><h3 id="代理设置"><a href="#代理设置" class="headerlink" title="代理设置"></a>代理设置</h3><h4 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置</span></span><br><span class="line">set http_proxy=http://127.0.0.1:1080</span><br><span class="line">set https_proxy=http://127.0.0.1:1080</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取消</span></span><br><span class="line">set http_proxy=</span><br><span class="line">set https_proxy=</span><br></pre></td></tr></table></figure><h4 id="PowerShell"><a href="#PowerShell" class="headerlink" title="PowerShell"></a>PowerShell</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$env:http_proxy</span>=<span class="string">&quot;127.0.0.1:1080&quot;</span></span><br><span class="line"><span class="variable">$env:https_proxy</span>=<span class="string">&quot;127.0.0.1:1080&quot;</span></span><br></pre></td></tr></table></figure><p>为了方便，将下面函数添加到 <code>$PROFILE</code> 中就可以通过 proxy 和 unproxy 来实现设置与取消代理了。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Set and unset proxy for PowerShell</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">proxy</span></span> &#123;</span><br><span class="line">    <span class="keyword">param</span> (</span><br><span class="line">        <span class="variable">$ssr</span> = <span class="string">&quot;127.0.0.1:1080&quot;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">New-Item</span> <span class="literal">-Path</span> Env: <span class="literal">-Name</span> http_proxy <span class="literal">-Value</span> <span class="variable">$ssr</span></span><br><span class="line">    <span class="built_in">New-Item</span> <span class="literal">-Path</span> Env: <span class="literal">-Name</span> https_proxy <span class="literal">-Value</span> <span class="variable">$ssr</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unproxy</span></span> &#123;</span><br><span class="line">    <span class="built_in">Remove-Item</span> <span class="literal">-Path</span> Env:\http_proxy</span><br><span class="line">    <span class="built_in">Remove-Item</span> <span class="literal">-Path</span> Env:\https_proxy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Git-Bash"><a href="#Git-Bash" class="headerlink" title="Git Bash"></a>Git Bash</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置</span></span><br><span class="line"><span class="built_in">export</span> http_proxy=http://127.0.0.1:1080</span><br><span class="line"><span class="built_in">export</span> https_proxy=http://127.0.0.1:1080</span><br><span class="line"><span class="comment"># 取消</span></span><br><span class="line"><span class="built_in">unset</span> http_proxy https_proxy</span><br></pre></td></tr></table></figure><h4 id="All-APPs"><a href="#All-APPs" class="headerlink" title="All APPs"></a>All APPs</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置</span></span><br><span class="line">netsh winhttp import proxy source=ie</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取消</span></span><br><span class="line">netsh winhttp reset proxy</span><br></pre></td></tr></table></figure><h4 id="为-Git-设置代理"><a href="#为-Git-设置代理" class="headerlink" title="为 Git 设置代理"></a>为 Git 设置代理</h4><p>众所周知，<code>git clone</code> 有两种方式，代理设置方式也不一样：</p><h5 id="Clone-with-HTTPS"><a href="#Clone-with-HTTPS" class="headerlink" title="Clone with HTTPS"></a>Clone with HTTPS</h5><p>设置代理：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果是 socks5 代理的话</span></span><br><span class="line">git config --global http.proxy socks5h://127.0.0.1:1080</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">http 代理仅需将 socks5h 改为 http</span></span><br><span class="line">git config --global http.proxy http://127.0.0.1:1080</span><br></pre></td></tr></table></figure><p>取消代理：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br></pre></td></tr></table></figure><p>也可以仅为 GitHub 设置代理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.https://github.com.proxy socks5h://127.0.0.1:1080</span><br></pre></td></tr></table></figure><p>socks5h 和 socks5 的区别：</p><blockquote><p>In a proxy string, socks5h:&#x2F;&#x2F; and socks4a:&#x2F;&#x2F; mean that the hostname is<br>resolved by the SOCKS server. socks5:&#x2F;&#x2F; and socks4:&#x2F;&#x2F; mean that the<br>hostname is resolved locally. socks4a:&#x2F;&#x2F; means to use SOCKS4a, which is<br>an extension of SOCKS4.</p></blockquote><p>来源：<a href="https://github.com/urllib3/urllib3/issues/1035">Differentiate socks5h from socks5 and socks4a from socks4 when handling proxy string</a></p><h5 id="Clone-with-SSH"><a href="#Clone-with-SSH" class="headerlink" title="Clone with SSH"></a>Clone with SSH</h5><p>需要修改 <code>~/.ssh/config</code> 文件</p><p>如果仅为 GitHub 设置代理，且使用 socks5 代理的话</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">    User git</span><br><span class="line">    ProxyCommand connect -S 127.0.0.1:1080 %h %p</span><br></pre></td></tr></table></figure><p>这里 <code>-S</code> 表示使用 socks5 代理，如果是 http 代理则为 <code>-H</code>。connect 工具 <a href="https://gitforwindows.org/">Git for Windows</a> 自带。</p><p>我自己的话，则是设置成这样：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># Reference: https://bitbucket.org/gotoh/connect/wiki/Home</span><br><span class="line"></span><br><span class="line">Host github.com</span><br><span class="line">    User git</span><br><span class="line">    Hostname github.com</span><br><span class="line">    Port 22</span><br><span class="line">    ProxyCommand connect -S 127.0.0.1:1080 -a none %h %p</span><br><span class="line"></span><br><span class="line">Host ssh.github.com</span><br><span class="line">    User git</span><br><span class="line">    Hostname ssh.github.com</span><br><span class="line">    Port 443</span><br><span class="line">    ProxyCommand connect -S 127.0.0.1:1080 -a none %h %p</span><br><span class="line"></span><br><span class="line">Host *</span><br><span class="line">    IdentityFile &quot;C:\Users\Zheng\.ssh\id_rsa&quot;</span><br><span class="line">    ServerAliveInterval 30</span><br><span class="line">    TCPKeepAlive yes</span><br></pre></td></tr></table></figure><p>来源：<a href="https://gist.github.com/laispace/666dd7b27e9116faece6">laispace&#x2F;git 设置和取消代理</a></p><h3 id="公共-DNS"><a href="#公共-DNS" class="headerlink" title="公共 DNS"></a>公共 DNS</h3><h4 id="国内"><a href="#国内" class="headerlink" title="国内"></a>国内</h4><table><thead><tr><th></th><th>阿里云公共 DNS</th><th>腾讯 Public DNS</th><th>114 DNS</th><th>百度公共 DNS</th><th>360 公共 DNS</th><th>红鱼 DNS</th></tr></thead><tbody><tr><td>IPv4</td><td>223.5.5.5 <br /> 223.6.6.6</td><td>119.29.29.29</td><td>114.114.114.114 <br /> 114.114.115.115</td><td>180.76.76.76</td><td></td><td></td></tr><tr><td>IPv6</td><td>2400:3200::1 <br /> 2400:3200:baba::1</td><td></td><td></td><td>2400:da00::6666</td><td></td><td></td></tr><tr><td>DoT</td><td>IP <br /> dns.alidns.com</td><td>dns.pub <br /> doh.pub</td><td></td><td></td><td>dot.360.cn</td><td>rubyfish.cn</td></tr><tr><td>DoH</td><td><a href="https://www.alidns.com/faqs/#dns-safe">阿里公共 DNS 安全传输服务</a></td><td><a href="https://cloud.tencent.com/developer/article/1668074">DoH 和 DoT 开始公测</a></td><td></td><td></td><td><a href="https://dns.360.cn/dnsPublic.html">DoH 接入方法</a></td><td><a href="https://www.rubyfish.cn/dns/solutions/">面向普通消费者</a></td></tr><tr><td>备注</td><td></td><td>首页和帮助文档中都只给出了这一个 IP</td><td>其余几组暂时不管</td><td></td><td>传统 DNS 接入的先不管了</td><td></td></tr></tbody></table><h4 id="国外"><a href="#国外" class="headerlink" title="国外"></a>国外</h4><table><thead><tr><th></th><th>Google Public DNS</th><th>OpenDNS</th><th>Cloudflare DNS</th><th>DNS.SB</th></tr></thead><tbody><tr><td>IPv4</td><td>8.8.8.8 <br /> 8.8.4.4</td><td>208.67.222.222 <br /> 208.67.220.220</td><td>1.1.1.1 <br /> 1.0.0.1</td><td>185.222.222.222 <br /> 185.184.222.222</td></tr><tr><td>IPv6</td><td>2001:4860:4860::8888 <br /> 2001:4860:4860::8844</td><td>2620:119:35::35 <br /> 2620:119:53::53</td><td>2606:4700:4700::1111 <br /> 2606:4700:4700::1001</td><td>2a09:: <br /> 2a09::1</td></tr><tr><td>DoT</td><td>dns.google</td><td></td><td>IP <br /> one.one.one.one <br /> 1dot1dot1dot1.cloudflare-dns.com</td><td>IP <br /> dns.sb</td></tr><tr><td>DoH</td><td><a href="https://developers.google.com/speed/public-dns/docs/doh">DNS-over-HTTPS (DoH)</a></td><td><a href="https://support.opendns.com/hc/en-us/articles/360038086532-Using-DNS-over-HTTPS-DoH-with-OpenDNS">Using DNS over HTTPS (DoH) with OpenDNS</a></td><td><a href="https://developers.cloudflare.com/1.1.1.1/dns-over-https/request-structure/">Making Requests</a></td><td><a href="https://dns.sb/doh/">DNS OVER HTTPS</a></td></tr><tr><td>备注</td><td></td><td></td><td><a href="https://www.cloudflare.com/learning/dns/dns-over-tls/">DNS over TLS vs. DNS over HTTPS | Secure DNS</a></td><td><a href="https://dns.sb/">主页</a></td></tr></tbody></table><h4 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h4><ul><li><a href="https://blog.skk.moe/post/which-public-dns-to-use">如何选择适合的公共 DNS？[2020]</a></li><li><a href="https://sspai.com/post/56783">想要上网体验有保障，如何设置一个更安全的 DNS？</a></li></ul><h3 id="pypi"><a href="#pypi" class="headerlink" title="pypi"></a>pypi</h3><table><thead><tr><th align="center">镜像站</th><th align="center">帮助页</th><th align="center">是否在用</th></tr></thead><tbody><tr><td align="center">清华</td><td align="center"><a href="https://mirror.tuna.tsinghua.edu.cn/help/pypi/">pypi 镜像使用帮助</a></td><td align="center">是</td></tr><tr><td align="center">阿里云</td><td align="center"><a href="https://developer.aliyun.com/mirror/pypi">使用帮助</a></td><td align="center"></td></tr><tr><td align="center">网易</td><td align="center"><a href="https://mirrors.163.com/.help/pypi.html">使用帮助</a></td><td align="center"></td></tr><tr><td align="center">腾讯</td><td align="center"><a href="https://mirrors.cloud.tencent.com/help/pypi.html">使用帮助</a></td><td align="center"></td></tr></tbody></table><h3 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h3><table><thead><tr><th align="center">镜像站</th><th align="center">帮助页</th><th align="center">是否在用</th></tr></thead><tbody><tr><td align="center">淘宝</td><td align="center"><a href="https://npm.taobao.org/">首页</a></td><td align="center">是</td></tr><tr><td align="center">腾讯</td><td align="center"><a href="https://mirrors.cloud.tencent.com/help/npm.html">使用帮助</a></td><td align="center"></td></tr></tbody></table><h3 id="Anaconda"><a href="#Anaconda" class="headerlink" title="Anaconda"></a>Anaconda</h3><table><thead><tr><th align="center">镜像站</th><th align="center">帮助页</th><th align="center">是否在用</th></tr></thead><tbody><tr><td align="center">清华</td><td align="center"><a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/">使用帮助</a></td><td align="center">是</td></tr></tbody></table><h3 id="MSYS2"><a href="#MSYS2" class="headerlink" title="MSYS2"></a>MSYS2</h3><table><thead><tr><th align="center">镜像站</th><th align="center">帮助页</th><th align="center">是否在用</th></tr></thead><tbody><tr><td align="center">清华</td><td align="center"><a href="https://mirrors.tuna.tsinghua.edu.cn/help/msys2/">使用帮助</a></td><td align="center">是</td></tr><tr><td align="center">中科大</td><td align="center"><a href="http://mirrors.ustc.edu.cn/help/msys2.html">使用帮助</a></td><td align="center"></td></tr></tbody></table><h3 id="RubyGems"><a href="#RubyGems" class="headerlink" title="RubyGems"></a>RubyGems</h3><table><thead><tr><th align="center">镜像站</th><th align="center">帮助页</th><th align="center">是否在用</th></tr></thead><tbody><tr><td align="center">Ruby China 社区</td><td align="center"><a href="https://gems.ruby-china.com/">首页</a></td><td align="center">是</td></tr><tr><td align="center">清华</td><td align="center"><a href="https://mirrors.tuna.tsinghua.edu.cn/help/rubygems/">使用帮助</a></td><td align="center"></td></tr><tr><td align="center">阿里云</td><td align="center"><a href="https://developer.aliyun.com/mirror/rubygems">使用帮助</a></td><td align="center"></td></tr><tr><td align="center">中科大</td><td align="center"><a href="http://mirrors.ustc.edu.cn/help/rubygems.html">使用帮助</a></td><td align="center"></td></tr></tbody></table><h3 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h3><table><thead><tr><th align="center">镜像站</th><th align="center">帮助页</th><th align="center">是否在用</th></tr></thead><tbody><tr><td align="center">Goproxy China</td><td align="center"><a href="https://goproxy.cn/">首页</a></td><td align="center">是</td></tr><tr><td align="center">GOPROXY.IO</td><td align="center"><a href="https://goproxy.io/">首页</a></td><td align="center"></td></tr><tr><td align="center">腾讯</td><td align="center"><a href="https://mirrors.cloud.tencent.com/help/go.html">使用帮助</a></td><td align="center"></td></tr><tr><td align="center">阿里云</td><td align="center"><a href="https://developer.aliyun.com/mirror/goproxy">使用帮助</a></td><td align="center"></td></tr></tbody></table><h3 id="CTAN"><a href="#CTAN" class="headerlink" title="CTAN"></a>CTAN</h3><table><thead><tr><th align="center">镜像站</th><th align="center">帮助页</th><th align="center">是否在用</th></tr></thead><tbody><tr><td align="center">清华</td><td align="center"><a href="https://mirror.tuna.tsinghua.edu.cn/help/CTAN/">使用帮助</a></td><td align="center">是</td></tr></tbody></table><h3 id="Docker-CE"><a href="#Docker-CE" class="headerlink" title="Docker CE"></a>Docker CE</h3><table><thead><tr><th align="center">镜像站</th><th align="center">帮助页</th><th align="center">是否在用</th></tr></thead><tbody><tr><td align="center">清华</td><td align="center"><a href="https://mirror.tuna.tsinghua.edu.cn/help/docker-ce/">使用帮助</a></td><td align="center">是</td></tr><tr><td align="center">中科大</td><td align="center"><a href="http://mirrors.ustc.edu.cn/help/docker-ce.html">使用帮助</a></td><td align="center"></td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;一些常用的代理设置方式，公共 DNS 记录以及软件镜像源，记录备用。&lt;/p&gt;</summary>
    
    
    
    
    <category term="环境配置" scheme="https://zs.fyi/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>重头再来</title>
    <link href="https://zs.fyi/archives/start-over.html"/>
    <id>https://zs.fyi/archives/start-over.html</id>
    <published>2019-12-27T10:12:05.000Z</published>
    <updated>2023-07-20T13:17:43.751Z</updated>
    
    <content type="html"><![CDATA[<p>一次在玩的时候，我把 <code>rm -rf ./etc</code> 敲成了 <code>rm -rf /etc</code> 然后把服务器的配置文件全给误删了。现在想来，其实当时还是有补救的办法的，因为我之前把 <code>/etc</code> 目录 zip 到 root 用户的家目录了，只要当时我不 <code>exit ssh</code> 把文件恢复回去就没事，然而……</p><span id="more"></span><p>不记得这是第几次「搬家」了，从之前的另一个域名到这个 top 域名，从 WordPress 到 Typecho 再到 WordPress。这次，我决定使用 Hugo&#x2F;Hexo + GitHub&#x2F;Coding 来搭建静态博客，主动注销网站备案也是不可避免的了。</p><p>说来惭愧，虽然写了几十篇博文，但我感觉似乎并没有输出多少有价值的东西，一是积淀太少，二是表达与写作能力还需提高。另外，我一直有通过 Google Search Console 查看大家都是通过哪些关键词进入本站的，发现最多的是 <code>SSR</code>、<code>IPv6</code>、<code>Proxifier</code>、<code>校园网</code>、<code>免流</code> 之类的，我觉得没多大意思也并非我写博客的本意。</p><p>我都写过什么呢？</p><p>一篇介绍如何通过 SSR 和 IPv6 上网来规避高昂且吝啬的校园网。</p><p>一篇「反某网盘限速的 N 种方法」，提到了 BaiduPCS-Go、客户端破解、PanDownload、Proxyee-down、油猴脚本、爱奇艺万能播放器、速盘这些工具和方法。</p><p>一篇腾讯大王卡与 B 站 33 卡的对比，现在来看也肯定过时了，毕竟目前互联网卡五花八门。</p><p>一篇介绍双拼输入的，我觉得非常值得学习和掌握，正在使用的是<a href="https://www.flypy.com/">小鹤双拼</a>方案。</p><p>几篇介绍电脑和手机使用习惯、密码安全及 Windows 常用软件等，这个也是被写烂了的话题。</p><p>几篇 Python 官方文档的翻译，后来弃坑了，原因是现在已经有社区在做了。</p><p>转载和翻译了几篇我认为还不错的文章。</p><p>几篇年度流水账，讲我这一年买了些啥、花了多少钱在哪些订阅服务上、我认为值不值，云云。</p><p>然后是 Windows 10 使用中我碰到过的一些问题以及相应的解决办法，之前全部整理出来放在语雀上了，详见：<a href="https://www.yuque.com/shuaizheng/blog/windows">专治 Windows 10 各种不服</a></p><p>最后是一些丢掉了也不觉得可惜的日常碎碎念。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;一次在玩的时候，我把 &lt;code&gt;rm -rf ./etc&lt;/code&gt; 敲成了 &lt;code&gt;rm -rf /etc&lt;/code&gt; 然后把服务器的配置文件全给误删了。现在想来，其实当时还是有补救的办法的，因为我之前把 &lt;code&gt;/etc&lt;/code&gt; 目录 zip 到 root 用户的家目录了，只要当时我不 &lt;code&gt;exit ssh&lt;/code&gt; 把文件恢复回去就没事，然而……&lt;/p&gt;</summary>
    
    
    
    
    <category term="日常" scheme="https://zs.fyi/tags/%E6%97%A5%E5%B8%B8/"/>
    
    <category term="博客" scheme="https://zs.fyi/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
