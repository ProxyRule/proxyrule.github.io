<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>知识参考</title>
  
  
  <link href="https://zs.fyi/atom.xml" rel="self"/>
  
  <link href="https://zs.fyi/"/>
  <updated>2023-09-10T05:31:45.975Z</updated>
  <id>https://zs.fyi/</id>
  
  <author>
    <name>ZS.FYI</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker 搭建 Cloudflare Tunnel</title>
    <link href="https://zs.fyi/archives/docker-cloudflared.html"/>
    <id>https://zs.fyi/archives/docker-cloudflared.html</id>
    <published>2023-09-07T15:25:10.000Z</published>
    <updated>2023-09-10T05:31:45.975Z</updated>
    
    <content type="html"><![CDATA[<p>Cloudflare Tunnel 除了最基本的内网穿透（隧道）功能外，还带有一套身份认证功能用于保护应用安全，且非常简单易用。</p><span id="more"></span><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.9&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tunnel:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">cloudflared_tunnel</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">cloudflare/cloudflared</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">tunnel</span> <span class="string">--no-autoupdate</span> <span class="string">run</span> <span class="string">--token</span> <span class="string">&lt;token&gt;</span> <span class="comment"># 将 &lt;token&gt; 替换为你的</span></span><br></pre></td></tr></table></figure><p><a href="https://www.cloudflare.com/products/tunnel/">产品介绍</a> 和 <a href="https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/">使用文档</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Cloudflare Tunnel 除了最基本的内网穿透（隧道）功能外，还带有一套身份认证功能用于保护应用安全，且非常简单易用。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Cloudflare" scheme="https://zs.fyi/tags/Cloudflare/"/>
    
    <category term="Docker" scheme="https://zs.fyi/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker 搭建 Portainer</title>
    <link href="https://zs.fyi/archives/docker-portainer.html"/>
    <id>https://zs.fyi/archives/docker-portainer.html</id>
    <published>2023-09-06T05:03:27.000Z</published>
    <updated>2023-09-10T05:31:45.975Z</updated>
    
    <content type="html"><![CDATA[<p>Portainer 是一个用户友好的图形化界面工具，用于轻松管理 Docker 容器和容器编排，无需深入命令行操作。</p><span id="more"></span><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">portainer-ee:</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&#x27;8000:8000&#x27;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&#x27;9443:9443&#x27;</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">portainer</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&#x27;/var/run/docker.sock:/var/run/docker.sock&#x27;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&#x27;portainer_data:/data&#x27;</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">&#x27;portainer/portainer-ee:latest&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">    <span class="attr">portainer_data:</span></span><br></pre></td></tr></table></figure><p><a href="https://www.portainer.io/">Portainer 官方网站</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Portainer 是一个用户友好的图形化界面工具，用于轻松管理 Docker 容器和容器编排，无需深入命令行操作。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Docker" scheme="https://zs.fyi/tags/Docker/"/>
    
    <category term="Portainer" scheme="https://zs.fyi/tags/Portainer/"/>
    
  </entry>
  
  <entry>
    <title>Docker 搭建 Nginx Proxy Manager</title>
    <link href="https://zs.fyi/archives/docker-npm.html"/>
    <id>https://zs.fyi/archives/docker-npm.html</id>
    <published>2023-09-04T01:07:32.000Z</published>
    <updated>2023-09-10T05:31:45.975Z</updated>
    
    <content type="html"><![CDATA[<p>Nginx Proxy Manager 是一个非常方便的 Nginx 代理管理工具。</p><span id="more"></span><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">app:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">npm</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&#x27;jc21/nginx-proxy-manager:latest&#x27;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="comment"># These ports are in format &lt;host-port&gt;:&lt;container-port&gt;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;80:80&#x27;</span> <span class="comment"># Public HTTP Port</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;443:443&#x27;</span> <span class="comment"># Public HTTPS Port</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;81:81&#x27;</span> <span class="comment"># Admin Web Port</span></span><br><span class="line">      <span class="comment"># Add any other Stream port you want to expose</span></span><br><span class="line">      <span class="comment"># - &#x27;21:21&#x27; # FTP</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Uncomment the next line if you uncomment anything in the section</span></span><br><span class="line">    <span class="comment"># environment:</span></span><br><span class="line">      <span class="comment"># Uncomment this if you want to change the location of</span></span><br><span class="line">      <span class="comment"># the SQLite DB file within the container</span></span><br><span class="line">      <span class="comment"># DB_SQLITE_FILE: &quot;/data/database.sqlite&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Uncomment this if IPv6 is not enabled on your host</span></span><br><span class="line">      <span class="comment"># DISABLE_IPV6: &#x27;true&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./letsencrypt:/etc/letsencrypt</span></span><br></pre></td></tr></table></figure><p><a href="https://nginxproxymanager.com/">Nginx Proxy Manager 官网</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Nginx Proxy Manager 是一个非常方便的 Nginx 代理管理工具。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Docker" scheme="https://zs.fyi/tags/Docker/"/>
    
    <category term="Nginx Proxy Manager" scheme="https://zs.fyi/tags/Nginx-Proxy-Manager/"/>
    
  </entry>
  
  <entry>
    <title>Docker 搭建 RSSHub</title>
    <link href="https://zs.fyi/archives/docker-rsshub.html"/>
    <id>https://zs.fyi/archives/docker-rsshub.html</id>
    <published>2023-09-03T00:35:37.000Z</published>
    <updated>2023-09-10T05:31:45.975Z</updated>
    
    <content type="html"><![CDATA[<p>RSSHub 是一个开源、简单易用、易于扩展的 RSS 生成器，可以给任何奇奇怪怪的内容生成 RSS 订阅源。</p><span id="more"></span><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">rsshub:</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">rsshub_app</span></span><br><span class="line">        <span class="comment"># two ways to enable puppeteer:</span></span><br><span class="line">        <span class="comment"># * comment out marked lines, then use this image instead: diygod/rsshub:chromium-bundled</span></span><br><span class="line">        <span class="comment"># * (consumes more disk space and memory) leave everything unchanged</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">diygod/rsshub</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&#x27;1200:1200&#x27;</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="attr">NODE_ENV:</span> <span class="string">production</span></span><br><span class="line">            <span class="attr">CACHE_TYPE:</span> <span class="string">redis</span></span><br><span class="line">            <span class="attr">REDIS_URL:</span> <span class="string">&#x27;redis://redis:6379/&#x27;</span></span><br><span class="line">            <span class="attr">PUPPETEER_WS_ENDPOINT:</span> <span class="string">&#x27;ws://browserless:3000&#x27;</span>  <span class="comment"># marked</span></span><br><span class="line">        <span class="attr">depends_on:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">browserless</span>  <span class="comment"># marked</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">browserless:</span>  <span class="comment"># marked</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">rsshub_browserless</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">browserless/chrome</span>  <span class="comment"># marked</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span>  <span class="comment"># marked</span></span><br><span class="line">        <span class="attr">ulimits:</span>  <span class="comment"># marked</span></span><br><span class="line">          <span class="attr">core:</span>  <span class="comment"># marked</span></span><br><span class="line">            <span class="attr">hard:</span> <span class="number">0</span>  <span class="comment"># marked</span></span><br><span class="line">            <span class="attr">soft:</span> <span class="number">0</span>  <span class="comment"># marked</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">rsshub_redis</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">redis:alpine</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">redis_data:/data</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">    <span class="attr">redis_data:</span></span><br></pre></td></tr></table></figure><p><a href="https://docs.rsshub.app/">RSSHub 官方网站</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;RSSHub 是一个开源、简单易用、易于扩展的 RSS 生成器，可以给任何奇奇怪怪的内容生成 RSS 订阅源。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Docker" scheme="https://zs.fyi/tags/Docker/"/>
    
    <category term="RSSHub" scheme="https://zs.fyi/tags/RSSHub/"/>
    
  </entry>
  
  <entry>
    <title>Docker 搭建 subconverter</title>
    <link href="https://zs.fyi/archives/docker-subconverter.html"/>
    <id>https://zs.fyi/archives/docker-subconverter.html</id>
    <published>2023-09-02T07:25:07.000Z</published>
    <updated>2023-09-10T05:31:45.975Z</updated>
    
    <content type="html"><![CDATA[<p>subconverter 是在各种订阅格式之间进行转换的实用程序。</p><span id="more"></span><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">subconverter:</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&#x27;./data:/opt/subconverter/data&#x27;</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&#x27;25500:25500&#x27;</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">subconverter</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">MANAGED_PREFIX=https://sub.example.com</span> <span class="comment"># 更改为你的域名</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">API_MODE=true</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">&#x27;tindy2013/subconverter:latest&#x27;</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/tindy2013/subconverter/issues/321">Docker 内 MANAGED_PREFIX 不生效</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;subconverter 是在各种订阅格式之间进行转换的实用程序。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Docker" scheme="https://zs.fyi/tags/Docker/"/>
    
    <category term="subconverter" scheme="https://zs.fyi/tags/subconverter/"/>
    
  </entry>
  
  <entry>
    <title>廉价机场众生相</title>
    <link href="https://zs.fyi/archives/cheap-proxy-providers.html"/>
    <id>https://zs.fyi/archives/cheap-proxy-providers.html</id>
    <published>2023-08-19T01:32:29.000Z</published>
    <updated>2023-09-10T05:31:45.975Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间老是在论坛上看到相关信息，就查了一下，找到了这篇<a href="https://aijichang.com/6379/">机场图鉴</a>。我之前并没有用过，甚至也没听过，更没想过能把价格压到这种程度。</p><span id="more"></span><p>全部（除了“免费机场”和已经无法访问的“两角五”）注册了一遍并购买了其中两家，有以下几点发现：</p><ul><li>后台面板用的基本上都是一样的，绝大部分需要注册后才能知道套餐信息</li><li>基本都是直连代理，无国内中转，意味着某些时期可能会不可用，毕竟价格在这</li><li>能做到这么低的价格，猜测都是滥用的学生和新注册用户权益，机器用完即抛</li><li>机场跑路风险高，当然这不意味着我在用的那些所谓“高端”机场就不会跑路，最好按月购买</li><li>隐私和信息安全风险高，有可能的话将几家串成代理链或套一层 WARP，其实对于所有机场都应该这样</li></ul><p>我个人在用的包括 EFCloud、一元机场、低价机场、性价比机场和赔钱机场（按流量）</p><h3 id="EFCloud"><a href="#EFCloud" class="headerlink" title="EFCloud"></a>EFCloud</h3><p><a href="https://link.zs.fyi/efcloud">注册</a>需验证邮箱，不支持匿名邮箱。</p><p>默认佣金比例 25%</p><p>费用上从每月 1 块钱 100G 流量到 10 块钱 3072G 流量不等。提供按流量付费套餐。</p><h3 id="一元机场"><a href="#一元机场" class="headerlink" title="一元机场"></a>一元机场</h3><p><a href="https://link.zs.fyi/yyjc">注册</a>需验证邮箱，支持 Proton 匿名邮箱。</p><p>默认佣金比例 60%</p><p>套餐上可选每年 11 元且每月 100G 流量，或两年付 19 元。另外，还有按月付费套餐 4 元 1000G 和 6 元 3000G</p><h3 id="三分机场"><a href="#三分机场" class="headerlink" title="三分机场"></a>三分机场</h3><p><a href="https://link.zs.fyi/sfjc">注册</a>需验证邮箱，不支持匿名邮箱。</p><p>默认佣金比例 65%</p><p>提供年付 9.5 元每月 200G 流量和月付 5 元每月 5000G 流量套餐。此外，还可 18 元一次性购买 1TB 流量。</p><h3 id="两元店"><a href="#两元店" class="headerlink" title="两元店"></a>两元店</h3><p><a href="https://link.zs.fyi/lyd">注册</a>无需验证邮箱，可使用虚假邮箱。</p><p>默认佣金比例 30%</p><p>只有按周期付费套餐，7 元季付每月 1024G 流量，以及月付 6 元 3072G 流量等。</p><h3 id="五毛机场"><a href="#五毛机场" class="headerlink" title="五毛机场"></a>五毛机场</h3><p>该机场已于 2023 年 5 月 24 日前跑路</p><p>注册无需验证邮箱，可使用虚假邮箱。</p><p>默认佣金比例 10%</p><p>提供的套餐从价格上来说其实不能算廉价了，月付 10 元至 50 元，每月流量从 120G 到 520G 不等。也可一次性购买流量。</p><h3 id="低价机场"><a href="#低价机场" class="headerlink" title="低价机场"></a>低价机场</h3><p><a href="https://link.zs.fyi/djjc">注册</a>需验证邮箱，支持 Proton 匿名邮箱。</p><p>默认佣金比例 70%</p><p>套餐只有两款，月付 1.5 元 500G 流量和月付 5 元 5000G 流量。</p><h3 id="性价比机场"><a href="#性价比机场" class="headerlink" title="性价比机场"></a>性价比机场</h3><p><a href="https://link.zs.fyi/xjbjc">注册</a>需验证邮箱，不支持匿名邮箱。</p><p>默认佣金比例 20%</p><p>提供的套餐五花八门，最低月付 1 元 100G 流量，最高月付 20 元 4000G 流量。还提供 VIP 套餐（国内中转）和一次性购买流量套餐。</p><h3 id="翻墙机场"><a href="#翻墙机场" class="headerlink" title="翻墙机场"></a>翻墙机场</h3><p><a href="https://link.zs.fyi/fqjc">注册</a>需验证邮箱，不支持匿名邮箱。</p><p>默认佣金比例 10%</p><p>最低月费 4 元 1T 流量，按年付则是 40 元。最高月付 8 元 4T 流量，年费 80 元。</p><h3 id="赔钱机场"><a href="#赔钱机场" class="headerlink" title="赔钱机场"></a>赔钱机场</h3><p><a href="https://link.zs.fyi/pqjc">注册</a>无需验证邮箱，可使用虚假邮箱。</p><p>默认佣金比例 75%</p><p>套餐更夸张，或许是名字由来吧，年付 7 元每月 1T 流量。其他还有月付 4 元每月 5T 流量以及一次性流量套餐等。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;前段时间老是在论坛上看到相关信息，就查了一下，找到了这篇&lt;a href=&quot;https://aijichang.com/6379/&quot;&gt;机场图鉴&lt;/a&gt;。我之前并没有用过，甚至也没听过，更没想过能把价格压到这种程度。&lt;/p&gt;</summary>
    
    
    
    
    <category term="代理" scheme="https://zs.fyi/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>机场订阅聚合与转换</title>
    <link href="https://zs.fyi/archives/proxy-aggregation-and-conversion.html"/>
    <id>https://zs.fyi/archives/proxy-aggregation-and-conversion.html</id>
    <published>2023-08-19T01:24:03.000Z</published>
    <updated>2023-09-10T05:31:45.975Z</updated>
    
    <content type="html"><![CDATA[<p>主要用到的工具是<a href="https://fcnext.console.aliyun.com/cn-hongkong/services">阿里云函数计算</a>和 <a href="https://github.com/tindy2013/subconverter">subconverter</a>，前者用于机场订阅聚合，后者用于转换订阅。参考这篇<a href="https://www.ohyee.cc/post/note_lambda_v2ray_clash">博客</a>和 subconverter 文档写成。</p><span id="more"></span><h3 id="订阅聚合"><a href="#订阅聚合" class="headerlink" title="订阅聚合"></a>订阅聚合</h3><p>进入函数计算后台，先切换到中国香港集群。在“服务及函数”中创建服务，填写名称，如 proxy，其他保持默认即可。</p><p>在刚创建的服务中新建函数，选择“使用内置运行时创建”，函数名称设置为 subscribe。</p><p>确保选中“处理 HTTP 请求”，然后在下方“高级配置”中将“实例并发度”设置为 100，“执行超时时间”设置为推荐的 600。</p><p>在“环境变量”中添加 <code>URL</code> 变量，值为订阅链接，有多个链接的话用<code>|</code>分隔。再添加一个 <code>TOKEN</code> 变量，值的格式为 <code>&lt;token_name&gt;=&lt;token&gt;</code>，同样以 <code>|</code> 分隔。上面博客中有相关设置截图。</p><p>完成后，点击“创建”会进入代码编辑页面，用的是 VS Code Server。调出终端，执行 <code>npm install axios</code>。修改 <code>index.js</code> 为以下代码，记得点击部署函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios&#x27;</span>);</span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">timeout</span> = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">URLS</span> = (process.<span class="property">env</span>.<span class="property">URL</span> || <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  .<span class="title function_">split</span>(<span class="string">&#x27;|&#x27;</span>)</span><br><span class="line">  .<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">length</span> &gt; <span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">TOKENS</span> = <span class="title class_">Object</span>.<span class="title function_">assign</span>(</span><br><span class="line">  &#123;&#125;,</span><br><span class="line">  ...(process.<span class="property">env</span>.<span class="property">TOKEN</span> || <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    .<span class="title function_">split</span>(<span class="string">&#x27;|&#x27;</span>)</span><br><span class="line">    .<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">length</span> &gt; <span class="number">0</span>)</span><br><span class="line">    .<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="title function_">indexOf</span>(<span class="string">&#x27;=&#x27;</span>) !== -<span class="number">1</span>)</span><br><span class="line">    .<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>))</span><br><span class="line">    .<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> (&#123; [item[<span class="number">1</span>]]: item[<span class="number">0</span>] &#125;))</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">TESTSUBSCRIBE</span>=<span class="string">&#x27;dm1lc3M6Ly9ldzBLSUNBaWRpSTZJQ0l5SWl3TkNpQWdJbkJ6SWpvZ0l1YTFpK2l2bFNJc0RRb2dJQ0poWkdRaU9pQWlNVEkzTGpBdU1DNHhJaXdOQ2lBZ0luQnZjblFpT2lBaU1USXpORFVpTEEwS0lDQWlhV1FpT2lBaU16QXdaRGN6T1RZdE1tUXlPQzAwWmpKaUxUaG1PV1l0TXpjMU5UQTVZbVZpTVROaElpd05DaUFnSW1GcFpDSTZJQ0l3SWl3TkNpQWdJbk5qZVNJNklDSmhkWFJ2SWl3TkNpQWdJbTVsZENJNklDSjBZM0FpTEEwS0lDQWlkSGx3WlNJNklDSnViMjVsSWl3TkNpQWdJbWh2YzNRaU9pQWlJaXdOQ2lBZ0luQmhkR2dpT2lBaUlpd05DaUFnSW5Sc2N5STZJQ0lpTEEwS0lDQWljMjVwSWpvZ0lpSU5DbjA9DQo=&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fromBase64</span> = (<span class="params">s</span>) =&gt; <span class="title class_">Buffer</span>.<span class="title function_">from</span>(s, <span class="string">&#x27;base64&#x27;</span>).<span class="title function_">toString</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">toBase64</span> = (<span class="params">s</span>) =&gt; <span class="title class_">Buffer</span>.<span class="title function_">from</span>(s).<span class="title function_">toString</span>(<span class="string">&#x27;base64&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">removePrefix</span> = (<span class="params">s, p</span>) =&gt; s.<span class="title function_">startsWith</span>(p) ? s.<span class="title function_">slice</span>(p.<span class="property">length</span>) : s;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">get</span> = (<span class="params">url, resolve, reject</span>) =&gt;</span><br><span class="line">  axios</span><br><span class="line">    .<span class="title function_">get</span>(url)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">resp</span>) =&gt;</span> resp.<span class="property">data</span>)</span><br><span class="line">    .<span class="title function_">then</span>(resolve)</span><br><span class="line">    .<span class="title function_">catch</span>(reject);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">toBase64</span>(</span><br><span class="line">      (</span><br><span class="line">        <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(</span><br><span class="line">          <span class="variable constant_">URLS</span>.<span class="title function_">map</span>(</span><br><span class="line">            <span class="function">(<span class="params">url</span>) =&gt;</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="title function_">get</span>(url, resolve, reject))</span><br><span class="line">          )</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">        .<span class="title function_">map</span>(<span class="function">(<span class="params">encoded</span>) =&gt;</span></span><br><span class="line">          <span class="title function_">fromBase64</span>(encoded)</span><br><span class="line">            .<span class="title function_">split</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            .<span class="title function_">filter</span>(<span class="function">(<span class="params">line</span>) =&gt;</span> line.<span class="property">length</span> &gt; <span class="number">0</span>)</span><br><span class="line">        )</span><br><span class="line">        .<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> pre.<span class="title function_">concat</span>(cur))</span><br><span class="line">        .<span class="title function_">join</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    );</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">return</span> e.<span class="title function_">toString</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">handler</span> = <span class="keyword">async</span> (req, resp, context) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">path</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">removePrefix</span>(req.<span class="property">path</span>, <span class="string">&quot;/subscribe&quot;</span>) === <span class="string">&#x27;/test&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">clientIP</span>);</span><br><span class="line">    resp.<span class="title function_">send</span>(<span class="variable constant_">TESTSUBSCRIBE</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> token = req.<span class="property">queries</span>[<span class="string">&#x27;token&#x27;</span>];</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">URLS</span>, <span class="variable constant_">TOKENS</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">clientIP</span>, token, <span class="variable constant_">TOKENS</span>[token]);</span><br><span class="line">  <span class="keyword">const</span> res = !!<span class="variable constant_">TOKENS</span>[token] ? <span class="keyword">await</span> <span class="title function_">getData</span>() : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  resp.<span class="title function_">send</span>(res);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h3><p>回到函数计算主管理界面，在“域名管理”中添加自定义域名。设置好域名解析后，修改路由配置为 <code>/subscribe</code>，其他栏下拉进行相应选择。完成后，再照此添加一条路由 <code>/subscribe/*</code>。你也可以为域名申请并启用证书，最后点击创建即可。</p><p>绑定域名后，可通过以下形式调用：</p><ul><li><code>https://fc.example.com/subscribe/test</code></li><li><code>https://fc.example.com/subscribe?token=&lt;token&gt;</code></li></ul><p>前者返回测试订阅，方便调试；后者返回打包后的节点信息。</p><h3 id="搭建-subconverter"><a href="#搭建-subconverter" class="headerlink" title="搭建 subconverter"></a>搭建 subconverter</h3><p>那篇博客中 subconverter 部分我试过，经常报错，也懒得去查阿里云的文档。干脆，直接用 <a href="https://github.com/tindy2013/subconverter/blob/master/README-docker.md">Docker</a> 搭建算了。你可以通过 <a href="https://www.composerize.com/">Composerize</a> 网站，将 Docker 命令转换成 Docker Compose 更方便些。</p><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><p>根据<a href="https://github.com/tindy2013/subconverter/blob/master/README-cn.md">相关文档</a>，调用地址中的 <code>url</code> 参数和远程引用的 <code>config</code> 文件链接，都必须经过 <a href="https://www.urlencoder.org/">URL Encode</a> 处理。以下面为例进行简单说明。</p><p><code>https://&lt;your_subconverter_server&gt;/sub?target=clash&amp;new_name=true&amp;url=&lt;your_subscription_link&gt;&amp;filename=&lt;filename&gt;&amp;interval=21600&amp;insert=false&amp;config=https%3A%2F%2Fraw.githubusercontent.com%2FFDUZS%2Fsubconverter-config%2Fmain%2Fconfig.ini</code></p><ul><li><code>&lt;your_subconverter_server&gt;</code> 为上面搭建的 subconverter 后端，如果用 IP 访问或无证书，则为 <code>http</code></li><li><code>url</code> 为上面订阅聚合链接，记得带 token 参数并 <a href="https://www.urlencoder.org/">URL Encode</a> 处理</li><li><code>filename</code> 是在 <a href="https://docs.cfw.lbyczf.com/">Clash for Windows</a> 等软件中导入后显示的名字</li><li><code>interval</code> 是在 <a href="https://docs.cfw.lbyczf.com/">Clash for Windows</a> 等软件中导入后自动更新周期，单位为秒</li><li><code>config</code> 即外部配置文件，需经 <a href="https://www.urlencoder.org/">URL Encode</a> 处理，可直接使用上述例子中的</li><li>其他更多参数可查询相关文档</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;主要用到的工具是&lt;a href=&quot;https://fcnext.console.aliyun.com/cn-hongkong/services&quot;&gt;阿里云函数计算&lt;/a&gt;和 &lt;a href=&quot;https://github.com/tindy2013/subconverter&quot;&gt;subconverter&lt;/a&gt;，前者用于机场订阅聚合，后者用于转换订阅。参考这篇&lt;a href=&quot;https://www.ohyee.cc/post/note_lambda_v2ray_clash&quot;&gt;博客&lt;/a&gt;和 subconverter 文档写成。&lt;/p&gt;</summary>
    
    
    
    
    <category term="代理" scheme="https://zs.fyi/tags/%E4%BB%A3%E7%90%86/"/>
    
    <category term="subconverter" scheme="https://zs.fyi/tags/subconverter/"/>
    
  </entry>
  
  <entry>
    <title>通过 WARP 为纯 IPv6 VPS 添加 IPv4 网络</title>
    <link href="https://zs.fyi/archives/add-ipv4-for-ipv6-only-vps.html"/>
    <id>https://zs.fyi/archives/add-ipv4-for-ipv6-only-vps.html</id>
    <published>2023-08-19T01:00:22.000Z</published>
    <updated>2023-09-10T05:31:45.975Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.cloudflare.com/1111-warp-better-vpn/">WARP</a> 是 Cloudflare 推出的基于 WireGuard 的 VPN</p><p>以下内容基于 Debian 10+</p><span id="more"></span><h3 id="安装-WireGuard"><a href="#安装-WireGuard" class="headerlink" title="安装 WireGuard"></a>安装 WireGuard</h3><p>准备工作，安装 <code>sudo</code> 和 <code>lsb_release</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install sudo lsb-release -y</span><br></pre></td></tr></table></figure><p>安装必要的网络工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install net-tools iproute2 openresolv dnsutils -y</span><br></pre></td></tr></table></figure><p>安装 Wire­Guard 配置工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install wireguard-tools --no-install-recommends</span><br></pre></td></tr></table></figure><p>通过 <code>uname -r</code> 查看内核版本，如果是 5.6 及以上内核则已经集成了 Wire­Guard，就不需要安装了，直接跳到下个部分。</p><p>否则，需要先添加 back­ports 源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;deb http://deb.debian.org/debian $(lsb_release -sc)-backports main&quot; | sudo tee /etc/apt/sources.list.d/backports.list</span><br><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><p>再安装 back­ports 仓库中的内核</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt -t $(lsb_release -sc)-backports install linux-image-$(dpkg --print-architecture) linux-headers-$(dpkg --print-architecture) --install-recommends -y</span><br></pre></td></tr></table></figure><p>安装完成后，再次执行 <code>uname -r</code> 确保新版内核已启用</p><h3 id="通过-wgcf-生成配置文件"><a href="#通过-wgcf-生成配置文件" class="headerlink" title="通过 wgcf 生成配置文件"></a>通过 wgcf 生成配置文件</h3><p>在安装之前，先修改 DNS 以便下面操作，将 <code>/etc/resolv.conf</code> 中的 nameserver 修改为以下</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nameserver 2a03:7900:2:0:31:3:104:161</span><br><span class="line">nameserver 2a00:1098:2b::1</span><br><span class="line">nameserver 2a01:4f8:c2c:123f::1</span><br><span class="line">nameserver 2a00:1098:2c::1</span><br></pre></td></tr></table></figure><p>安装 wgcf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL git.io/wgcf.sh | sudo bash</span><br></pre></td></tr></table></figure><p>注册 WARP 账户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wgcf register</span><br></pre></td></tr></table></figure><p>生成 Wire­Guard 配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wgcf generate</span><br></pre></td></tr></table></figure><h3 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h3><p>修改 <code>wgcf-profile.conf</code> 配置文件</p><ul><li>将 <code>engage.cloudflareclient.com:2408</code> 替换为 <code>[2606:4700:d0::a29f:c001]:2408</code></li><li>删除或注释掉 <code>AllowedIPs = ::/0</code></li><li>将 <code>DNS = 1.1.1.1</code> 修改为 <code>DNS = 2606:4700:4700::1111</code></li></ul><p>完成并保存后，将 Wire­Guard 配置文件复制到 <code>/etc/wireguard/</code> 并命名为 <code>wgcf.conf</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp wgcf-profile.conf /etc/wireguard/wgcf.conf</span><br></pre></td></tr></table></figure><p>开启网络接口（命令中的 <code>wgcf</code> 对应的是配置文件 <code>wgcf.conf</code> 的文件名前缀）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wg-quick up wgcf</span><br></pre></td></tr></table></figure><p>使用 <code>curl -4 ip.sb</code> 看看能否顺利返回 IPv4</p><p>没问题后，执行 <code>crontab -e</code> 命令，添加 <code>@reboot systemctl start wg-quick@wgcf</code> 到文件末尾设置开机自启。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://blog.cloudflare.com/1111-warp-better-vpn/&quot;&gt;WARP&lt;/a&gt; 是 Cloudflare 推出的基于 WireGuard 的 VPN&lt;/p&gt;
&lt;p&gt;以下内容基于 Debian 10+&lt;/p&gt;</summary>
    
    
    
    
    <category term="Cloudflare" scheme="https://zs.fyi/tags/Cloudflare/"/>
    
    <category term="WARP" scheme="https://zs.fyi/tags/WARP/"/>
    
    <category term="IPv6" scheme="https://zs.fyi/tags/IPv6/"/>
    
    <category term="VPS" scheme="https://zs.fyi/tags/VPS/"/>
    
  </entry>
  
  <entry>
    <title>使用 PlanetScale 和 Vercel 搭建 Umami 统计</title>
    <link href="https://zs.fyi/archives/planetscale-vercel-umami.html"/>
    <id>https://zs.fyi/archives/planetscale-vercel-umami.html</id>
    <published>2023-08-08T10:31:57.000Z</published>
    <updated>2023-09-10T05:31:45.975Z</updated>
    
    <content type="html"><![CDATA[<p>本文基本可以视作是 <a href="https://geekplux.com/">GeekPlux</a> 文章的中文翻译，插图亦来自于<a href="https://geekplux.com/posts/setup-umami">原文</a>。</p><span id="more"></span><h3 id="前置要求"><a href="#前置要求" class="headerlink" title="前置要求"></a>前置要求</h3><ul><li><a href="https://planetscale.com/">PlanetScale</a> 账号，免费版仅支持创建一个数据库</li><li><a href="https://vercel.com/">Vercel</a> 账号</li><li><a href="https://github.com/">GitHub</a> 账号</li></ul><h3 id="PlanetScale-设置"><a href="#PlanetScale-设置" class="headerlink" title="PlanetScale 设置"></a>PlanetScale 设置</h3><p>在面板创建一个数据库，命名为 umami-db</p><p><img data-src="https://img.zs.fyi/2308/planetscale.webp" alt="创建数据库" loading="lazy"></p><h3 id="GitHub-设置"><a href="#GitHub-设置" class="headerlink" title="GitHub 设置"></a>GitHub 设置</h3><p>Fork <a href="https://github.com/umami-software/umami">umami</a> 项目到自己账号，同时建议安装 GitHub 应用 <a href="https://github.com/apps/pull">Pull</a></p><h3 id="Vercel-设置"><a href="#Vercel-设置" class="headerlink" title="Vercel 设置"></a>Vercel 设置</h3><p>将 Vercel 与 GitHub 账号关联，并导入上面 fork 的项目</p><p>此时，Vercel 尝试自动部署但应该会失败，因为还没设置好数据库连接</p><h3 id="数据库关联"><a href="#数据库关联" class="headerlink" title="数据库关联"></a>数据库关联</h3><p>回到 PlanetScale 面板，点击 Integrations 并选择 Vercel，选中 umami-db 和对应的 Vercel 项目</p><p>至于框架，可能名称与下图不完全相同，选中带有 Prisma 的即可</p><p><img data-src="https://img.zs.fyi/2308/integrate.webp" alt="数据库关联" loading="lazy"></p><h3 id="Umami-设置"><a href="#Umami-设置" class="headerlink" title="Umami 设置"></a>Umami 设置</h3><p>最后，回到 Vercel 面板，点击重新部署</p><p>部署成功后，可以添加自定义域名</p><p>umami 后台默认用户名为 admin，默认密码为 umami</p><p>具体如何使用请参考 <a href="https://umami.is/docs">umami 文档</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文基本可以视作是 &lt;a href=&quot;https://geekplux.com/&quot;&gt;GeekPlux&lt;/a&gt; 文章的中文翻译，插图亦来自于&lt;a href=&quot;https://geekplux.com/posts/setup-umami&quot;&gt;原文&lt;/a&gt;。&lt;/p&gt;</summary>
    
    
    
    
    <category term="PlanetScale" scheme="https://zs.fyi/tags/PlanetScale/"/>
    
    <category term="Vercel" scheme="https://zs.fyi/tags/Vercel/"/>
    
    <category term="Umami" scheme="https://zs.fyi/tags/Umami/"/>
    
  </entry>
  
  <entry>
    <title>Backblaze B2 云存储搭配 Cloudflare</title>
    <link href="https://zs.fyi/archives/backblaze-b2-cloudflare.html"/>
    <id>https://zs.fyi/archives/backblaze-b2-cloudflare.html</id>
    <published>2023-08-08T08:04:27.000Z</published>
    <updated>2023-09-10T05:31:45.975Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍如何设置 Backblaze B2 云存储并将其接入 Cloudflare CDN，以及通过 ShareX 上传图片和文件。</p><span id="more"></span><h3 id="前置要求"><a href="#前置要求" class="headerlink" title="前置要求"></a>前置要求</h3><ul><li><a href="https://www.backblaze.com/">Backblaze</a> 账号</li><li>Cloudflare 账号</li><li>域名并将 DNS 解析托管到 Cloudflare，请以实际域名替代示例中的 example.com</li><li><a href="https://getsharex.com/">ShareX</a> 或其他类似软件已安装</li></ul><h3 id="Backblaze-设置"><a href="#Backblaze-设置" class="headerlink" title="Backblaze 设置"></a>Backblaze 设置</h3><p>创建一个存储桶，文件公开还是私密访问视需求而定。如果是用于博客图片的话，选择公开即可。其他默认。</p><p><img data-src="https://img.zs.fyi/2308/6O2l6ELCQY.png" alt="创建存储桶" loading="lazy"></p><p>上传一个文件，点击左侧的浏览文件，获取“友好 URL”</p><p><img data-src="https://img.zs.fyi/2308/4nLxvoQJfb.png" alt="友好 URL" loading="lazy"></p><p>点击刚刚创建的桶，设置桶的缓存时间为 <code>&#123;&quot;cache-control&quot;:&quot;max-age=720000&quot;&#125;</code></p><p><img data-src="https://img.zs.fyi/2308/gKaVpmPQQ2.png" alt="桶缓存时间" loading="lazy"></p><h3 id="Cloudflare-设置"><a href="#Cloudflare-设置" class="headerlink" title="Cloudflare 设置"></a>Cloudflare 设置</h3><p>一、添加一条 CNAME 解析，比如 img.example.com，目标地址即为“友好 URL”图中所示</p><p><img data-src="https://img.zs.fyi/2308/0pbNHUnjYz.png" alt="CNAME" loading="lazy"></p><p>二、添加一条页面规则，URL 为 <code>img.example.com/*</code>，SSL 选择严格，缓存级别为“缓存所有内容”，边缘缓存 TTL 为“1 个月”</p><p><img data-src="https://img.zs.fyi/2308/875SUdYNzB.png" alt="页面规则" loading="lazy"></p><p>三、添加一条转换规则 - 重写 URL</p><p>规则名称随便，比如 Remove bucket name</p><p>下方选择“主机名”“等于” <code>img.example.com</code> 即可</p><p><img data-src="https://img.zs.fyi/2308/I68OSKYLaL.png" alt="表达式" loading="lazy"></p><p>然后选择“重写到”“Dynamic 动态”，框中填</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">concat(&quot;/file/bucketName&quot;, http.request.uri.path)</span><br></pre></td></tr></table></figure><p>将 bucketName 更改为你一开始设置的桶名称</p><p><img data-src="https://img.zs.fyi/2308/POqzrOd9Kp.png" alt="重写" loading="lazy"></p><p>四、添加一条修改响应头规则</p><p>规则名称随意，比如 Remove x-bz-*</p><p>设置和上方一样的自定义筛选表达式</p><p>添加一个动态响应头，名为 <code>ETag</code>，值为</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">concat(http.response.headers[&quot;x-bz-content-sha1&quot;][0], http.response.headers[&quot;x-bz-info-src_last_modified_millis&quot;][0], http.response.headers[&quot;x-bz-file-id&quot;][0])</span><br></pre></td></tr></table></figure><p>删除如下响应头</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x-bz-content-sha1</span><br><span class="line">x-bz-file-id</span><br><span class="line">x-bz-file-name</span><br><span class="line">x-bz-info-src_last_modified_millis</span><br><span class="line">x-bz-upload-timestamp</span><br></pre></td></tr></table></figure><p><img data-src="https://img.zs.fyi/2308/zPZXHPkUJd.png" alt="修改响应头" loading="lazy"></p><h3 id="ShareX-设置"><a href="#ShareX-设置" class="headerlink" title="ShareX 设置"></a>ShareX 设置</h3><p>先到 Backblaze 后台创建一个应用密钥，建议下拉选择刚刚创建的桶，限制密钥的作用范围</p><p><img data-src="https://img.zs.fyi/2308/roTfv4ihcI.png" alt="创建密钥" loading="lazy"></p><p>记下 applicationKey，仅会出现一次</p><p>到 ShareX 中找到 Backblaze 设置，依次填入存储桶的 keyID，applicationKey，桶名。设置上传路径偏好，并填入自定义域名 img.example.com</p><p><img data-src="https://img.zs.fyi/2308/e4LrXnkNmr.png" alt="ShareX 设置" loading="lazy"></p><h3 id="本文参考"><a href="#本文参考" class="headerlink" title="本文参考"></a>本文参考</h3><ul><li><a href="https://www.backblaze.com/blog/free-image-hosting-with-cloudflare-transform-rules-and-backblaze-b2/">Free Image Hosting With Cloudflare Transform Rules and Backblaze B2</a></li><li><a href="https://www.jingxialai.com/4155.html">backblaze 接入 cloudflare 自定义域名完整过程</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍如何设置 Backblaze B2 云存储并将其接入 Cloudflare CDN，以及通过 ShareX 上传图片和文件。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Cloudflare" scheme="https://zs.fyi/tags/Cloudflare/"/>
    
    <category term="Backblaze" scheme="https://zs.fyi/tags/Backblaze/"/>
    
    <category term="ShareX" scheme="https://zs.fyi/tags/ShareX/"/>
    
  </entry>
  
  <entry>
    <title>恢复 Linux U 盘启动盘在 Windows 下的使用</title>
    <link href="https://zs.fyi/archives/windows-linux-udisk.html"/>
    <id>https://zs.fyi/archives/windows-linux-udisk.html</id>
    <published>2023-07-29T04:02:23.000Z</published>
    <updated>2023-09-10T05:31:45.979Z</updated>
    
    <content type="html"><![CDATA[<p>通过 DD 方式制作 Linux 启动盘后，将 U 盘插在 Windows 笔记本上，要么在文件资源管理器中不显示或者显示可用空间只有 200MB，尽管在磁盘管理器中是正常的。而且，此时尝试直接格式化也是没有用的。可通过以下两步解决：</p><span id="more"></span><p>第一步，调用 diskpart 命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">diskpart</span><br><span class="line">list disk</span><br><span class="line">select disk &lt;number&gt;  # &lt;number&gt; 为实际磁盘编号</span><br><span class="line">clean</span><br></pre></td></tr></table></figure><p><img data-src="https://img.zs.fyi/2308/diskpart.png" alt="diskpart" loading="lazy"></p><p>第二步，在磁盘管理器中创建</p><p><img data-src="https://img.zs.fyi/2308/disk-management.png" alt="disk-management" loading="lazy"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;通过 DD 方式制作 Linux 启动盘后，将 U 盘插在 Windows 笔记本上，要么在文件资源管理器中不显示或者显示可用空间只有 200MB，尽管在磁盘管理器中是正常的。而且，此时尝试直接格式化也是没有用的。可通过以下两步解决：&lt;/p&gt;</summary>
    
    
    
    
    <category term="Windows" scheme="https://zs.fyi/tags/Windows/"/>
    
    <category term="Linux" scheme="https://zs.fyi/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Windows 10 无法进入休眠状态</title>
    <link href="https://zs.fyi/archives/windows-sleep-bug.html"/>
    <id>https://zs.fyi/archives/windows-sleep-bug.html</id>
    <published>2023-07-29T04:00:56.000Z</published>
    <updated>2023-09-10T05:31:45.979Z</updated>
    
    <content type="html"><![CDATA[<p>系统是 Windows 专业版 1909，电源计划是默认的平衡模式。有时候晚上合盖后第二天早上笔记本发烫，揭开盖子直接进入解锁登录界面。这次又遇到了，寻找解决方法，并稍作记录。</p><span id="more"></span><p><img data-src="https://img.zs.fyi/2308/powercfg.png" alt="powercfg" loading="lazy"></p><p>如图，我的笔记本支持 Standby (S3)、Hibernate、Hybrid Sleep、Fast Startup 这四种 sleep states。其中第一种就相当于 Sleep，中文翻译为睡眠；第二种则叫做休眠；第三种叫做混合睡眠；第四种是 Windows 8 时引入的快速关机。</p><p>它们之间乱七八糟的关系和区别可以查看以下几篇文章：</p><ul><li><p><a href="https://blog.csdn.net/Listener_ri/article/details/50835594">hybrid-sleep 和 sleep 以及 hibernate 的区别</a></p></li><li><p><a href="https://blog.csdn.net/y97523szb/article/details/78108777">睡眠、休眠、混合睡眠三者之间的关系与区别</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/47006051">关于电脑的待机、睡眠、休眠，这篇应该可以解答你所有的疑问</a>（推荐）</p></li><li><p><a href="https://www.howtogeek.com/102897/whats-the-difference-between-sleep-and-hibernate-in-windows/">What’s the Difference Between Sleep and Hibernate in Windows?</a></p></li></ul><p>下面则是电池平衡模式下默认的高级设置选项，留存方便日后对比：</p><p><img data-src="https://img.zs.fyi/2308/default_settings.png" alt="default_settings" loading="lazy"></p><p>上面第三篇文章中有这么两段话点醒了我</p><blockquote><p>不过呢，随着移动时代的到来，微软肯定也意识到了这个问题。从 Windows 8 开始，Windows 引入了一种新的电源状态，叫 S0 Standby，或 Modern Standby，原理和我上面分析的 iPhone 熄屏状态一模一样。该状态在一些 Windows 平板电脑上实现了，比如 Surface Pro 3，小米平板二代。</p><p>用 <code>powercfg -a</code> 可查得当前系统是否支持 Modern Standby。Modern Standby 又分两种，一种是不带网络连接的，另一种是带网络连接的，后者在进入熄屏状态时可以被特定的网络数据包唤醒（需要网卡硬件支持），后者也称 Connected Standby。小米平板二代支持后者。</p></blockquote><p>同时结合这篇<a href="https://blog.csdn.net/hanziyuan08/article/details/89396894">文章</a>，我查看了 <code>Computer\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Power</code> 下的「CsEnabled」键值，竟然默认是 1。</p><p><img data-src="https://img.zs.fyi/2308/CsEnabled.png" alt="CsEnabled" loading="lazy"></p><p>那么问题来了，上面第一张图明明显示我的电脑不支持 S0 Standby，电池驱动管理却依然将其开启。我觉得很可能就是这个问题了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;系统是 Windows 专业版 1909，电源计划是默认的平衡模式。有时候晚上合盖后第二天早上笔记本发烫，揭开盖子直接进入解锁登录界面。这次又遇到了，寻找解决方法，并稍作记录。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Windows" scheme="https://zs.fyi/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>更改无线网络名称</title>
    <link href="https://zs.fyi/archives/windows-network-profile.html"/>
    <id>https://zs.fyi/archives/windows-network-profile.html</id>
    <published>2023-07-29T03:59:23.000Z</published>
    <updated>2023-09-10T05:31:45.979Z</updated>
    
    <content type="html"><![CDATA[<p>注册表地址如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\NetworkList\Profiles</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;注册表地址如下：&lt;/p&gt;
&lt;figure class=&quot;highlight text&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;</summary>
      
    
    
    
    
    <category term="Windows" scheme="https://zs.fyi/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>CPU 频率锁定在 0.4GHz</title>
    <link href="https://zs.fyi/archives/windows-cpu-0-4ghz.html"/>
    <id>https://zs.fyi/archives/windows-cpu-0-4ghz.html</id>
    <published>2023-07-29T03:57:10.000Z</published>
    <updated>2023-09-10T05:31:45.979Z</updated>
    
    <content type="html"><![CDATA[<p>如下图，查到的解决办法各不相同，最后哪一种都没有采用。我目前的做法是，将控制面板中的电池计划选项重置为默认，然后关机重启，勉强解决燃眉之急。</p><span id="more"></span><p><img data-src="https://img.zs.fyi/2308/CPU.png" alt="CPU" loading="lazy"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;如下图，查到的解决办法各不相同，最后哪一种都没有采用。我目前的做法是，将控制面板中的电池计划选项重置为默认，然后关机重启，勉强解决燃眉之急。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Windows" scheme="https://zs.fyi/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Windows 10 升级 1803 后多了个 OEM 分区并分配盘符</title>
    <link href="https://zs.fyi/archives/windows-1803-oem.html"/>
    <id>https://zs.fyi/archives/windows-1803-oem.html</id>
    <published>2023-07-29T03:54:46.000Z</published>
    <updated>2023-09-10T05:31:45.979Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题概述"><a href="#问题概述" class="headerlink" title="问题概述"></a>问题概述</h3><p>手上的一台联想笔记本在更新到 Windows 1803 版后在<code>此电脑 - 设备和驱动器</code>下「多了一个 OEM 分区」并且分配了盘符。</p><span id="more"></span><p><img data-src="https://img.zs.fyi/2308/This-PC-Before.png" alt="This-PC-Before" loading="lazy"></p><p><img data-src="https://img.zs.fyi/2308/Disk-Management-Before.png" alt="Disk-Management-Before" loading="lazy"></p><p>其实也不能算多了一个分区，这个分区原本应该是用于系统恢复的，本不该分配盘符，但估计是这次更新的 Bug 导致这样的问题。分配的盘符是跟在已占用的盘符之后，比如我外接了一个硬盘里面有两个分区，占用了 D 和 E，所以之后是 F。</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>网上搜索一番，发现有这个问题的还不在少数。但是很奇怪，我的另一台笔记本没有出现这种情况。</p><p>下面是解决办法（感谢知乎用户 <a href="https://www.zhihu.com/people/fisher-sam-5">@Fisher Sam</a>）和我的参考示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">以管理员权限运行命令提示符，逐行运行</span><br><span class="line"></span><br><span class="line">diskpart</span><br><span class="line"></span><br><span class="line">list disk</span><br><span class="line"></span><br><span class="line">select disk x      （x 表示磁盘序号）</span><br><span class="line"></span><br><span class="line">list volume</span><br><span class="line"></span><br><span class="line">select volume x    （x 表示卷号）</span><br><span class="line"></span><br><span class="line">remove letter=x    （x 表示盘符）</span><br></pre></td></tr></table></figure><p><img data-src="https://img.zs.fyi/2308/DiskPart.png" alt="DiskPart" loading="lazy"></p><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p><img data-src="https://img.zs.fyi/2308/This-PC-After.png" alt="This-PC-After" loading="lazy"></p><p><img data-src="https://img.zs.fyi/2308/Disk-Management-After.png" alt="Disk-Management-After" loading="lazy"></p><h3 id="参考方案"><a href="#参考方案" class="headerlink" title="参考方案"></a>参考方案</h3><ul><li><p><a href="https://www.zhihu.com/question/275658123">windows10 升级 1803 版后为什么多了个 OEM 分区并多分配了一个盘符？</a></p></li><li><p><a href="https://www.zhihu.com/question/275581629">win10 升级 1803 后多了一个 OEM 分区是什么，可以取消吗？</a></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;问题概述&quot;&gt;&lt;a href=&quot;#问题概述&quot; class=&quot;headerlink&quot; title=&quot;问题概述&quot;&gt;&lt;/a&gt;问题概述&lt;/h3&gt;&lt;p&gt;手上的一台联想笔记本在更新到 Windows 1803 版后在&lt;code&gt;此电脑 - 设备和驱动器&lt;/code&gt;下「多了一个 OEM 分区」并且分配了盘符。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Windows" scheme="https://zs.fyi/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>如何删除 Windows 启动项中的「Program」</title>
    <link href="https://zs.fyi/archives/windows-start-program.html"/>
    <id>https://zs.fyi/archives/windows-start-program.html</id>
    <published>2023-07-29T03:53:02.000Z</published>
    <updated>2023-09-10T05:31:45.979Z</updated>
    
    <content type="html"><![CDATA[<p>这世界对强迫症患者太不友好，比如 Windows 10 上某一软件卸载后可能启动项还残留在那里，并且名称显示为 Program（下图中第二项），关键他喵的名称前还没有软件图标（当然没有，毕竟软件已经被卸载了）。</p><span id="more"></span><p><img data-src="https://img.zs.fyi/2308/Before.png" alt="Before" loading="lazy"></p><p>通过 Google，得知可以修改注册表来解决这一问题：</p><p>首先 <kbd>Start</kbd> + <kbd>R</kbd> 呼出运行，输入 <code>regedit</code>，回车打开注册表编辑器</p><ul><li>如果是要删除系统开机启动项（影响所有用户），注册表定位到</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run</span><br></pre></td></tr></table></figure><ul><li>如果要删除当前用户的开机启动项，注册表定位到</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run</span><br></pre></td></tr></table></figure><p>像我的就是属于第二种情况，进入注册表后找到已删除软件的残余启动项</p><p><img data-src="https://img.zs.fyi/2308/Registry.png" alt="Registry" loading="lazy"></p><p>接下来当然是右键直接删除该键值了</p><p>然后再打开任务管理器，发现原本闹心的「Program」果然不见了，世界又充满爱了</p><p><img data-src="https://img.zs.fyi/2308/After.png" alt="After" loading="lazy"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这世界对强迫症患者太不友好，比如 Windows 10 上某一软件卸载后可能启动项还残留在那里，并且名称显示为 Program（下图中第二项），关键他喵的名称前还没有软件图标（当然没有，毕竟软件已经被卸载了）。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Windows" scheme="https://zs.fyi/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>通过组策略禁用 Windows 10 系统的自动更新功能</title>
    <link href="https://zs.fyi/archives/windows-disable-autoupdate.html"/>
    <id>https://zs.fyi/archives/windows-disable-autoupdate.html</id>
    <published>2023-07-29T03:51:31.000Z</published>
    <updated>2023-09-10T05:31:45.979Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知近年微软发布的更新经常性的导致 Windows 10 用户出现诸如开机黑屏或者是直接无法启动的问题。显然对于绝大多数用户来说能否稳定的运行才是最重要的，同时也并不是所有的用户都有能力解决各类问题。</p><span id="more"></span><p>例如近期微软更新致使部分用户启动出现黑屏的问题，虽有临时解决方案但并不是所有的设备都可顺利解决。因此还不如直接禁用掉 Windows 10 的自动更新策略，省的每次安装更新都是提心吊胆的害怕出现新的问题。基于安全性考虑我们是不会建议大家不安装更新的，此处的禁用只是禁用掉自动更新而不是禁用更新。</p><ol><li><p>快捷键 <kbd>Start</kbd> + <kbd>R</kbd> 打开运行，然后在运行的对话框中填写 <code>gpedit.msc</code> 并确定</p></li><li><p>打开组策略后点击左侧菜单依次展开<code>计算机配置 — 管理模板 — Windows 组件 — Windows 更新</code></p></li></ol><p><img data-src="https://img.zs.fyi/2308/Windows-Update.png" alt="Windows-Update" loading="lazy"></p><ol start="3"><li>双击<code>配置自动更新</code>即可打开如下图的新窗口，在新窗口左侧的选项里将默认的<code>未配置</code>更改为<code>已禁用</code>即可</li></ol><p><img data-src="https://img.zs.fyi/2308/AutoUpdate.png" alt="AutoUpdate" loading="lazy"></p><div class="note info"><p>将此项变更为已禁用后系统将不再自动检查和下载安装更新，因此你需要定期去更新里手动进行检查。原文出处为 <a href="https://www.landiannews.com/archives/40677.html">https://www.landiannews.com/archives/40677.html</a></p></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;众所周知近年微软发布的更新经常性的导致 Windows 10 用户出现诸如开机黑屏或者是直接无法启动的问题。显然对于绝大多数用户来说能否稳定的运行才是最重要的，同时也并不是所有的用户都有能力解决各类问题。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Windows" scheme="https://zs.fyi/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Windows 10 用户账号历史头像删除</title>
    <link href="https://zs.fyi/archives/windows-account-avatar.html"/>
    <id>https://zs.fyi/archives/windows-account-avatar.html</id>
    <published>2023-07-29T03:49:24.000Z</published>
    <updated>2023-09-10T05:31:45.979Z</updated>
    
    <content type="html"><![CDATA[<p>数次更换头像后，在当前头像右侧会显示之前设置的头像，作为强迫症这是绝对不能忍的。</p><span id="more"></span><p>解决方法如下：</p><ol><li><p><kbd>Start</kbd> + <kbd>R</kbd> 运行，输入 <code>%APPDATA%\Microsoft\Windows\AccountPictures</code>，然后确定</p></li><li><p>进入后，可以看到之前使用过的头像，删除即可</p></li><li><p>再按下 <kbd>Start</kbd> + <kbd>I</kbd>，进入<code>账户 - 你的信息</code>，可以看到之前的头像已经消失</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;数次更换头像后，在当前头像右侧会显示之前设置的头像，作为强迫症这是绝对不能忍的。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Windows" scheme="https://zs.fyi/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>删除 Windows 10 桌面右键菜单中的图形选项和图形属性选项</title>
    <link href="https://zs.fyi/archives/windows-igfxDTCM-igfxcui.html"/>
    <id>https://zs.fyi/archives/windows-igfxDTCM-igfxcui.html</id>
    <published>2023-07-29T03:45:29.000Z</published>
    <updated>2023-09-10T05:31:45.979Z</updated>
    
    <content type="html"><![CDATA[<p>我的笔记本电脑经常在集成显卡驱动更新后，点击鼠标右键要等很长时间才能弹出菜单来。作为强迫症自然不能忍受，网络搜索得到答案后，写在这作为记录。</p><span id="more"></span><ol><li><p>按下 <kbd>Start</kbd> + <kbd>R</kbd> 调出运行，输入 <code>regedit</code> 回车</p></li><li><p>在注册表编辑器中定位到</p></li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKEY_CLASSES_ROOT\Directory\Background\shellex\ContextMenuHandlers</span><br></pre></td></tr></table></figure><ol start="3"><li>删除 <code>igfxDTCM</code> 和 <code>igfxcui</code> 两个项目</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;我的笔记本电脑经常在集成显卡驱动更新后，点击鼠标右键要等很长时间才能弹出菜单来。作为强迫症自然不能忍受，网络搜索得到答案后，写在这作为记录。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Windows" scheme="https://zs.fyi/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Task Scheduler CPU 占用高</title>
    <link href="https://zs.fyi/archives/task-scheduler-cpu.html"/>
    <id>https://zs.fyi/archives/task-scheduler-cpu.html</id>
    <published>2023-07-29T03:39:27.000Z</published>
    <updated>2023-09-10T05:31:45.979Z</updated>
    
    <content type="html"><![CDATA[<h3 id="情形"><a href="#情形" class="headerlink" title="情形"></a>情形</h3><ol><li><p>风扇一直转个不停</p></li><li><p>查看任务管理器，CPU 占用一直是 99%</p></li><li><p>Task Scheduler 占用 CPU 高达 60%</p></li></ol><span id="more"></span><p><img data-src="https://img.zs.fyi/2308/Task-Manager.png" alt="Task-Manager" loading="lazy"></p><h3 id="查找解决方案"><a href="#查找解决方案" class="headerlink" title="查找解决方案"></a>查找解决方案</h3><ol><li><p>个人博客：<a href="http://www.tikas.me/task-scheduler-cpu-to-high/">http://www.tikas.me/task-scheduler-cpu-to-high/</a></p></li><li><p>微软社区，有个人提了个相同问题，可惜没人回答</p></li></ol><h3 id="尝试解决"><a href="#尝试解决" class="headerlink" title="尝试解决"></a>尝试解决</h3><ol><li><p><kbd>Start</kbd> + <kbd>X</kbd>，然后按 <kbd>G</kbd>，进入计算机管理</p></li><li><p>定位到<code>任务计划程序库 - Microsoft - Windows - Customer Experience Improvement Program</code>，在右侧可以看到有三个计划任务，都是微软所谓的客户体验改善计划</p></li><li><p>右键将它们全部禁止</p></li><li><p>重启</p></li></ol><p><img data-src="https://img.zs.fyi/2308/Task-Scheduler.png" alt="Task-Scheduler" loading="lazy"></p><h3 id="最终解决"><a href="#最终解决" class="headerlink" title="最终解决"></a>最终解决</h3><p>直接将这三个服务删除</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;情形&quot;&gt;&lt;a href=&quot;#情形&quot; class=&quot;headerlink&quot; title=&quot;情形&quot;&gt;&lt;/a&gt;情形&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;风扇一直转个不停&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查看任务管理器，CPU 占用一直是 99%&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Task Scheduler 占用 CPU 高达 60%&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    
    <category term="Windows" scheme="https://zs.fyi/tags/Windows/"/>
    
  </entry>
  
</feed>
