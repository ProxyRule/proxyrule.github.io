<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>通过 WARP 为纯 IPv6 VPS 添加 IPv4 网络</title>
    <url>/archives/add-ipv4-for-ipv6-only-vps.html</url>
    <content><![CDATA[<p><a href="https://blog.cloudflare.com/1111-warp-better-vpn/">WARP</a> 是 Cloudflare 推出的基于 WireGuard 的 VPN</p>
<p>以下内容基于 Debian 10+</p>
<span id="more"></span>

<h3 id="安装-WireGuard"><a href="#安装-WireGuard" class="headerlink" title="安装 WireGuard"></a>安装 WireGuard</h3><p>准备工作，安装 <code>sudo</code> 和 <code>lsb_release</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install sudo lsb-release -y</span><br></pre></td></tr></table></figure>

<p>安装必要的网络工具</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install net-tools iproute2 openresolv dnsutils -y</span><br></pre></td></tr></table></figure>

<p>安装 Wire­Guard 配置工具</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install wireguard-tools --no-install-recommends</span><br></pre></td></tr></table></figure>

<p>通过 <code>uname -r</code> 查看内核版本，如果是 5.6 及以上内核则已经集成了 Wire­Guard，就不需要安装了，直接跳到下个部分。</p>
<p>否则，需要先添加 back­ports 源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;deb http://deb.debian.org/debian $(lsb_release -sc)-backports main&quot; | sudo tee /etc/apt/sources.list.d/backports.list</span><br><span class="line">sudo apt update</span><br></pre></td></tr></table></figure>

<p>再安装 back­ports 仓库中的内核</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt -t $(lsb_release -sc)-backports install linux-image-$(dpkg --print-architecture) linux-headers-$(dpkg --print-architecture) --install-recommends -y</span><br></pre></td></tr></table></figure>

<p>安装完成后，再次执行 <code>uname -r</code> 确保新版内核已启用</p>
<h3 id="通过-wgcf-生成配置文件"><a href="#通过-wgcf-生成配置文件" class="headerlink" title="通过 wgcf 生成配置文件"></a>通过 wgcf 生成配置文件</h3><p>在安装之前，先修改 DNS 以便下面操作，将 <code>/etc/resolv.conf</code> 中的 nameserver 修改为以下</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">nameserver 2a03:7900:2:0:31:3:104:161</span><br><span class="line">nameserver 2a00:1098:2b::1</span><br><span class="line">nameserver 2a01:4f8:c2c:123f::1</span><br><span class="line">nameserver 2a00:1098:2c::1</span><br></pre></td></tr></table></figure>

<p>安装 wgcf</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -fsSL git.io/wgcf.sh | sudo bash</span><br></pre></td></tr></table></figure>

<p>注册 WARP 账户</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wgcf register</span><br></pre></td></tr></table></figure>

<p>生成 Wire­Guard 配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wgcf generate</span><br></pre></td></tr></table></figure>

<h3 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h3><p>修改 <code>wgcf-profile.conf</code> 配置文件</p>
<ul>
<li>将 <code>engage.cloudflareclient.com:2408</code> 替换为 <code>[2606:4700:d0::a29f:c001]:2408</code></li>
<li>删除或注释掉 <code>AllowedIPs = ::/0</code></li>
<li>将 <code>DNS = 1.1.1.1</code> 修改为 <code>DNS = 2606:4700:4700::1111</code></li>
</ul>
<p>完成并保存后，将 Wire­Guard 配置文件复制到 <code>/etc/wireguard/</code> 并命名为 <code>wgcf.conf</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo cp wgcf-profile.conf /etc/wireguard/wgcf.conf</span><br></pre></td></tr></table></figure>

<p>开启网络接口（命令中的 <code>wgcf</code> 对应的是配置文件 <code>wgcf.conf</code> 的文件名前缀）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo wg-quick up wgcf</span><br></pre></td></tr></table></figure>

<p>使用 <code>curl -4 ip.sb</code> 看看能否顺利返回 IPv4</p>
<p>没问题后，执行 <code>crontab -e</code> 命令，添加 <code>@reboot systemctl start wg-quick@wgcf</code> 到文件末尾设置开机自启。</p>
]]></content>
      <tags>
        <tag>Cloudflare</tag>
        <tag>WARP</tag>
        <tag>IPv6</tag>
        <tag>VPS</tag>
      </tags>
  </entry>
  <entry>
    <title>Backblaze B2 云存储搭配 Cloudflare</title>
    <url>/archives/backblaze-b2-cloudflare.html</url>
    <content><![CDATA[<p>本文主要介绍如何设置 Backblaze B2 云存储并将其接入 Cloudflare CDN，以及通过 ShareX 上传图片和文件。</p>
<span id="more"></span>

<h3 id="前置要求"><a href="#前置要求" class="headerlink" title="前置要求"></a>前置要求</h3><ul>
<li><a href="https://www.backblaze.com/">Backblaze</a> 账号</li>
<li>Cloudflare 账号</li>
<li>域名并将 DNS 解析托管到 Cloudflare，请以实际域名替代示例中的 example.com</li>
<li><a href="https://getsharex.com/">ShareX</a> 或其他类似软件已安装</li>
</ul>
<h3 id="Backblaze-设置"><a href="#Backblaze-设置" class="headerlink" title="Backblaze 设置"></a>Backblaze 设置</h3><p>创建一个存储桶，文件公开还是私密访问视需求而定。如果是用于博客图片的话，选择公开即可。其他默认。</p>
<p><img data-src="https://img.zs.fyi/2308/6O2l6ELCQY.png" alt="创建存储桶" loading="lazy"></p>
<p>上传一个文件，点击左侧的浏览文件，获取“友好 URL”</p>
<p><img data-src="https://img.zs.fyi/2308/4nLxvoQJfb.png" alt="友好 URL" loading="lazy"></p>
<p>点击刚刚创建的桶，设置桶的缓存时间为 <code>&#123;&quot;cache-control&quot;:&quot;max-age=720000&quot;&#125;</code></p>
<p><img data-src="https://img.zs.fyi/2308/gKaVpmPQQ2.png" alt="桶缓存时间" loading="lazy"></p>
<h3 id="Cloudflare-设置"><a href="#Cloudflare-设置" class="headerlink" title="Cloudflare 设置"></a>Cloudflare 设置</h3><p>一、添加一条 CNAME 解析，比如 img.example.com，目标地址即为“友好 URL”图中所示</p>
<p><img data-src="https://img.zs.fyi/2308/0pbNHUnjYz.png" alt="CNAME" loading="lazy"></p>
<p>二、添加一条页面规则，URL 为 <code>img.example.com/*</code>，SSL 选择严格，缓存级别为“缓存所有内容”，边缘缓存 TTL 为“1 个月”</p>
<p><img data-src="https://img.zs.fyi/2308/875SUdYNzB.png" alt="页面规则" loading="lazy"></p>
<p>三、添加一条转换规则 - 重写 URL</p>
<p>规则名称随便，比如 Remove bucket name</p>
<p>下方选择“主机名”“等于” <code>img.example.com</code> 即可</p>
<p><img data-src="https://img.zs.fyi/2308/I68OSKYLaL.png" alt="表达式" loading="lazy"></p>
<p>然后选择“重写到”“Dynamic 动态”，框中填</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">concat(&quot;/file/bucketName&quot;, http.request.uri.path)</span><br></pre></td></tr></table></figure>

<p>将 bucketName 更改为你一开始设置的桶名称</p>
<p><img data-src="https://img.zs.fyi/2308/POqzrOd9Kp.png" alt="重写" loading="lazy"></p>
<p>四、添加一条修改响应头规则</p>
<p>规则名称随意，比如 Remove x-bz-*</p>
<p>设置和上方一样的自定义筛选表达式</p>
<p>添加一个动态响应头，名为 <code>ETag</code>，值为</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">concat(http.response.headers[&quot;x-bz-content-sha1&quot;][0], http.response.headers[&quot;x-bz-info-src_last_modified_millis&quot;][0], http.response.headers[&quot;x-bz-file-id&quot;][0])</span><br></pre></td></tr></table></figure>

<p>删除如下响应头</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">x-bz-content-sha1</span><br><span class="line">x-bz-file-id</span><br><span class="line">x-bz-file-name</span><br><span class="line">x-bz-info-src_last_modified_millis</span><br><span class="line">x-bz-upload-timestamp</span><br></pre></td></tr></table></figure>

<p><img data-src="https://img.zs.fyi/2308/zPZXHPkUJd.png" alt="修改响应头" loading="lazy"></p>
<h3 id="ShareX-设置"><a href="#ShareX-设置" class="headerlink" title="ShareX 设置"></a>ShareX 设置</h3><p>先到 Backblaze 后台创建一个应用密钥，建议下拉选择刚刚创建的桶，限制密钥的作用范围</p>
<p><img data-src="https://img.zs.fyi/2308/roTfv4ihcI.png" alt="创建密钥" loading="lazy"></p>
<p>记下 applicationKey，仅会出现一次</p>
<p>到 ShareX 中找到 Backblaze 设置，依次填入存储桶的 keyID，applicationKey，桶名。设置上传路径偏好，并填入自定义域名 img.example.com</p>
<p><img data-src="https://img.zs.fyi/2308/e4LrXnkNmr.png" alt="ShareX 设置" loading="lazy"></p>
<h3 id="本文参考"><a href="#本文参考" class="headerlink" title="本文参考"></a>本文参考</h3><ul>
<li><a href="https://www.backblaze.com/blog/free-image-hosting-with-cloudflare-transform-rules-and-backblaze-b2/">Free Image Hosting With Cloudflare Transform Rules and Backblaze B2</a></li>
<li><a href="https://www.jingxialai.com/4155.html">backblaze 接入 cloudflare 自定义域名完整过程</a></li>
</ul>
]]></content>
      <tags>
        <tag>Cloudflare</tag>
        <tag>Backblaze</tag>
        <tag>ShareX</tag>
      </tags>
  </entry>
  <entry>
    <title>廉价机场众生相</title>
    <url>/archives/cheap-proxy-providers.html</url>
    <content><![CDATA[<p>前段时间老是在论坛上看到相关信息，就查了一下，找到了这篇<a href="https://aijichang.com/6379/">机场图鉴</a>。我之前并没有用过，甚至也没听过，更没想过能把价格压到这种程度。</p>
<span id="more"></span>

<p>全部（除了“免费机场”和已经无法访问的“两角五”）注册了一遍并购买了其中两家，有以下几点发现：</p>
<ul>
<li>后台面板用的基本上都是一样的，绝大部分需要注册后才能知道套餐信息</li>
<li>基本都是直连代理，无国内中转，意味着某些时期可能会不可用，毕竟价格在这</li>
<li>能做到这么低的价格，猜测都是滥用的学生和新注册用户权益，机器用完即抛</li>
<li>机场跑路风险高，当然这不意味着我在用的那些所谓“高端”机场就不会跑路，最好按月购买</li>
<li>隐私和信息安全风险高，有可能的话将几家串成代理链或套一层 WARP，其实对于所有机场都应该这样</li>
</ul>
<p>我个人在用的包括 EFCloud、一元机场、低价机场、性价比机场和赔钱机场（按流量）</p>
<h3 id="EFCloud"><a href="#EFCloud" class="headerlink" title="EFCloud"></a>EFCloud</h3><p><a href="https://link.zs.fyi/efcloud">注册</a>需验证邮箱，不支持匿名邮箱。</p>
<p>默认佣金比例 25%</p>
<p>费用上从每月 1 块钱 100G 流量到 10 块钱 3072G 流量不等。提供按流量付费套餐。</p>
<h3 id="一元机场"><a href="#一元机场" class="headerlink" title="一元机场"></a>一元机场</h3><p><a href="https://link.zs.fyi/yyjc">注册</a>需验证邮箱，支持 Proton 匿名邮箱。</p>
<p>默认佣金比例 60%</p>
<p>套餐上可选每年 11 元且每月 100G 流量，或两年付 19 元。另外，还有按月付费套餐 4 元 1000G 和 6 元 3000G</p>
<h3 id="三分机场"><a href="#三分机场" class="headerlink" title="三分机场"></a>三分机场</h3><p><a href="https://link.zs.fyi/sfjc">注册</a>需验证邮箱，不支持匿名邮箱。</p>
<p>默认佣金比例 65%</p>
<p>提供年付 9.5 元每月 200G 流量和月付 5 元每月 5000G 流量套餐。此外，还可 18 元一次性购买 1TB 流量。</p>
<h3 id="两元店"><a href="#两元店" class="headerlink" title="两元店"></a>两元店</h3><p><a href="https://link.zs.fyi/lyd">注册</a>无需验证邮箱，可使用虚假邮箱。</p>
<p>默认佣金比例 30%</p>
<p>只有按周期付费套餐，7 元季付每月 1024G 流量，以及月付 6 元 3072G 流量等。</p>
<h3 id="五毛机场"><a href="#五毛机场" class="headerlink" title="五毛机场"></a>五毛机场</h3><p>该机场已于 2023 年 5 月 24 日前跑路</p>
<p>注册无需验证邮箱，可使用虚假邮箱。</p>
<p>默认佣金比例 10%</p>
<p>提供的套餐从价格上来说其实不能算廉价了，月付 10 元至 50 元，每月流量从 120G 到 520G 不等。也可一次性购买流量。</p>
<h3 id="低价机场"><a href="#低价机场" class="headerlink" title="低价机场"></a>低价机场</h3><p><a href="https://link.zs.fyi/djjc">注册</a>需验证邮箱，支持 Proton 匿名邮箱。</p>
<p>默认佣金比例 70%</p>
<p>套餐只有两款，月付 1.5 元 500G 流量和月付 5 元 5000G 流量。</p>
<h3 id="性价比机场"><a href="#性价比机场" class="headerlink" title="性价比机场"></a>性价比机场</h3><p><a href="https://link.zs.fyi/xjbjc">注册</a>需验证邮箱，不支持匿名邮箱。</p>
<p>默认佣金比例 20%</p>
<p>提供的套餐五花八门，最低月付 1 元 100G 流量，最高月付 20 元 4000G 流量。还提供 VIP 套餐（国内中转）和一次性购买流量套餐。</p>
<h3 id="翻墙机场"><a href="#翻墙机场" class="headerlink" title="翻墙机场"></a>翻墙机场</h3><p><a href="https://link.zs.fyi/fqjc">注册</a>需验证邮箱，不支持匿名邮箱。</p>
<p>默认佣金比例 10%</p>
<p>最低月费 4 元 1T 流量，按年付则是 40 元。最高月付 8 元 4T 流量，年费 80 元。</p>
<h3 id="赔钱机场"><a href="#赔钱机场" class="headerlink" title="赔钱机场"></a>赔钱机场</h3><p><a href="https://link.zs.fyi/pqjc">注册</a>无需验证邮箱，可使用虚假邮箱。</p>
<p>默认佣金比例 75%</p>
<p>套餐更夸张，或许是名字由来吧，年付 7 元每月 1T 流量。其他还有月付 4 元每月 5T 流量以及一次性流量套餐等。</p>
]]></content>
      <tags>
        <tag>代理</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 搭建 Cloudflare Tunnel</title>
    <url>/archives/docker-cloudflared.html</url>
    <content><![CDATA[<p>Cloudflare Tunnel 除了最基本的内网穿透（隧道）功能外，还带有一套身份认证功能用于保护应用安全，且非常简单易用。</p>
<span id="more"></span>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.9&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tunnel:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">cloudflared_tunnel</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">cloudflare/cloudflared</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">tunnel</span> <span class="string">--no-autoupdate</span> <span class="string">run</span> <span class="string">--token</span> <span class="string">&lt;token&gt;</span> <span class="comment"># 将 &lt;token&gt; 替换为你的</span></span><br></pre></td></tr></table></figure>

<p><a href="https://www.cloudflare.com/products/tunnel/">产品介绍</a> 和 <a href="https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/">使用文档</a></p>
]]></content>
      <tags>
        <tag>Cloudflare</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 搭建 Nginx Proxy Manager</title>
    <url>/archives/docker-npm.html</url>
    <content><![CDATA[<p>Nginx Proxy Manager 是一个非常方便的 Nginx 代理管理工具。</p>
<span id="more"></span>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">app:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">npm</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&#x27;jc21/nginx-proxy-manager:latest&#x27;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="comment"># These ports are in format &lt;host-port&gt;:&lt;container-port&gt;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;80:80&#x27;</span> <span class="comment"># Public HTTP Port</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;443:443&#x27;</span> <span class="comment"># Public HTTPS Port</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;81:81&#x27;</span> <span class="comment"># Admin Web Port</span></span><br><span class="line">      <span class="comment"># Add any other Stream port you want to expose</span></span><br><span class="line">      <span class="comment"># - &#x27;21:21&#x27; # FTP</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Uncomment the next line if you uncomment anything in the section</span></span><br><span class="line">    <span class="comment"># environment:</span></span><br><span class="line">      <span class="comment"># Uncomment this if you want to change the location of</span></span><br><span class="line">      <span class="comment"># the SQLite DB file within the container</span></span><br><span class="line">      <span class="comment"># DB_SQLITE_FILE: &quot;/data/database.sqlite&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Uncomment this if IPv6 is not enabled on your host</span></span><br><span class="line">      <span class="comment"># DISABLE_IPV6: &#x27;true&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./letsencrypt:/etc/letsencrypt</span></span><br></pre></td></tr></table></figure>

<p><a href="https://nginxproxymanager.com/">Nginx Proxy Manager 官网</a></p>
]]></content>
      <tags>
        <tag>Docker</tag>
        <tag>Nginx Proxy Manager</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 搭建 Portainer</title>
    <url>/archives/docker-portainer.html</url>
    <content><![CDATA[<p>Portainer 是一个用户友好的图形化界面工具，用于轻松管理 Docker 容器和容器编排，无需深入命令行操作。</p>
<span id="more"></span>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">portainer-ee:</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&#x27;8000:8000&#x27;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&#x27;9443:9443&#x27;</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">portainer</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&#x27;/var/run/docker.sock:/var/run/docker.sock&#x27;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&#x27;portainer_data:/data&#x27;</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">&#x27;portainer/portainer-ee:latest&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">    <span class="attr">portainer_data:</span></span><br></pre></td></tr></table></figure>

<p><a href="https://www.portainer.io/">Portainer 官方网站</a></p>
]]></content>
      <tags>
        <tag>Docker</tag>
        <tag>Portainer</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 搭建 RSSHub</title>
    <url>/archives/docker-rsshub.html</url>
    <content><![CDATA[<p>RSSHub 是一个开源、简单易用、易于扩展的 RSS 生成器，可以给任何奇奇怪怪的内容生成 RSS 订阅源。</p>
<span id="more"></span>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.9&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">rsshub:</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">rsshub_app</span></span><br><span class="line">        <span class="comment"># two ways to enable puppeteer:</span></span><br><span class="line">        <span class="comment"># * comment out marked lines, then use this image instead: diygod/rsshub:chromium-bundled</span></span><br><span class="line">        <span class="comment"># * (consumes more disk space and memory) leave everything unchanged</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">diygod/rsshub</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&#x27;1200:1200&#x27;</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="attr">NODE_ENV:</span> <span class="string">production</span></span><br><span class="line">            <span class="attr">CACHE_TYPE:</span> <span class="string">redis</span></span><br><span class="line">            <span class="attr">REDIS_URL:</span> <span class="string">&#x27;redis://redis:6379/&#x27;</span></span><br><span class="line">            <span class="attr">PUPPETEER_WS_ENDPOINT:</span> <span class="string">&#x27;ws://browserless:3000&#x27;</span>  <span class="comment"># marked</span></span><br><span class="line">            <span class="attr">PROXY_URI:</span> <span class="string">&#x27;socks5h://warp-socks:9091&#x27;</span></span><br><span class="line">        <span class="attr">depends_on:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">browserless</span>  <span class="comment"># marked</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">browserless:</span>  <span class="comment"># marked</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">rsshub_browserless</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">browserless/chrome</span>  <span class="comment"># marked</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span>  <span class="comment"># marked</span></span><br><span class="line">        <span class="attr">ulimits:</span>  <span class="comment"># marked</span></span><br><span class="line">          <span class="attr">core:</span>  <span class="comment"># marked</span></span><br><span class="line">            <span class="attr">hard:</span> <span class="number">0</span>  <span class="comment"># marked</span></span><br><span class="line">            <span class="attr">soft:</span> <span class="number">0</span>  <span class="comment"># marked</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">rsshub_redis</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">redis:alpine</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">redis_data:/data</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">warp-socks:</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">rsshub_warp</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">monius/docker-warp-socks:latest</span></span><br><span class="line">        <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">/lib/modules:/lib/modules</span></span><br><span class="line">        <span class="attr">cap_add:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">NET_ADMIN</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">SYS_MODULE</span></span><br><span class="line">        <span class="attr">sysctls:</span></span><br><span class="line">            <span class="attr">net.ipv6.conf.all.disable_ipv6:</span> <span class="number">0</span></span><br><span class="line">            <span class="attr">net.ipv4.conf.all.src_valid_mark:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">healthcheck:</span></span><br><span class="line">            <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;curl&quot;</span>, <span class="string">&quot;-f&quot;</span>, <span class="string">&quot;https://www.cloudflare.com/cdn-cgi/trace&quot;</span>]</span><br><span class="line">            <span class="attr">interval:</span> <span class="string">30s</span></span><br><span class="line">            <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">            <span class="attr">retries:</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">    <span class="attr">redis_data:</span></span><br></pre></td></tr></table></figure>

<p><a href="https://docs.rsshub.app/">RSSHub 官方网站</a></p>
]]></content>
      <tags>
        <tag>Docker</tag>
        <tag>RSSHub</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 搭建 subconverter</title>
    <url>/archives/docker-subconverter.html</url>
    <content><![CDATA[<p>subconverter 是在各种订阅格式之间进行转换的实用程序。</p>
<span id="more"></span>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">subconverter:</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&#x27;./data:/opt/subconverter/data&#x27;</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&#x27;25500:25500&#x27;</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">subconverter</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">MANAGED_PREFIX=https://sub.example.com</span> <span class="comment"># 更改为你的域名</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">API_MODE=true</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">&#x27;tindy2013/subconverter:latest&#x27;</span></span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/tindy2013/subconverter/issues/321">Docker 内 MANAGED_PREFIX 不生效</a></p>
]]></content>
      <tags>
        <tag>Docker</tag>
        <tag>subconverter</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker for Windows 网络方面的坑</title>
    <url>/archives/docker-tutorial.html</url>
    <content><![CDATA[<p>最先在小众软件上分享：<a href="https://meta.appinn.net/t/docker-for-windows/13263">Docker for Windows 网络方面的坑</a></p>
<span id="more"></span>

<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul>
<li>Windows 10 LTSC 2019 Version 1809</li>
<li>启用 Hyper-V</li>
<li>安装 Docker for Windows 非 Docker Toolbox</li>
</ul>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol>
<li>网络状态未识别，默认安装的两个虚拟交换机 Default Switch 和 DockerNAT 一直是未识别的网络</li>
</ol>
<p><img data-src="https://img.zs.fyi/2308/Internet.png" alt="Internet" loading="lazy"></p>
<p><img data-src="https://img.zs.fyi/2308/vEthernet.png" alt="vEthernet" loading="lazy"></p>
<ol start="2">
<li>默认安装的虚拟机不显示 IP 地址，Hyper-V 也无法连接上虚拟机</li>
</ol>
<p><img data-src="https://img.zs.fyi/2308/VM.png" alt="VM" loading="lazy"></p>
<ol start="3">
<li>命令 <code>docker-machine ls</code> 显示为空，即使上图中 Docker 的宿主机是存在的</li>
</ol>
<p><img data-src="https://img.zs.fyi/2308/docker-machine.png" alt="docker-machine" loading="lazy"></p>
<p>和这位遇到的情况差不多：<a href="https://segmentfault.com/q/1010000014706486">docker hyper-V 无法访问虚拟机</a></p>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>放弃。有 Linux 不用，我在 Windows 上用 Docker 图的啥啊，又不馋她身子。</p>
<p>另外，这类的 issue 三年前就有人提了：<a href="https://github.com/docker/for-win/issues/367">Docker HyperV vEthernet (DockerNAT) is Un-identified Network (Public Network) in tray</a>，至今似乎仍未解决。</p>
<h3 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h3><p>我继续查了点资料后，发现 Docker 默认的网络模式其实是 bridge，参见：<a href="https://docs.docker.com/network/">docker docs - Networking overview</a></p>
<p>但是，Docker bridge 的实现方式好像又跟 Linux bridge 不太一样，具体我没看太懂，参见：<a href="https://www.v2ex.com/t/344321">探索 Docker bridge 的正确姿势 小白亲测有效！</a></p>
<p>Docker bridge 模式下 Docker Daemon 会创建一个名为 docker0 的虚拟网桥（<a href="https://yeasy.gitbooks.io/docker_practice/advanced_network/docker0.html">配置 docker0 网桥</a>），用于连接宿主机与容器，或者是容器之间的通信……</p>
<p>不过呢，以上所说的都是 Linux 环境下的。Docker for Windows 虽然同样默认 bridge 模式，但是由于实现方式不同，</p>
<blockquote>
<p>Because of the way networking is implemented in Docker Desktop for Windows, you cannot see a docker0 interface on the host. This interface is actually within the virtual machine.</p>
</blockquote>
<p>Windows 上是不存在 docker0 这玩意儿的，参见：<a href="https://docs.docker.com/docker-for-windows/networking/">docker docs - Networking features in Docker Desktop for Windows</a></p>
<p>所以，我就一直在这里面转不出来。</p>
]]></content>
      <tags>
        <tag>Docker</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>如何让应用在进入桌面前启动</title>
    <url>/archives/early-start.html</url>
    <content><![CDATA[<p>Windows 10 上安装了 <a href="https://www.stardock.com/products/fences/">Fences</a> 用来管理桌面上一些常用文件（夹），虽然它被设置为开机自启，但是在进入桌面后很长一段时间内它还处于启动状态，桌面文件不能迅速加载出来。受<a href="https://meta.appinn.net/t/windows-10-windows-10/13337">如何调整 Windows 10 软件开机启动顺序</a>启发，将这一过程记录下来，同时加入了前文中未提到的一些细节、注意事项以及如何卸载。</p>
<span id="more"></span>

<h3 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h3><p>首先，给出下面会使用到的工具的 repo：<a href="https://github.com/sylveon/EarlyStart">sylveon&#x2F;EarlyStart</a></p>
<ol>
<li><p>到 <a href="https://github.com/sylveon/EarlyStart/releases">release page</a> 下载，我此时使用的是 <a href="https://github.com/sylveon/EarlyStart/releases/download/1.0.0/EarlyStart.zip">1.0.0 版本</a>。下载完后解压，并将文件夹放置在一个固定位置，比如我的是 <code>D:\Code\EarlyStart</code></p>
</li>
<li><p>右键选中 <code>EarlyStart.exe</code>，在属性中<code>常规 - 安全</code>下取消勾选。如果和我一样，没有这个复选框的话，那就不用管。更多可参考：<a href="https://www.tenforums.com/tutorials/5357-unblock-file-windows-10-a.html#option1">Unblock the main executable</a></p>
</li>
<li><p>以管理员身份运行 CMD，进入第一步中的文件夹路径。如果你和我一样也将其放置在非系统盘，那么需要加 <code>/d</code> 参数才行，比如我的是 <code>cd /d D:\Code\EarlyStart</code></p>
</li>
<li><p>接着运行 <code>%windir%\Microsoft.NET\Framework\v4.0.30319\InstallUtil.exe .\EarlyStart.exe</code>，应该会有<code>成功完成</code>之类的字样，可以关闭 CMD 了</p>
</li>
</ol>
<p><img data-src="https://img.zs.fyi/2308/EarlyStart.png" alt="EarlyStart" loading="lazy"></p>
<ol start="5">
<li>在用户文件夹下，即 <code>C:\Users\&lt;username&gt;</code> 下新建一个 <code>.earlystart</code> 文件，然后将想要 earlystart 的应用程序路径每行写入一个。比如我的是 <code>&quot;C:\Program Files (x86)\Stardock\Fences\Fences.exe&quot;</code></li>
</ol>
<p>注意：如果你写入上述文件的某一行程序路径无效的话，那么在这之后指定的任何程序都不会被 earlystart</p>
<ol start="6">
<li>重启观察是否有变化</li>
</ol>
<h3 id="如何卸载"><a href="#如何卸载" class="headerlink" title="如何卸载"></a>如何卸载</h3><ol>
<li><p>以管理员身份运行 CMD，进入上述第一步的文件夹内</p>
</li>
<li><p>运行 <code>%windir%\Microsoft.NET\Framework\v4.0.30319\InstallUtil.exe /u .\EarlyStart.exe</code> 提示<code>成功</code>之类的字样就 OK 了</p>
</li>
<li><p>删除 <code>.earlystart</code> 文件，如果喜欢的话</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Excel 2016 打开空白</title>
    <url>/archives/excel-2016-blank.html</url>
    <content><![CDATA[<p>如题，有时候莫名其妙 Excel 直接双击打开文件一片空白。其实之前也遇到过，在网上找了相关资料暂时解决了，但是今天又遇到了，尝试了另一种方法成功解决，特此记录。</p>
<span id="more"></span>

<p>查到的解决方法中，最多的是修改注册表。已知的需要修改以下三处：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">HKEY_CLASSES_ROOT\Excel.csv\shell\Open\command</span><br><span class="line">HKEY_CLASSES_ROOT\Excel.Sheet.12\shell\Open\command</span><br><span class="line">HKEY_CLASSES_ROOT\Excel.Sheet.8\shell\Open\command</span><br></pre></td></tr></table></figure>

<p>修改前看到的值应该是 <code>&quot;C:\Program Files\Microsoft Office\Root\Office16\EXCEL.EXE&quot; &quot;/DDE&quot;</code>，需将其修改为 <code>&quot;C:\Program Files\Microsoft Office\Root\Office16\EXCEL.EXE&quot; &quot;%1&quot;</code>。</p>
<p>但不确定除这三处外其他地方是否也需要修改。所以，如果你对如何修改注册表不了解的话，可以采取「修复 Office 应用程序」这种更简单稳妥的方式。</p>
<p>如果是 Windows 10 的话，流程如下：<kbd>Start</kbd> + <kbd>I</kbd> 打开「Windows 设置」，找到「应用」，然后在「应用和功能」中找到安装的 Office，点击「修改」，选择「联机修复」即可。更多详情可查看：<a href="https://support.office.com/zh-cn/article/%E4%BF%AE%E5%A4%8D-office-%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F-7821d4b6-7c1d-4205-aa0e-a6b40c5bb88b">修复 Office 应用程序</a></p>
]]></content>
      <tags>
        <tag>Office</tag>
      </tags>
  </entry>
  <entry>
    <title>NexT 主题之 Tag Plugins</title>
    <url>/archives/next-tag-plugins.html</url>
    <content><![CDATA[<p>NexT 主题通过一些标签「插件」来增强页面显示效果和提供额外信息，如按钮、标注、流程图等。以下是我所需要的部分，完整文档可查阅<a href="https://theme-next.js.org/docs/tag-plugins/">这里</a>。</p>
<span id="more"></span>

<h3 id="居中引用"><a href="#居中引用" class="headerlink" title="居中引用"></a>居中引用</h3><p>用法</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% centerquote %&#125;最好只有一行文字&#123;% endcenterquote %&#125;</span><br><span class="line"></span><br><span class="line">// 简写形式</span><br><span class="line">&#123;% cq %&#125;最好只有一行文字&#123;% endcq %&#125;</span><br></pre></td></tr></table></figure>

<p>示例</p>
<blockquote class="blockquote-center">
<p>最好只有一行文字</p>

</blockquote>

<h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><p>用法</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% button url, text, icon [class], [title] %&#125;</span><br><span class="line"></span><br><span class="line">// 简写形式</span><br><span class="line">&#123;% btn url, text, icon [class], [title] %&#125;</span><br><span class="line"></span><br><span class="line">url     : URL 绝对或者相对路径。</span><br><span class="line">text    : 按钮显示的文字。text 和 icon 至少指定一个。</span><br><span class="line">icon    : Font Awesome icon 名。text 和 icon 至少指定一个。</span><br><span class="line">[class] : 可选参数。icon 样式：fa-fw | fa-lg | fa-2x | fa-3x | fa-4x | fa-5x</span><br><span class="line">[title] : 可选参数。鼠标悬停时显示的文字。</span><br></pre></td></tr></table></figure>

<p>示例</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% button https://zs.fyi, ZS.FYI, home fa-fw fa-lg, 知识参考 %&#125;</span><br></pre></td></tr></table></figure>

<a class="btn" href="https://zs.fyi" title="知识参考"><i class="fa fa-home fa-fw fa-lg"></i>ZS.FYI</a>

<p>更多示例可查阅该<a href="https://theme-next.js.org/docs/tag-plugins/button.html">文档</a>。</p>
<h3 id="标注"><a href="#标注" class="headerlink" title="标注"></a>标注</h3><p>用法</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% label [class]@text %&#125;</span><br><span class="line"></span><br><span class="line">[class] : 可选参数，未指定则使用浏览器默认样式。支持的值有：default | primary | success | info | warning | danger</span><br><span class="line">text    : &#x27;success @text&#x27; 和 &#x27;success@text&#x27; 的效果是一样的。</span><br></pre></td></tr></table></figure>

<p>示例</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% label default @default %&#125;</span><br><span class="line">&#123;% label primary @primary %&#125;</span><br><span class="line">&#123;% label success @success %&#125;</span><br><span class="line"><span class="emphasis">*&#123;% label info @italic + info %&#125;*</span></span><br><span class="line"><span class="strong">**&#123;% label warning @bold + warning %&#125;**</span></span><br><span class="line">~~&#123;% label danger @strikethrough + danger %&#125;~~</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">mark</span>&gt;</span></span>mark<span class="language-xml"><span class="tag">&lt;/<span class="name">mark</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li><mark class="label default">default</mark></li>
<li><mark class="label primary">primary</mark></li>
<li><mark class="label success">success</mark></li>
<li><em><mark class="label info">italic + info</mark></em></li>
<li><strong><mark class="label warning">bold + warning</mark></strong></li>
<li><del><mark class="label danger">strikethrough + danger</mark></del></li>
<li><mark>mark</mark></li>
</ul>
<h3 id="Mermaid"><a href="#Mermaid" class="headerlink" title="Mermaid"></a>Mermaid</h3><p>Mermaid 是一个用于画流程图、状态图、时序图、甘特图等的库，使用 JS 进行本地渲染。</p>
<p>用法</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% mermaid type %&#125;</span><br><span class="line">something</span><br><span class="line">&#123;% endmermaid %&#125;</span><br><span class="line"></span><br><span class="line">type : 类型</span><br></pre></td></tr></table></figure>

<p>可以在<a href="https://mermaid-js.github.io/mermaid/">这里</a>查阅支持哪些图及其详细用法。</p>
<p>示例</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% mermaid pie %&#125;</span><br><span class="line">&quot;Dogs&quot; : 386</span><br><span class="line">&quot;Cats&quot; : 85</span><br><span class="line">&quot;Rats&quot; : 15</span><br><span class="line">&#123;% endmermaid %&#125;</span><br></pre></td></tr></table></figure>

<pre class="mermaid">
pie
&quot;Dogs&quot; : 386
&quot;Cats&quot; : 85
&quot;Rats&quot; : 15
</pre>

<h3 id="注释说明"><a href="#注释说明" class="headerlink" title="注释说明"></a>注释说明</h3><p>用法</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note [class] [no-icon] [summary] %&#125;</span><br><span class="line">任何内容</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">[class]   : 可选参数。支持的值有：default | primary | success | info | warning | danger</span><br><span class="line">[no-icon] : 可选参数。不显示 icon</span><br><span class="line">[summary] : 可选参数。</span><br></pre></td></tr></table></figure>

<p>示例</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note %&#125;</span><br><span class="line">假装是四级标题，&#123;% label @未定义 %&#125;样式</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<div class="note "><p>假装是四级标题，<mark class="label ">未定义</mark>样式</p>
</div>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note default %&#125;</span><br><span class="line">假装是四级标题，&#123;% label default @default %&#125; 样式</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<div class="note default"><p>假装是四级标题，<mark class="label default">default</mark> 样式</p>
</div>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note primary %&#125;</span><br><span class="line">假装是四级标题，&#123;% label primary @primary %&#125; 样式</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<div class="note primary"><p>假装是四级标题，<mark class="label primary">primary</mark> 样式</p>
</div>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note success %&#125;</span><br><span class="line">假装是四级标题，&#123;% label success @success %&#125; 样式</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<div class="note success"><p>假装是四级标题，<mark class="label success">success</mark> 样式</p>
</div>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note info %&#125;</span><br><span class="line">假装是四级标题，&#123;% label info @info %&#125; 样式</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<div class="note info"><p>假装是四级标题，<mark class="label info">info</mark> 样式</p>
</div>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note warning %&#125;</span><br><span class="line">假装是四级标题，&#123;% label warning @warning %&#125; 样式</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<div class="note warning"><p>假装是四级标题，<mark class="label warning">warning</mark> 样式</p>
</div>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note danger %&#125;</span><br><span class="line">假装是四级标题，&#123;% label danger @danger %&#125; 样式</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<div class="note danger"><p>假装是四级标题，<mark class="label danger">danger</mark> 样式</p>
</div>

<h3 id="嵌入-PDF"><a href="#嵌入-PDF" class="headerlink" title="嵌入 PDF"></a>嵌入 PDF</h3><p>用法</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% pdf url [height] %&#125;</span><br><span class="line"></span><br><span class="line">url      : PDF 文件的绝对路径。</span><br><span class="line">[height] : 可选参数。高度（单位：px）。</span><br></pre></td></tr></table></figure>

<p>示例</p>
<p>暂无</p>
]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 PlanetScale 和 Vercel 搭建 Umami 统计</title>
    <url>/archives/planetscale-vercel-umami.html</url>
    <content><![CDATA[<p>本文基本可以视作是 <a href="https://geekplux.com/">GeekPlux</a> 文章的中文翻译，插图亦来自于<a href="https://geekplux.com/posts/setup-umami">原文</a>。</p>
<span id="more"></span>

<h3 id="前置要求"><a href="#前置要求" class="headerlink" title="前置要求"></a>前置要求</h3><ul>
<li><a href="https://planetscale.com/">PlanetScale</a> 账号，免费版仅支持创建一个数据库</li>
<li><a href="https://vercel.com/">Vercel</a> 账号</li>
<li><a href="https://github.com/">GitHub</a> 账号</li>
</ul>
<h3 id="PlanetScale-设置"><a href="#PlanetScale-设置" class="headerlink" title="PlanetScale 设置"></a>PlanetScale 设置</h3><p>在面板创建一个数据库，命名为 umami-db</p>
<p><img data-src="https://img.zs.fyi/2308/planetscale.webp" alt="创建数据库" loading="lazy"></p>
<h3 id="GitHub-设置"><a href="#GitHub-设置" class="headerlink" title="GitHub 设置"></a>GitHub 设置</h3><p>Fork <a href="https://github.com/umami-software/umami">umami</a> 项目到自己账号，同时建议安装 GitHub 应用 <a href="https://github.com/apps/pull">Pull</a></p>
<h3 id="Vercel-设置"><a href="#Vercel-设置" class="headerlink" title="Vercel 设置"></a>Vercel 设置</h3><p>将 Vercel 与 GitHub 账号关联，并导入上面 fork 的项目</p>
<p>此时，Vercel 尝试自动部署但应该会失败，因为还没设置好数据库连接</p>
<h3 id="数据库关联"><a href="#数据库关联" class="headerlink" title="数据库关联"></a>数据库关联</h3><p>回到 PlanetScale 面板，点击 Integrations 并选择 Vercel，选中 umami-db 和对应的 Vercel 项目</p>
<p>至于框架，可能名称与下图不完全相同，选中带有 Prisma 的即可</p>
<p><img data-src="https://img.zs.fyi/2308/integrate.webp" alt="数据库关联" loading="lazy"></p>
<h3 id="Umami-设置"><a href="#Umami-设置" class="headerlink" title="Umami 设置"></a>Umami 设置</h3><p>最后，回到 Vercel 面板，点击重新部署</p>
<p>部署成功后，可以添加自定义域名</p>
<p>umami 后台默认用户名为 admin，默认密码为 umami</p>
<p>具体如何使用请参考 <a href="https://umami.is/docs">umami 文档</a></p>
]]></content>
      <tags>
        <tag>PlanetScale</tag>
        <tag>Vercel</tag>
        <tag>Umami</tag>
      </tags>
  </entry>
  <entry>
    <title>机场订阅聚合与转换</title>
    <url>/archives/proxy-aggregation-and-conversion.html</url>
    <content><![CDATA[<p>主要用到的工具是<a href="https://fcnext.console.aliyun.com/cn-hongkong/services">阿里云函数计算</a>和 <a href="https://github.com/tindy2013/subconverter">subconverter</a>，前者用于机场订阅聚合，后者用于转换订阅。参考这篇<a href="https://www.ohyee.cc/post/note_lambda_v2ray_clash">博客</a>和 subconverter 文档写成。</p>
<span id="more"></span>

<h3 id="订阅聚合"><a href="#订阅聚合" class="headerlink" title="订阅聚合"></a>订阅聚合</h3><p>进入函数计算后台，先切换到中国香港集群。在“服务及函数”中创建服务，填写名称，如 proxy，其他保持默认即可。</p>
<p>在刚创建的服务中新建函数，选择“使用内置运行时创建”，函数名称设置为 subscribe。</p>
<p>确保选中“处理 HTTP 请求”，然后在下方“高级配置”中将“实例并发度”设置为 100，“执行超时时间”设置为推荐的 600。</p>
<p>在“环境变量”中添加 <code>URL</code> 变量，值为订阅链接，有多个链接的话用<code>|</code>分隔。再添加一个 <code>TOKEN</code> 变量，值的格式为 <code>&lt;token_name&gt;=&lt;token&gt;</code>，同样以 <code>|</code> 分隔。上面博客中有相关设置截图。</p>
<p>完成后，点击“创建”会进入代码编辑页面，用的是 VS Code Server。调出终端，执行 <code>npm install axios</code>。修改 <code>index.js</code> 为以下代码，记得点击部署函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios&#x27;</span>);</span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">timeout</span> = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">URLS</span> = (process.<span class="property">env</span>.<span class="property">URL</span> || <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  .<span class="title function_">split</span>(<span class="string">&#x27;|&#x27;</span>)</span><br><span class="line">  .<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">length</span> &gt; <span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">TOKENS</span> = <span class="title class_">Object</span>.<span class="title function_">assign</span>(</span><br><span class="line">  &#123;&#125;,</span><br><span class="line">  ...(process.<span class="property">env</span>.<span class="property">TOKEN</span> || <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    .<span class="title function_">split</span>(<span class="string">&#x27;|&#x27;</span>)</span><br><span class="line">    .<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">length</span> &gt; <span class="number">0</span>)</span><br><span class="line">    .<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="title function_">indexOf</span>(<span class="string">&#x27;=&#x27;</span>) !== -<span class="number">1</span>)</span><br><span class="line">    .<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>))</span><br><span class="line">    .<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> (&#123; [item[<span class="number">1</span>]]: item[<span class="number">0</span>] &#125;))</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">TESTSUBSCRIBE</span>=<span class="string">&#x27;dm1lc3M6Ly9ldzBLSUNBaWRpSTZJQ0l5SWl3TkNpQWdJbkJ6SWpvZ0l1YTFpK2l2bFNJc0RRb2dJQ0poWkdRaU9pQWlNVEkzTGpBdU1DNHhJaXdOQ2lBZ0luQnZjblFpT2lBaU1USXpORFVpTEEwS0lDQWlhV1FpT2lBaU16QXdaRGN6T1RZdE1tUXlPQzAwWmpKaUxUaG1PV1l0TXpjMU5UQTVZbVZpTVROaElpd05DaUFnSW1GcFpDSTZJQ0l3SWl3TkNpQWdJbk5qZVNJNklDSmhkWFJ2SWl3TkNpQWdJbTVsZENJNklDSjBZM0FpTEEwS0lDQWlkSGx3WlNJNklDSnViMjVsSWl3TkNpQWdJbWh2YzNRaU9pQWlJaXdOQ2lBZ0luQmhkR2dpT2lBaUlpd05DaUFnSW5Sc2N5STZJQ0lpTEEwS0lDQWljMjVwSWpvZ0lpSU5DbjA9DQo=&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fromBase64</span> = (<span class="params">s</span>) =&gt; <span class="title class_">Buffer</span>.<span class="title function_">from</span>(s, <span class="string">&#x27;base64&#x27;</span>).<span class="title function_">toString</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">toBase64</span> = (<span class="params">s</span>) =&gt; <span class="title class_">Buffer</span>.<span class="title function_">from</span>(s).<span class="title function_">toString</span>(<span class="string">&#x27;base64&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">removePrefix</span> = (<span class="params">s, p</span>) =&gt; s.<span class="title function_">startsWith</span>(p) ? s.<span class="title function_">slice</span>(p.<span class="property">length</span>) : s;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">get</span> = (<span class="params">url, resolve, reject</span>) =&gt;</span><br><span class="line">  axios</span><br><span class="line">    .<span class="title function_">get</span>(url)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">resp</span>) =&gt;</span> resp.<span class="property">data</span>)</span><br><span class="line">    .<span class="title function_">then</span>(resolve)</span><br><span class="line">    .<span class="title function_">catch</span>(reject);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">toBase64</span>(</span><br><span class="line">      (</span><br><span class="line">        <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(</span><br><span class="line">          <span class="variable constant_">URLS</span>.<span class="title function_">map</span>(</span><br><span class="line">            <span class="function">(<span class="params">url</span>) =&gt;</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="title function_">get</span>(url, resolve, reject))</span><br><span class="line">          )</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">        .<span class="title function_">map</span>(<span class="function">(<span class="params">encoded</span>) =&gt;</span></span><br><span class="line">          <span class="title function_">fromBase64</span>(encoded)</span><br><span class="line">            .<span class="title function_">split</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            .<span class="title function_">filter</span>(<span class="function">(<span class="params">line</span>) =&gt;</span> line.<span class="property">length</span> &gt; <span class="number">0</span>)</span><br><span class="line">        )</span><br><span class="line">        .<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> pre.<span class="title function_">concat</span>(cur))</span><br><span class="line">        .<span class="title function_">join</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    );</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">return</span> e.<span class="title function_">toString</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">handler</span> = <span class="keyword">async</span> (req, resp, context) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">path</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">removePrefix</span>(req.<span class="property">path</span>, <span class="string">&quot;/subscribe&quot;</span>) === <span class="string">&#x27;/test&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">clientIP</span>);</span><br><span class="line">    resp.<span class="title function_">send</span>(<span class="variable constant_">TESTSUBSCRIBE</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> token = req.<span class="property">queries</span>[<span class="string">&#x27;token&#x27;</span>];</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">URLS</span>, <span class="variable constant_">TOKENS</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">clientIP</span>, token, <span class="variable constant_">TOKENS</span>[token]);</span><br><span class="line">  <span class="keyword">const</span> res = !!<span class="variable constant_">TOKENS</span>[token] ? <span class="keyword">await</span> <span class="title function_">getData</span>() : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  resp.<span class="title function_">send</span>(res);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h3><p>回到函数计算主管理界面，在“域名管理”中添加自定义域名。设置好域名解析后，修改路由配置为 <code>/subscribe</code>，其他栏下拉进行相应选择。完成后，再照此添加一条路由 <code>/subscribe/*</code>。你也可以为域名申请并启用证书，最后点击创建即可。</p>
<p>绑定域名后，可通过以下形式调用：</p>
<ul>
<li><code>https://fc.example.com/subscribe/test</code></li>
<li><code>https://fc.example.com/subscribe?token=&lt;token&gt;</code></li>
</ul>
<p>前者返回测试订阅，方便调试；后者返回打包后的节点信息。</p>
<h3 id="搭建-subconverter"><a href="#搭建-subconverter" class="headerlink" title="搭建 subconverter"></a>搭建 subconverter</h3><p>那篇博客中 subconverter 部分我试过，经常报错，也懒得去查阿里云的文档。干脆，直接用 <a href="https://github.com/tindy2013/subconverter/blob/master/README-docker.md">Docker</a> 搭建算了。你可以通过 <a href="https://www.composerize.com/">Composerize</a> 网站，将 Docker 命令转换成 Docker Compose 更方便些。</p>
<h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><p>根据<a href="https://github.com/tindy2013/subconverter/blob/master/README-cn.md">相关文档</a>，调用地址中的 <code>url</code> 参数和远程引用的 <code>config</code> 文件链接，都必须经过 <a href="https://www.urlencoder.org/">URL Encode</a> 处理。以下面为例进行简单说明。</p>
<p><code>https://&lt;your_subconverter_server&gt;/sub?target=clash&amp;new_name=true&amp;url=&lt;your_subscription_link&gt;&amp;filename=&lt;filename&gt;&amp;interval=21600&amp;insert=false&amp;config=https%3A%2F%2Fraw.githubusercontent.com%2FFDUZS%2Fsubconverter-config%2Fmain%2Fconfig.ini</code></p>
<ul>
<li><code>&lt;your_subconverter_server&gt;</code> 为上面搭建的 subconverter 后端，如果用 IP 访问或无证书，则为 <code>http</code></li>
<li><code>url</code> 为上面订阅聚合链接，记得带 token 参数并 <a href="https://www.urlencoder.org/">URL Encode</a> 处理</li>
<li><code>filename</code> 是在 <a href="https://docs.cfw.lbyczf.com/">Clash for Windows</a> 等软件中导入后显示的名字</li>
<li><code>interval</code> 是在 <a href="https://docs.cfw.lbyczf.com/">Clash for Windows</a> 等软件中导入后自动更新周期，单位为秒</li>
<li><code>config</code> 即外部配置文件，需经 <a href="https://www.urlencoder.org/">URL Encode</a> 处理，可直接使用上述例子中的</li>
<li>其他更多参数可查询相关文档</li>
</ul>
]]></content>
      <tags>
        <tag>代理</tag>
        <tag>subconverter</tag>
      </tags>
  </entry>
  <entry>
    <title>常用代理设置</title>
    <url>/archives/proxy-configurations.html</url>
    <content><![CDATA[<p>一些常用的代理设置方式，记录备用。</p>
<span id="more"></span>

<div class="note info"><p>桌面端还在用其他代理软件的新手，强烈建议将其换成 Clash for Windows 并启用 <a href="https://docs.cfw.lbyczf.com/contents/tun.html">TUN 模式</a>。那么，下面的内容除了 Git over SSH 都不用考虑了，避免浪费时间作无意义的折腾。</p>
</div>

<h3 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置</span></span><br><span class="line">set http_proxy=http://127.0.0.1:1080</span><br><span class="line">set https_proxy=http://127.0.0.1:1080</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取消</span></span><br><span class="line">set http_proxy=</span><br><span class="line">set https_proxy=</span><br></pre></td></tr></table></figure>

<h3 id="PowerShell"><a href="#PowerShell" class="headerlink" title="PowerShell"></a>PowerShell</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$env:http_proxy</span>=<span class="string">&quot;127.0.0.1:1080&quot;</span></span><br><span class="line"><span class="variable">$env:https_proxy</span>=<span class="string">&quot;127.0.0.1:1080&quot;</span></span><br></pre></td></tr></table></figure>

<p>为了方便，将下面函数添加到 <code>$PROFILE</code> 中就可以通过 proxy 和 unproxy 来实现设置与取消代理了。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Set and unset proxy for PowerShell</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">proxy</span></span> &#123;</span><br><span class="line">    <span class="keyword">param</span> (</span><br><span class="line">        <span class="variable">$ssr</span> = <span class="string">&quot;127.0.0.1:1080&quot;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">New-Item</span> <span class="literal">-Path</span> Env: <span class="literal">-Name</span> http_proxy <span class="literal">-Value</span> <span class="variable">$ssr</span></span><br><span class="line">    <span class="built_in">New-Item</span> <span class="literal">-Path</span> Env: <span class="literal">-Name</span> https_proxy <span class="literal">-Value</span> <span class="variable">$ssr</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unproxy</span></span> &#123;</span><br><span class="line">    <span class="built_in">Remove-Item</span> <span class="literal">-Path</span> Env:\http_proxy</span><br><span class="line">    <span class="built_in">Remove-Item</span> <span class="literal">-Path</span> Env:\https_proxy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Git-Bash"><a href="#Git-Bash" class="headerlink" title="Git Bash"></a>Git Bash</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置</span></span><br><span class="line"><span class="built_in">export</span> http_proxy=http://127.0.0.1:1080</span><br><span class="line"><span class="built_in">export</span> https_proxy=http://127.0.0.1:1080</span><br><span class="line"><span class="comment"># 取消</span></span><br><span class="line"><span class="built_in">unset</span> http_proxy https_proxy</span><br></pre></td></tr></table></figure>

<h3 id="All-APPs"><a href="#All-APPs" class="headerlink" title="All APPs"></a>All APPs</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置</span></span><br><span class="line">netsh winhttp import proxy source=ie</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取消</span></span><br><span class="line">netsh winhttp reset proxy</span><br></pre></td></tr></table></figure>

<h3 id="为-Git-设置代理"><a href="#为-Git-设置代理" class="headerlink" title="为 Git 设置代理"></a>为 Git 设置代理</h3><h4 id="Git-over-HTTPS"><a href="#Git-over-HTTPS" class="headerlink" title="Git over HTTPS"></a>Git over HTTPS</h4><p>设置代理：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果是 socks5 代理的话</span></span><br><span class="line">git config --global http.proxy socks5h://127.0.0.1:1080</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">http 代理仅需将 socks5h 改为 http</span></span><br><span class="line">git config --global http.proxy http://127.0.0.1:1080</span><br></pre></td></tr></table></figure>

<p>取消代理：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br></pre></td></tr></table></figure>

<p>也可以仅为 GitHub 设置代理</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global http.https://github.com.proxy socks5h://127.0.0.1:1080</span><br></pre></td></tr></table></figure>

<p>socks5h 和 socks5 的区别：</p>
<blockquote>
<p>In a proxy string, socks5h:&#x2F;&#x2F; and socks4a:&#x2F;&#x2F; mean that the hostname is resolved by the SOCKS server. socks5:&#x2F;&#x2F; and socks4:&#x2F;&#x2F; mean that the hostname is resolved locally. socks4a:&#x2F;&#x2F; means to use SOCKS4a, which is an extension of SOCKS4.</p>
</blockquote>
<p>来源：<a href="https://github.com/urllib3/urllib3/issues/1035">Differentiate socks5h from socks5 and socks4a from socks4 when handling proxy string</a></p>
<h4 id="Git-over-SSH"><a href="#Git-over-SSH" class="headerlink" title="Git over SSH"></a>Git over SSH</h4><p>需要修改 <code>~/.ssh/config</code> 文件</p>
<p>如果仅为 GitHub 设置代理，且使用 socks5 代理的话</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    # Port 22</span><br><span class="line">    User git</span><br><span class="line">    IdentityFile ~/.ssh/git_ed25519</span><br><span class="line">    ProxyCommand connect -S 127.0.0.1:1080 -a none %h %p</span><br></pre></td></tr></table></figure>

<p>如果 22 端口禁止访问，报 <code>kex_exchange_identification: Connection closed by remote host</code> 错误时，替换为</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">    HostName ssh.github.com</span><br><span class="line">    Port 443</span><br><span class="line">    User git</span><br><span class="line">    IdentityFile ~/.ssh/git_ed25519</span><br><span class="line">    ProxyCommand connect -S 127.0.0.1:1080 -a none %h %p</span><br></pre></td></tr></table></figure>

<p>这里 <code>-S</code> 表示使用 socks5 代理，如果是 http 代理则为 <code>-H</code>。connect 工具 <a href="https://gitforwindows.org/">Git for Windows</a> 自带。</p>
<p>我自己的话，则是设置成这样：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">    HostName ssh.github.com</span><br><span class="line">    Port 443</span><br><span class="line">    User git</span><br><span class="line">    IdentityFile ~/.ssh/git_ed25519</span><br><span class="line">    ProxyCommand connect -S 127.0.0.1:1080 -a none %h %p</span><br><span class="line"></span><br><span class="line">Host github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    # Port 22</span><br><span class="line">    User git</span><br><span class="line">    IdentityFile ~/.ssh/git_ed25519</span><br><span class="line">    ProxyCommand connect -S 127.0.0.1:1080 -a none %h %p</span><br><span class="line"></span><br><span class="line">Host *</span><br><span class="line">    # PreferredAuthentications publickey</span><br><span class="line">    ServerAliveInterval 30</span><br><span class="line">    TCPKeepAlive yes</span><br></pre></td></tr></table></figure>

<p>来源：<a href="https://gist.github.com/laispace/666dd7b27e9116faece6">laispace&#x2F;git 设置和取消代理</a></p>
<!-- [TUN 模式]: https://docs.cfw.lbyczf.com/contents/tun.html -->
]]></content>
      <tags>
        <tag>代理</tag>
        <tag>环境配置</tag>
      </tags>
  </entry>
  <entry>
    <title>Microsoft Visual C++ 14.0 or greater is required</title>
    <url>/archives/python-vc-14-0-error.html</url>
    <content><![CDATA[<p>「error: Microsoft Visual C++ 14.0 or greater is required」是不是令你痛苦不堪、眉头紧皱？是不是在万般搜索后仍旧无果？是不是网上经验教训一大堆，但是都不能从根本上解决问题？那么，以下可能是你能找到的最全面准确的办法。</p>
<span id="more"></span>

<p>Hi folks, if you have been referred from this <a href="https://learn.microsoft.com/en-us/answers/questions/419525/microsoft-visual-c-14-0-or-greater-is-required">question</a>, I have prepared a simplified guide for you. Here are the steps to follow:</p>
<ol>
<li>Ensure that you have the latest version of setuptools installed. Any version above 34.4.0 should work fine.</li>
<li>Download and install Microsoft C++ Build Tools from this <a href="https://visualstudio.microsoft.com/visual-cpp-build-tools/">page</a> and wait for the installation to complete.</li>
<li>Modify and install the necessary components by checking the &quot;Desktop development with C++&quot; workload (previously called &quot;C++ build tools&quot;) checkbox on the left side and installing the modules that are checked by default on the right side (please refer to the screenshot below). Then proceed with the installation.</li>
</ol>
<p><img data-src="https://img.zs.fyi/2309/ULEAdYbnBV.png" alt="Visual Studio Build Tools 2022" loading="lazy"></p>
<h3 id="Python-版本"><a href="#Python-版本" class="headerlink" title="Python 版本"></a>Python 版本</h3><p>以我正在使用的 <code>Python 3.7.6</code> 为例。</p>
<h3 id="Visual-C-版本"><a href="#Visual-C-版本" class="headerlink" title="Visual C++ 版本"></a>Visual C++ 版本</h3><p>与上面相对应，Visual C++ 版本应为 <code>14.x</code>。</p>
<p>为什么是 14.x 呢？这是因为目前有 14.0.X、14.16.X、14.27.x 三个版本，它们分别是 Visual Studio 2015，Visual Studio 2017，Visual Studio 2019 自带的编译工具。并且，根据官方的描述</p>
<blockquote>
<p>Visual C++ 2015, 2017 and 2019 all share the same redistributable files.</p>
<p>For example, installing the Visual C++ 2019 redistributable will affect programs built with Visual C++ 2015 and 2017 also. However, installing the Visual C++ 2015 redistributable will not replace the newer versions of the files installed by the Visual C++ 2017 and 2019 redistributables.</p>
</blockquote>
<p>你安装一个就行了。</p>
<p>以我安装的 <code>14.27.29016.0</code> 为例。</p>
<h3 id="三者对应关系"><a href="#三者对应关系" class="headerlink" title="三者对应关系"></a>三者对应关系</h3><table>
<thead>
  <tr>
    <th colspan="2">Visual C++</th>
    <th>CPython</th>
    <th>Visual Studio</th>
  </tr>
</thead>
<tbody>
  <tr>
    <td rowspan="3">14.x</td>
    <td>14.27.x</td>
    <td rowspan="3">3.5, 3.6, 3.7, 3.8</td>
    <td>2019</td>
  </tr>
  <tr>
    <td>14.16.x</td>
    <td>2017</td>
  </tr>
  <tr>
    <td>14.0.x</td>
    <td>2015</td>
  </tr>
  <tr>
    <td colspan="2">10</td>
    <td>3.3, 3.4</td>
    <td>2010</td>
  </tr>
  <tr>
    <td colspan="2">9</td>
    <td>2.6, 2.7, 3.0, 3.1, 3.2</td>
    <td>2008</td>
  </tr>
</tbody>
</table>

<h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><p><mark>注意</mark>：以 Python 3.7.6，只安装（不用费劲安装 Visual Studio 2019）Microsoft Visual C++ 14.2 为例。</p>
<ol>
<li><code>pip install --upgrade setuptools</code> 确保 setuptools 版本为 34.4.0 及以上</li>
<li>到<a href="https://visualstudio.microsoft.com/downloads/">下载页面</a>往下翻找到 Tools for Visual Studio，点开后下载最底下的 Build Tools for Visual Studio 2019。当然，你也可以直接到<a href="https://visualstudio.microsoft.com/visual-cpp-build-tools/">这里</a>下载 Microsoft C++ Build Tools。点击运行后，应该会提示需要先下载一些文件</li>
<li>勾选左侧最上方 C++ build tools，然后查看右侧，确保 MSVC v142 - VS 2019 C++ x64&#x2F;x86 build tools 和 Windows 10 SDK 被选中。默认情况下应该不需要动，直接点击安装，等待完成即可</li>
</ol>
<p><img data-src="https://img.zs.fyi/2307/VS-Build-Tools-2019.png" alt="VS-Build-Tools-2019" loading="lazy"></p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li><p>Python 官方文档：<a href="https://wiki.python.org/moin/WindowsCompilers#Which_Microsoft_Visual_C.2B-.2B-_compiler_to_use_with_a_specific_Python_version_.3F">Which Microsoft Visual C++ compiler to use with a specific Python version?</a></p>
</li>
<li><p>各版本 Visual C++ 下载地址：<a href="https://support.microsoft.com/en-us/help/2977003/the-latest-supported-visual-c-downloads">The latest supported Visual C++ downloads</a></p>
</li>
<li><p>Visual Studio 2017 及之前的版本下载地址：<a href="https://visualstudio.microsoft.com/vs/older-downloads/">Still want an older version?</a></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>环境配置</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Scoop 不完全上手指南</title>
    <url>/archives/scoop-guidebook.html</url>
    <content><![CDATA[<div class="note info"><p>以下基本上都是对 <a href="https://github.com/lukesampson/scoop/wiki">Wiki</a> 的整理，调整顺序的同时加入一些自己的理解，无语言障碍可直接到 GitHub 或<a href="https://scoop.netlify.com/">官方文档</a>阅读。</p>
</div>

<span id="more"></span>

<h3 id="Scoop-是什么"><a href="#Scoop-是什么" class="headerlink" title="Scoop 是什么"></a>Scoop 是什么</h3><p>借用 Mike Zick 对 Cygwin 和 MSYS 的<a href="http://sourceforge.net/mailarchive/forum.php?thread_name=200506130821.11185.mszick@morethan.org&forum_name=mingw-msys">描述</a>，他对 Scoop 作了一个类比描述：</p>
<blockquote>
<p>Scoop is an installer</p>
<p>The goal of Scoop is to let you use Unix-y programs in a normal Windows environment</p>
</blockquote>
<p>并且他也称，Scoop 并不是一个包管理器，而是通过读取 JSON 描述文件来安装程序及其依赖。Scoop 专注于开源和命令行开发工具，不符合其标准的不可能进入 main bucket（Scoop 安装后便自带的），因而虽然通过 <code>scoop install skype</code> 也能安装 Skype，但是只能放在 extra bucket 中。</p>
<p>在与 <a href="https://chocolatey.org/">Chocolatey</a> 对比时，他提到了 Scoop 的一些特性，其中不乏吸引我选择使用它而非前者的因素。</p>
<ol>
<li><p>Scoop 默认安装在用户文件夹下（<code>~/scoop/</code>），那么在权限方面就很友好，安装程序时不会跳出 UAC 提醒，不需要管理员权限。</p>
</li>
<li><p>不会对路径造成污染。像是平常手动安装以及通过 Chocolatey 安装程序时，安装目录散落各地，有在 <code>C:/Program Files</code> 和 <code>C:/Program Files (x86)</code> 的，也有在 <code>C:/Users/&lt;username&gt;/AppData</code> 的，还有在 <code>C:/ProgramData</code> 的。其实这些安装位置都是跟 &quot;install for all users&quot; 和 &quot;install only for me&quot; 的区别有关的，背后对应的是不同的权限（我瞎说的），但是看上去非常乱也不好管理。Scoop 则是将程序的 shims（我理解为指向所安装软件当前版本的快捷方式，非科班的我面对这些术语流下了眼泪）集中放在一个文件夹中统一管理，并将其添加至环境变量。</p>
</li>
<li><p>相比包管理器和应用仓库更简单（simpler）。使用 Scoop 最简单的形式只需 Git + JSON 就够了，通过 Git 读取同步 repo 中描述如何安装某个程序的文件（里面写明了程序的版本、下载地址、解压目录、bin 及安装前后的工作等），然后 <code>scoop install &lt;app&gt;</code> 完事。</p>
</li>
<li><p>可安装程序的某个特定版本并可以在版本间切换。如 <code>scoop install python27</code> 便可以安装 Python 2.7 版本（当然得先通过 <code>scoop bucket add versions</code> 添加 versions bucket），同时 <code>scoop install python</code> 安装的则是 Python 的最新版本。</p>
</li>
</ol>
<h3 id="安装-Scoop"><a href="#安装-Scoop" class="headerlink" title="安装 Scoop"></a>安装 Scoop</h3><p>其实安装之前，应该先将 Scoop 中的几个重要概念讲清楚的，比如上面多次提到的 bucket。但是，既然是上手指南，实用为先，概念可以暂先这样理解：所谓 app 就是要安装的一个应用程序，app manifest 则是含有某个应用程序安装信息（如上所述，程序版本、下载地址等）的 JSON 文件，bucket 则是存放这些 manifest 的 repo（如托管在 GitHub 上的 <a href="https://github.com/ScoopInstaller/Main/tree/master/bucket">main bucket</a>）。</p>
<p>首先，唤出 PowerShell（Windows 10 下都可以），<code>set-executionpolicy remotesigned -scope currentuser</code>，然后选择允许（Y）执行本地脚本。</p>
<ul>
<li>如果是想安装在默认位置，即 <code>C:/Users/&lt;username&gt;/scoop</code> 的话，直接运行</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Invoke-Expression</span> (<span class="built_in">New-Object</span> System.Net.WebClient).DownloadString(<span class="string">&#x27;https://get.scoop.sh&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>或者 <code>iwr -useb get.scoop.sh | iex</code> 即可。</p>
<ul>
<li>如果是想自定义安装位置，如 <code>D:/Scoop</code>，那么逐条运行下面命令</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$env:SCOOP</span>=<span class="string">&#x27;D:\Scoop&#x27;</span></span><br><span class="line">[<span class="type">environment</span>]::setEnvironmentVariable(<span class="string">&#x27;SCOOP&#x27;</span>,<span class="variable">$env:SCOOP</span>,<span class="string">&#x27;User&#x27;</span>)</span><br><span class="line"><span class="built_in">iwr</span> <span class="literal">-useb</span> get.scoop.sh | <span class="built_in">iex</span></span><br></pre></td></tr></table></figure>

<p>至于如何安装全局应用到自定义目录就先不说了。至此，如无报错信息，Scoop 安装完成。</p>
<h3 id="卸载-Scoop"><a href="#卸载-Scoop" class="headerlink" title="卸载 Scoop"></a>卸载 Scoop</h3><p>卸载非常简单，只需运行 <code>scoop uninstall scoop</code> 即可。</p>
<h3 id="使用-Scoop"><a href="#使用-Scoop" class="headerlink" title="使用 Scoop"></a>使用 Scoop</h3><p>记得随时使用 <code>scoop help</code> 查看帮助信息</p>
<h4 id="scoop-search"><a href="#scoop-search" class="headerlink" title="scoop search"></a>scoop search</h4><p>查找软件，通常是想看看某个程序是否可以通过 Scoop 安装</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop search &lt;app&gt;</span><br></pre></td></tr></table></figure>

<p>如</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop search python</span><br></pre></td></tr></table></figure>

<h4 id="scoop-install"><a href="#scoop-install" class="headerlink" title="scoop install"></a>scoop install</h4><p>安装应用程序，分两种情况：</p>
<ul>
<li>只为当前用户安装，安装在 Scoop 目录下的 apps 文件夹</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop install &lt;app&gt;</span><br></pre></td></tr></table></figure>

<p>如</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop install python</span><br></pre></td></tr></table></figure>

<ul>
<li>为所有用户安装，默认安装在 <code>C:/ProgramData/scoop</code> 或者是上文提到的自定义的全局应用安装目录，并且需要以管理员身份运行</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop install &lt;app&gt; <span class="literal">-g</span></span><br></pre></td></tr></table></figure>

<p>如</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop install python <span class="literal">-g</span></span><br></pre></td></tr></table></figure>

<p>如果要安装特定版本的应用，比如说 <code>curl 7.56.1</code>，则应该这样</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop install <span class="built_in">curl</span>@<span class="number">7.56</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h4 id="scoop-uninstall"><a href="#scoop-uninstall" class="headerlink" title="scoop uninstall"></a>scoop uninstall</h4><p>卸载某一程序</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop uninstall &lt;app&gt;</span><br></pre></td></tr></table></figure>

<p>如</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop uninstall python</span><br></pre></td></tr></table></figure>

<p>卸载程序并移除所有配置文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop uninstall &lt;app&gt; <span class="literal">-p</span></span><br></pre></td></tr></table></figure>

<p>如</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop uninstall python <span class="literal">-p</span></span><br></pre></td></tr></table></figure>

<p>卸载全局安装的应用程序，需以管理员身份运行</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop uninstall &lt;app&gt; <span class="literal">-g</span></span><br></pre></td></tr></table></figure>

<p>如</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop uninstall python <span class="literal">-g</span></span><br></pre></td></tr></table></figure>

<h4 id="scoop-update"><a href="#scoop-update" class="headerlink" title="scoop update"></a>scoop update</h4><p>更新 Scoop 及所有 bucket 但不更新 app</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop update</span><br></pre></td></tr></table></figure>

<p>更新某一特定程序</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop update &lt;app&gt;</span><br></pre></td></tr></table></figure>

<p>如</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop update python</span><br></pre></td></tr></table></figure>

<p>更新 Scoop、bucket 及所有程序</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop update *</span><br></pre></td></tr></table></figure>

<p>更新全局安装的程序，需要以管理员身份运行</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop update &lt;app&gt; <span class="literal">-g</span></span><br></pre></td></tr></table></figure>

<p>如</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop update python <span class="literal">-g</span></span><br></pre></td></tr></table></figure>

<h4 id="scoop-list"><a href="#scoop-list" class="headerlink" title="scoop list"></a>scoop list</h4><p>查看已安装的程序</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop list</span><br></pre></td></tr></table></figure>

<h4 id="scoop-status"><a href="#scoop-status" class="headerlink" title="scoop status"></a>scoop status</h4><p>查看哪些程序可以升级</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop status</span><br></pre></td></tr></table></figure>

<h4 id="scoop-config"><a href="#scoop-config" class="headerlink" title="scoop config"></a>scoop config</h4><p>需要设置的一般也就是两个，aria2 开关以及 proxy 设置</p>
<p>开闭 aria2 <code>scoop config aria2-enabled true</code> or <code>scoop config aria2-enabled false</code>，但不建议开启，经常有各种奇奇怪怪的问题。同时，启用 aria2 前需要先安装 <code>scoop install aria2</code></p>
<p>proxy 设置，如 <code>scoop config proxy 127.0.0.1:1080</code></p>
<h4 id="scoop-home"><a href="#scoop-home" class="headerlink" title="scoop home"></a>scoop home</h4><p>查看某一程序的主页</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop home &lt;app&gt;</span><br></pre></td></tr></table></figure>

<p>如</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop home python</span><br></pre></td></tr></table></figure>

<p>便唤起浏览器，打开 Python <a href="https://www.python.org/">官网</a></p>
<h4 id="scoop-reset"><a href="#scoop-reset" class="headerlink" title="scoop reset"></a>scoop reset</h4><p>借用 Wiki <a href="https://github.com/lukesampson/scoop/wiki/Switching-Ruby-And-Python-Versions">例子</a></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先添加 versions bucket</span></span><br><span class="line">scoop bucket add versions</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同时安装 Python 2.7 和最新版本</span></span><br><span class="line">scoop install python27 python</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到 Python 2.7.x</span></span><br><span class="line">scoop reset python27</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到 Python 3.x</span></span><br><span class="line">scoop reset python</span><br></pre></td></tr></table></figure>

<h4 id="scoop-cleanup"><a href="#scoop-cleanup" class="headerlink" title="scoop cleanup"></a>scoop cleanup</h4><p>删除已安装软件的旧版本，如删除所有软件旧版本</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop cleanup *</span><br></pre></td></tr></table></figure>

<h4 id="scoop-cache"><a href="#scoop-cache" class="headerlink" title="scoop cache"></a>scoop cache</h4><p>清理软件缓存，通常是下载的软件安装包。以下命令清除所有缓存，即清空 Scoop 目录下的 cache 文件夹</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop cache <span class="built_in">rm</span> *</span><br></pre></td></tr></table></figure>

<h4 id="scoop-bucket"><a href="#scoop-bucket" class="headerlink" title="scoop bucket"></a>scoop bucket</h4><p>查看「已知库」</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop bucket known</span><br></pre></td></tr></table></figure>

<p>查看已经添加的库</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop bucket list</span><br></pre></td></tr></table></figure>

<p>删除已经添加的库</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop bucket <span class="built_in">rm</span> &lt;bucket&gt;</span><br></pre></td></tr></table></figure>

<p>添加库，分两种情况：</p>
<ul>
<li>添加「已知库」</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop bucket add &lt;bucket&gt;</span><br></pre></td></tr></table></figure>

<p>如添加上文提到的 versions 库</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop bucket add versions</span><br></pre></td></tr></table></figure>

<ul>
<li>添加第三方库</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop bucket add &lt;bucket&gt; &lt;bucket_url&gt;</span><br></pre></td></tr></table></figure>

<p>如添加 Ash258、chawyehsu 和我的库</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop bucket add Ash258 https://github.com/Ash258/Scoop<span class="literal">-Ash258</span>.git</span><br><span class="line">scoop bucket add dorado https://github.com/chawyehsu/dorado.git</span><br><span class="line">scoop bucket add spoon https://github.com/FDUZS/spoon.git</span><br></pre></td></tr></table></figure>

<h3 id="Scoop-进阶"><a href="#Scoop-进阶" class="headerlink" title="Scoop 进阶"></a>Scoop 进阶</h3><p>看完以上内容，入门足够。我也刚使用不到半年，认为进阶需要搞懂以下几点：</p>
<ol>
<li><p>App Manifest 创建并可以实现「自动更新」</p>
</li>
<li><p>&quot;Current&quot; 文件夹及背后设计思路</p>
</li>
<li><p>找出其设计缺陷之处，即让你不爽的点</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Windows</tag>
        <tag>Scoop</tag>
        <tag>软件推荐</tag>
      </tags>
  </entry>
  <entry>
    <title>加速 SSH 连接</title>
    <url>/archives/ssh-proxycommand-proxyjump.html</url>
    <content><![CDATA[<p>有时候，你想通过 SSH 连接花重金购买的远在大洋彼岸的虚拟服务器进行诸如编译固件、跑程序等操作的时候，而你发现本地网络与远程服务器的连接并不是那么稳定，那么可以通过以下两种方式提升 SSH 连接速度和稳定性。</p>
<span id="more"></span>

<h3 id="SSH-密钥生成"><a href="#SSH-密钥生成" class="headerlink" title="SSH 密钥生成"></a>SSH 密钥生成</h3><p>进入当前用户配置文件目录：<code>~/.ssh</code></p>
<p>Ed25519（推荐）</p>
<p>将下面尖括号及内部替换成想要的。<code>-f</code> 参数指定生成的文件名，如 <code>vps_ed25519</code>，<code>-C</code> 参数起注释（comment）作用。下同。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t ed25519 -f &lt;id&gt;_ed25519 -C &quot;&lt;comment&gt;&quot;</span><br></pre></td></tr></table></figure>

<p>RSA（仅推荐 2048 位以上）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -f &lt;id&gt;_rsa -C &quot;&lt;comment&gt;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="通过代理连接"><a href="#通过代理连接" class="headerlink" title="通过代理连接"></a>通过代理连接</h3><p>其实就是借助 <a href="https://man.openbsd.org/ssh_config.5#ProxyCommand">ProxyCommand</a> 这个选项来实现的，并且有几种不同的写法。而且，Windows 和 macOS 下的实现方式也不一样。</p>
<p>假定本地代理地址为 <code>127.0.0.1</code>，端口为 <code>1080</code>，代理方式为 <code>socks5</code>，要连接的远程主机用户为 <code>root</code>，主机 IP 为 <code>1.1.1.1</code>。</p>
<h4 id="Windows-connect"><a href="#Windows-connect" class="headerlink" title="Windows - connect"></a>Windows - connect</h4><p>如果下面无效的话请先安装 <a href="https://web.archive.org/web/20080516100455/http://www.meadowy.org/~gotoh/projects/connect">connect</a> 这个小工具并将其添加至环境变量，或者直接在 Git Bash 中操作。</p>
<p>先解释一下参数含义：<code>connect</code> 即是上面安装的工具，<code>-S</code> 表示使用 socks5 代理，<code>-a none</code> 表示本地代理无需认证，<code>%h %p</code> 分别对应远程主机名和端口。</p>
<ul>
<li>写法一</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -o &quot;ProxyCommand connect -S 127.0.0.1:1080 -a none %h %p&quot; root@1.1.1.1</span><br></pre></td></tr></table></figure>

<ul>
<li>写法二</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -o ProxyCommand=&quot;connect -S 127.0.0.1:1080 -a none %h %p&quot; root@1.1.1.1</span><br></pre></td></tr></table></figure>

<ul>
<li>写法三</li>
</ul>
<p>写到 <code>~/.ssh/config</code> 文件中，如针对 GitHub 可以这样写：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">    User git</span><br><span class="line">    Hostname github.com</span><br><span class="line">    Port 22</span><br><span class="line">    ProxyCommand connect -S 127.0.0.1:1080 -a none %h %p</span><br></pre></td></tr></table></figure>

<h4 id="macOS-netcat"><a href="#macOS-netcat" class="headerlink" title="macOS - netcat"></a>macOS - netcat</h4><p>macOS 下可以直接看这篇<a href="https://www.xiebruce.top/650.html">文章</a>。</p>
<h3 id="借助跳板机连接"><a href="#借助跳板机连接" class="headerlink" title="借助跳板机连接"></a>借助跳板机连接</h3><p>太详细的我也懒得写了，目前只写一下 Windows 如何实现。ProxyJump 和 ProxyCommand 都是可以的，并且如果同时写在配置文件中，只能是最先匹配到的那个生效。</p>
<p>假定跳板机和真正要登录的远程主机用户都为 <code>root</code>，跳板机 IP 为 <code>8.8.8.8</code>，要登录的主机 IP 为 <code>1.1.1.1</code>。</p>
<p>各参数含义与第一部分一致，<code>-W</code> 表示将客户端的标准输入输出转发到相应端口的远程主机上。</p>
<h4 id="ProxyJump"><a href="#ProxyJump" class="headerlink" title="ProxyJump"></a>ProxyJump</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -o &quot;ProxyJump root@8.8.8.8&quot; root@1.1.1.1</span><br></pre></td></tr></table></figure>

<h4 id="ProxyCommand"><a href="#ProxyCommand" class="headerlink" title="ProxyCommand"></a>ProxyCommand</h4><ul>
<li>写法一</li>
</ul>
<p><mark>注意</mark>：<code>%h</code> 和 <code>%p</code> 之间是 <code>:</code> 而不是空格。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -o &quot;ProxyCommand ssh root@8.8.8.8 -W %h:%p&quot; root@1.1.1.1</span><br></pre></td></tr></table></figure>

<ul>
<li>写法二</li>
</ul>
<p>使用这条命令，必须先安装 <a href="https://eternallybored.org/misc/netcat/">netcat</a> 并将其添加至环境变量。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -o &quot;ProxyCommand ssh root@8.8.8.8 nc %h %p&quot; root@1.1.1.1</span><br></pre></td></tr></table></figure>

<h4 id="写入配置文件"><a href="#写入配置文件" class="headerlink" title="写入配置文件"></a>写入配置文件</h4><p>即写入到 <code>~/.ssh/config</code> 文件中。</p>
<p>先配置跳板机，如果需要通过代理和密钥连接，则配置如下</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Host jumpserver</span><br><span class="line">    HostName 8.8.8.8</span><br><span class="line">    # Port 22</span><br><span class="line">    User root</span><br><span class="line">    IdentityFile ~/.ssh/vps_ed25519</span><br><span class="line">    ProxyCommand connect -S 127.0.0.1:1080 -a none %h %p</span><br></pre></td></tr></table></figure>

<p>使用 ProxyJump 配置</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Host dev</span><br><span class="line">    HostName 1.1.1.1</span><br><span class="line">    # Port 22</span><br><span class="line">    User root</span><br><span class="line">    IdentityFile ~/.ssh/vps_ed25519</span><br><span class="line">    ProxyJump jumpserver</span><br></pre></td></tr></table></figure>

<p>使用 ProxyCommand 配置</p>
<ul>
<li>写法一</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Host dev</span><br><span class="line">    HostName 1.1.1.1</span><br><span class="line">    # Port 22</span><br><span class="line">    User root</span><br><span class="line">    IdentityFile ~/.ssh/vps_ed25519</span><br><span class="line">    ProxyCommand ssh jumpserver -W %h:%p</span><br></pre></td></tr></table></figure>

<ul>
<li>写法二</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Host dev</span><br><span class="line">    HostName 1.1.1.1</span><br><span class="line">    # Port 22</span><br><span class="line">    User root</span><br><span class="line">    IdentityFile ~/.ssh/vps_ed25519</span><br><span class="line">    ProxyCommand ssh jumpserver nc %h %p</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>环境配置</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>用 IPv6 来拯救你的校园网</title>
    <url>/archives/ssr-ipv6-proxifier.html</url>
    <content><![CDATA[<div class="note info"><p>之前的服务器被我手贱搞崩了，我原本不打算重发的。但后来想想你们从别处跳转过来看到的如果只是 <code>404 Not Found</code>，除了一脸懵逼之外，心里也会有几分不爽。于是，有了以下精简版，也跟之前的有些不一样。</p>
</div>

<span id="more"></span>

<h3 id="购置-VPS"><a href="#购置-VPS" class="headerlink" title="购置 VPS"></a>购置 VPS</h3><p>你用哪家都行，支持 IPv6 就好。</p>
<p>我在用的是 RamNode 家的，这是<a href="https://clientarea.ramnode.com/aff.php?aff=3737">邀请链接</a>。不喜，可直接访问其<a href="https://www.ramnode.com/">首页</a>。</p>
<p>顺便一提，他家现在更新面板了，而且采用计时收费的方式，随时可以销毁服务器。如果决定使用他家的 VPS Instance，<del>建议系统选择为 Ubuntu 18.04 及以上而不要选 Debian 系列的，好像 Debian 系列有 Bug，IPv6 是不通的</del><mark>他家的 Bug 很诡异，自己在 Debian 9、Ubuntu 18、CentOS 7 中一个个尝试吧，反正按时计费</mark>。</p>
<h3 id="服务端搭建"><a href="#服务端搭建" class="headerlink" title="服务端搭建"></a>服务端搭建</h3><p>新手简单使用的话，直接看这个就好：<a href="https://github.com/233boy/ss/wiki/Shadowsocks%E6%90%AD%E5%BB%BA%E8%AF%A6%E7%BB%86%E5%9B%BE%E6%96%87%E6%95%99%E7%A8%8B">某大型同性交友网站指南</a>。</p>
<h3 id="客户端安装"><a href="#客户端安装" class="headerlink" title="客户端安装"></a>客户端安装</h3><p>愿意尝试使用 <a href="https://zs.fyi/archives/scoop-guidebook.html">Scoop</a> 的话，安装只需一条命令：<code>scoop install shadowsocksr-csharp</code>。</p>
<p>手动安装的话依然是：<a href="https://github.com/shadowsocksrr/shadowsocksr-csharp/releases">某大型同性交友网站</a>。</p>
<h3 id="客户端使用"><a href="#客户端使用" class="headerlink" title="客户端使用"></a>客户端使用</h3><p>如果是用上面脚本的话，你甚至可以通过「二维码扫描」自动填写相关服务信息。</p>
<p>此外，建议「系统代理模式」选<code>全局模式</code>，「PAC」选<code>更新 PAC 为 GFWList</code>，「代理规则」选<code>绕过局域网和大陆</code>。</p>
<h3 id="Proxifier-设置"><a href="#Proxifier-设置" class="headerlink" title="Proxifier 设置"></a>Proxifier 设置</h3><p>可以看看这篇，他也是参考了我之前写的：<a href="https://phantomt.github.io/2019/05/02/Linux-000-VPS/#%E4%BD%BF%E7%94%A8Proxifier%E8%BF%9B%E8%A1%8C%E5%85%A8%E5%B1%80%E4%BB%A3%E7%90%86">使用 Proxifier 进行全局代理</a></p>
<p>其他的应该就没有了。</p>
<!-- 好好学习，爱国敬业。多思考，增强明辨是非的能力，不信谣不传谣。

外网优秀的学习资源那么多，如果只是看些捕风捉影、耸人听闻的假消息，实在是不应该。 -->

]]></content>
      <tags>
        <tag>IPv6</tag>
      </tags>
  </entry>
  <entry>
    <title>Task Scheduler CPU 占用高</title>
    <url>/archives/task-scheduler-cpu.html</url>
    <content><![CDATA[<h3 id="情形"><a href="#情形" class="headerlink" title="情形"></a>情形</h3><ol>
<li><p>风扇一直转个不停</p>
</li>
<li><p>查看任务管理器，CPU 占用一直是 99%</p>
</li>
<li><p>Task Scheduler 占用 CPU 高达 60%</p>
</li>
</ol>
<span id="more"></span>

<p><img data-src="https://img.zs.fyi/2308/Task-Manager.png" alt="Task-Manager" loading="lazy"></p>
<h3 id="查找解决方案"><a href="#查找解决方案" class="headerlink" title="查找解决方案"></a>查找解决方案</h3><ol>
<li><p>个人博客：<a href="http://www.tikas.me/task-scheduler-cpu-to-high/">http://www.tikas.me/task-scheduler-cpu-to-high/</a></p>
</li>
<li><p>微软社区，有个人提了个相同问题，可惜没人回答</p>
</li>
</ol>
<h3 id="尝试解决"><a href="#尝试解决" class="headerlink" title="尝试解决"></a>尝试解决</h3><ol>
<li><p><kbd>Start</kbd> + <kbd>X</kbd>，然后按 <kbd>G</kbd>，进入计算机管理</p>
</li>
<li><p>定位到<code>任务计划程序库 - Microsoft - Windows - Customer Experience Improvement Program</code>，在右侧可以看到有三个计划任务，都是微软所谓的客户体验改善计划</p>
</li>
<li><p>右键将它们全部禁止</p>
</li>
<li><p>重启</p>
</li>
</ol>
<p><img data-src="https://img.zs.fyi/2308/Task-Scheduler.png" alt="Task-Scheduler" loading="lazy"></p>
<h3 id="最终解决"><a href="#最终解决" class="headerlink" title="最终解决"></a>最终解决</h3><p>直接将这三个服务删除</p>
]]></content>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>重头再来</title>
    <url>/archives/start-over.html</url>
    <content><![CDATA[<p>一次在玩的时候，我把 <code>rm -rf ./etc</code> 敲成了 <code>rm -rf /etc</code> 然后把服务器的配置文件全给误删了。现在想来，其实当时还是有补救的办法的，因为我之前把 <code>/etc</code> 目录 zip 到 root 用户的家目录了，只要当时我不 <code>exit ssh</code> 把文件恢复回去就没事，然而……</p>
<span id="more"></span>

<p>不记得这是第几次「搬家」了，从之前的另一个域名到这个 top 域名，从 WordPress 到 Typecho 再到 WordPress。这次，我决定使用 Hugo&#x2F;Hexo + GitHub&#x2F;Coding 来搭建静态博客，主动注销网站备案也是不可避免的了。</p>
<p>说来惭愧，虽然写了几十篇博文，但我感觉似乎并没有输出多少有价值的东西，一是积淀太少，二是表达与写作能力还需提高。另外，我一直有通过 Google Search Console 查看大家都是通过哪些关键词进入本站的，发现最多的是 <code>SSR</code>、<code>IPv6</code>、<code>Proxifier</code>、<code>校园网</code>、<code>免流</code> 之类的，我觉得没多大意思也并非我写博客的本意。</p>
<p>我都写过什么呢？</p>
<p>一篇介绍如何通过 SSR 和 IPv6 上网来规避高昂且吝啬的校园网。</p>
<p>一篇「反某网盘限速的 N 种方法」，提到了 BaiduPCS-Go、客户端破解、PanDownload、Proxyee-down、油猴脚本、爱奇艺万能播放器、速盘这些工具和方法。</p>
<p>一篇腾讯大王卡与 B 站 33 卡的对比，现在来看也肯定过时了，毕竟目前互联网卡五花八门。</p>
<p>一篇介绍双拼输入的，我觉得非常值得学习和掌握，正在使用的是<a href="https://www.flypy.com/">小鹤双拼</a>方案。</p>
<p>几篇介绍电脑和手机使用习惯、密码安全及 Windows 常用软件等，这个也是被写烂了的话题。</p>
<p>几篇 Python 官方文档的翻译，后来弃坑了，原因是现在已经有社区在做了。</p>
<p>转载和翻译了几篇我认为还不错的文章。</p>
<p>几篇年度流水账，讲我这一年买了些啥、花了多少钱在哪些订阅服务上、我认为值不值，云云。</p>
<p>然后是 Windows 10 使用中我碰到过的一些问题以及相应的解决办法，之前全部整理出来放在语雀上了，详见：<a href="https://www.yuque.com/shuaizheng/blog/windows">专治 Windows 10 各种不服</a></p>
<p>最后是一些丢掉了也不觉得可惜的日常碎碎念。</p>
]]></content>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>重装系统的成本及前后工作</title>
    <url>/archives/the-price-of-windows-reinstallation.html</url>
    <content><![CDATA[<p>这次重装系统（为何要重装有兴趣的可翻看上上篇）我是一万个不愿意的，因为我知道系统重装的成本有多大。就单纯装个系统来说可能只需要十几分钟，但是装系统前的准备工作（主要是备份和制作安装启动 U 盘）以及系统装完后的恢复备份、软件安装调试、系统设置等，要想完全恢复之前的使用环境，差不多得需要一天的时间。现在是晚上的 10:42，先记录下该做的一些工作，按步骤来就不会出错。</p>
<span id="more"></span>

<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="安装-U-盘"><a href="#安装-U-盘" class="headerlink" title="安装 U 盘"></a>安装 U 盘</h4><p>使用 <a href="https://www.microsoft.com/zh-cn/software-download/windows10">Windows Media Creation Tool</a> 制作安装 U 盘 ---&gt; 完成</p>
<h4 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h4><p>备份<code>桌面</code>文件。右键选中<code>桌面</code>文件夹，在属性中将文件移动到其他盘 ---&gt; 未完成</p>
<p>备份<code>文档</code>文件，参照上述方法 ---&gt; 未完成</p>
<p>用户目录下的一些 dotfile 如 ssh 密钥、gpg 密钥和配置文件等 ---&gt; 未完成</p>
<h4 id="驱动"><a href="#驱动" class="headerlink" title="驱动"></a>驱动</h4><p>从官网下载驱动 ---&gt; 完成</p>
<h4 id="统计安装软件"><a href="#统计安装软件" class="headerlink" title="统计安装软件"></a>统计安装软件</h4><p>按上次重装系统后软件安装顺序排序如下：</p>
<p>✅ 已安装 - 谷歌浏览器 ---&gt; 下载万物，当然得先用 IE&#x2F;Edge 下载它</p>
<p>✅ 已安装 - 微信</p>
<p>✅ 已安装 - 坚果云 ---&gt; 论文同步</p>
<p>❌ 未安装 - Zoommy ---&gt; 貌似万年没打开过了</p>
<p>✅ 已安装 - TIM</p>
<p>✅ 已安装 - EndNote X8 ---&gt; 文献管理，白嫖的中科大授权，严格意义上的盗版</p>
<p>✅ 已安装 - Tableau ---&gt; 向官方申请的教育授权，本地反激活完成</p>
<p>✅ 已安装 - 火狐浏览器</p>
<p>✅ 已安装 - JetBrains Toolbox ---&gt; 向官方申请的教育授权，无需反激活</p>
<p>✅ 已安装 - 1Password ---&gt; 别忘记主密码</p>
<p>✅ 已安装 - R</p>
<p>✅ 已安装 - RStudio</p>
<p>❌ 未安装 - Fences ---&gt; 购买的正版密钥，本地反激活完成</p>
<p>✅ 已安装 - Listary ---&gt; 购买的正版密钥，无法&#x2F;不需反激活</p>
<p>✅ 已安装 - Internet Download Manager ---&gt; 购买的正版密钥，无法&#x2F;不需反激活</p>
<p>✅ 已安装 - Notion ---&gt; 通过 Scoop 安装</p>
<p>✅ 已安装 - MATLAB ---&gt; 学校购买授权，帐号登录</p>
<p>✅ 已安装 - Navicat ---&gt; 学校邮箱申请密钥，反激活完成</p>
<p>✅ 已安装 - Axure ---&gt; 教育授权，本地反激活完成</p>
<p>✅ 已安装 - MS Office 家庭和学生版 2016 ---&gt; 购买机器附送的，绑定账号</p>
<p>✅ 已安装 - 幕布 ---&gt; 通过 Scoop 安装</p>
<p>✅ 已安装 - 印象笔记 ---&gt; 登录国内和国际版两个账号</p>
<p>✅ 已安装 - MindManager</p>
<p>✅ 已安装 - PicGo ---&gt; 通过 Scoop 安装</p>
<p>✅ 已安装 - MS Visio 专业版 2019 ---&gt; 购买，绑定账号</p>
<p>✅ 已安装 - WinRAR</p>
<p>✅ 已安装 - Python 3.7 ---&gt; 不要装 3.8，无法正常运行 Jupyter Notebook</p>
<p>❌ 未安装 - XMeters ---&gt; 购买的正版密钥，无法&#x2F;不需反激活 ---&gt; 先不装了</p>
<p>✅ 已安装 - PotPlayer ---&gt; 竟然被 Scoop extras bucket 收录了</p>
<p>✅ 已安装 - ManicTime ---&gt; 购买的正版密钥，本地反激活完成</p>
<p>✅ 已安装 - Rtools</p>
<p>✅ 已安装 - Spotify</p>
<p>✅ 已安装 - TeX Live ---&gt; 配置文件还原</p>
<h3 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h3><p>最简单，略过，选项该关闭该保留全凭个人喜好</p>
<p>不过有一点要记住，安装时先创建一个本地账户而不要登录微软账号，否则用户文件夹名会恶心你</p>
<h3 id="恢复工作"><a href="#恢复工作" class="headerlink" title="恢复工作"></a>恢复工作</h3><ul>
<li><p>驱动安装 ---&gt; 可选，看看官网有没有适配最新系统的驱动发布</p>
</li>
<li><p>备份文件恢复 ---&gt; 移动文件</p>
</li>
<li><p>安装软件 ---&gt; 无尽的下载……下载……载……想到 MATLAB 和 TeX Live 就头疼</p>
</li>
<li><p>环境变量设置 ---&gt; 绝大部分交由 Scoop 完成，剩余的软件安装过程中就可做到</p>
</li>
<li><p>自定义 DNS ---&gt; 可选</p>
</li>
<li><p>一些软件设置，如语言工具设置国内镜像源</p>
</li>
</ul>
<p>现在已经凌晨 12:18 了，明天继续。</p>
<h3 id="实际安装步骤及观察"><a href="#实际安装步骤及观察" class="headerlink" title="实际安装步骤及观察"></a>实际安装步骤及观察</h3><ol>
<li><p>安装完系统后，联网，等待一段时间，自动安装驱动及补丁</p>
</li>
<li><p>修改设备名称后，重启</p>
</li>
<li><p>通过蓝牙连接鼠标和键盘</p>
</li>
<li><p>解决英文操作系统下中文乱码问题：<code>Control Panel - Clock and Region - Region - Administrative - Language for non-Unicode programs</code>，将其改为简体中文即可</p>
</li>
<li><p>登录微软账号同步设置和 OneDrive 文件，先进行简单设置和覆盖原有设置，如去掉固定在任务栏的快捷图标，将默认输入语言设置为中文、默认应用语言和系统显示语言设置为英文</p>
</li>
<li><p>安装 Scoop，参考的是之前写的 <a href="https://zs.fyi/archives/scoop-guidebook.html">Scoop 不完全上手指南</a>。安装完后，用户文件夹下多了一个 <code>.config</code> 文件夹，里面有 Scoop 的配置文件</p>
</li>
<li><p>先通过 Scoop 安装 shadowsocksr-csharp，前提是添加 extras bucket，而添加 extras bucket 的前提是安装 git 和 7zip。这一过程是异常痛苦的，网络环境并不太好，只能看着下载进度条慢慢地走……</p>
</li>
<li><p>垃圾小米笔记本，安装 git 时自动休眠睡死了，转向处理这一问题的 bug 分支。</p>
</li>
<li><p><del>初步判断是集成显卡驱动问题</del>并不是，可能跟主板芯片和电池管理驱动有关，所以老老实实把所有驱动打了一遍。为了加快驱动下载速度，安装 Internet Download Manager，而密钥存储在 1Password 中，先下载安装 1P。</p>
</li>
<li><p>安装 git 后，将原来的 <code>.gitconfig</code> 文件复制到用户目录下覆盖新生成的配置文件</p>
</li>
<li><p>安装完谷歌浏览器后，登录账号同步设置及插件，复制机场的订阅地址到小飞机，开启飞行模式</p>
</li>
<li><p>之前通过 Scoop 安装的一些软件虽然可以<a href="https://zs.fyi/archives/windows-open-with.html#Scoop-%E8%BF%81%E7%A7%BB%E5%8F%8A%E9%87%8D%E8%A3%85%E5%90%8E%E6%81%A2%E5%A4%8D%E4%BD%BF%E7%94%A8">无损迁移恢复使用</a>，但最终还是决定全部重装一遍，完整记录下来。</p>
</li>
<li><p>Scoop install: adb | android-sdk | anki | annie | aria2 | autohotkey | blender | bluescreenview | captura | chromedriver | concfg | curl | dark | dropit | everything | ffmpeg | figlet | fork | geckodriver | geekuninstaller | gimp | gpg | graphviz | honeyview | hugo | inkscape | joplin | lessmsi | motrix | msys2 | neovim | nodejs-lts | nvm | openjdk13 | openshot | pandoc | pandownload | php | proxifier-portable | pshazz | racket | screentogif | sharex | sqlite | sudo | sumatrapdf | telegram | time | touch | v2ray | v2rayn | vnote | vscode | which | winscp | yarn | youtube-dl | zotero</p>
</li>
<li><p>go 改为手动安装</p>
</li>
<li><p>将之前备份的文件还原回去</p>
</li>
<li><p>之后就剩一些「大块头」的软件以及收尾工作</p>
</li>
<li><p>最后就是系统设置</p>
</li>
<li><p>done</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 10 升级 1803 后多了个 OEM 分区并分配盘符</title>
    <url>/archives/windows-1803-oem.html</url>
    <content><![CDATA[<h3 id="问题概述"><a href="#问题概述" class="headerlink" title="问题概述"></a>问题概述</h3><p>手上的一台联想笔记本在更新到 Windows 1803 版后在<code>此电脑 - 设备和驱动器</code>下「多了一个 OEM 分区」并且分配了盘符。</p>
<span id="more"></span>

<p><img data-src="https://img.zs.fyi/2308/This-PC-Before.png" alt="This-PC-Before" loading="lazy"></p>
<p><img data-src="https://img.zs.fyi/2308/Disk-Management-Before.png" alt="Disk-Management-Before" loading="lazy"></p>
<p>其实也不能算多了一个分区，这个分区原本应该是用于系统恢复的，本不该分配盘符，但估计是这次更新的 Bug 导致这样的问题。分配的盘符是跟在已占用的盘符之后，比如我外接了一个硬盘里面有两个分区，占用了 D 和 E，所以之后是 F。</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>网上搜索一番，发现有这个问题的还不在少数。但是很奇怪，我的另一台笔记本没有出现这种情况。</p>
<p>下面是解决办法（感谢知乎用户 <a href="https://www.zhihu.com/people/fisher-sam-5">@Fisher Sam</a>）和我的参考示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">以管理员权限运行命令提示符，逐行运行</span><br><span class="line"></span><br><span class="line">diskpart</span><br><span class="line"></span><br><span class="line">list disk</span><br><span class="line"></span><br><span class="line">select disk x      （x 表示磁盘序号）</span><br><span class="line"></span><br><span class="line">list volume</span><br><span class="line"></span><br><span class="line">select volume x    （x 表示卷号）</span><br><span class="line"></span><br><span class="line">remove letter=x    （x 表示盘符）</span><br></pre></td></tr></table></figure>

<p><img data-src="https://img.zs.fyi/2308/DiskPart.png" alt="DiskPart" loading="lazy"></p>
<h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p><img data-src="https://img.zs.fyi/2308/This-PC-After.png" alt="This-PC-After" loading="lazy"></p>
<p><img data-src="https://img.zs.fyi/2308/Disk-Management-After.png" alt="Disk-Management-After" loading="lazy"></p>
<h3 id="参考方案"><a href="#参考方案" class="headerlink" title="参考方案"></a>参考方案</h3><ul>
<li><p><a href="https://www.zhihu.com/question/275658123">windows10 升级 1803 版后为什么多了个 OEM 分区并多分配了一个盘符？</a></p>
</li>
<li><p><a href="https://www.zhihu.com/question/275581629">win10 升级 1803 后多了一个 OEM 分区是什么，可以取消吗？</a></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 10 用户账号历史头像删除</title>
    <url>/archives/windows-account-avatar.html</url>
    <content><![CDATA[<p>数次更换头像后，在当前头像右侧会显示之前设置的头像，作为强迫症这是绝对不能忍的。</p>
<span id="more"></span>

<p>解决方法如下：</p>
<ol>
<li><p><kbd>Start</kbd> + <kbd>R</kbd> 运行，输入 <code>%APPDATA%\Microsoft\Windows\AccountPictures</code>，然后确定</p>
</li>
<li><p>进入后，可以看到之前使用过的头像，删除即可</p>
</li>
<li><p>再按下 <kbd>Start</kbd> + <kbd>I</kbd>，进入<code>账户 - 你的信息</code>，可以看到之前的头像已经消失</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次 Windows 蓝屏修复？</title>
    <url>/archives/windows-bluescreen.html</url>
    <content><![CDATA[<p>之前一直在折腾 Docker for Windows，但是网络方面的坑太深了我跨不过去，最终只得作罢。如果只是这样那还好，好聚好散、不合适就分，最恼人的是在我卸载完 Docker 到「Windows 功能」中关闭 Hyper-V 重启时竟然蓝屏了，停止代码为 <code>SYSTEM THREAD EXCEPTION NOT HANDLED</code>，且之后时不时会蓝屏一下，只能通过还原点还原系统。要是放以前，我应该早就掏出 U 盘重装了，但我实在不想折腾了，一想到那些大型软件又得重装一遍就头疼。所以，本着能修就修的想法，暂时找到以下解决办法（或许不是）。</p>
<span id="more"></span>

<h3 id="查找问题"><a href="#查找问题" class="headerlink" title="查找问题"></a>查找问题</h3><p>通过使用 BlueScreenView 查看 dump 文件，确定是由 <code>winhvr.sys</code> 驱动引起的 <code>ntoskrnl.exe</code> 崩溃，然后再看下面的文件描述，应该是 Hyper-V 跟网络虚拟服务导致的系统内核损坏，其他的就看不出什么名堂了。见下图：</p>
<p><img data-src="https://img.zs.fyi/2308/BlueScreenView.png" alt="BlueScreenView" loading="lazy"></p>
<p>另外，dmp 文件我放在这里了：<a href="https://img.zs.fyi/2308/011620-8250-01.dmp">011620-8250-01.dmp</a>，大佬可以帮忙看看，有遇到类似问题的也可以作为参考。</p>
<p>有了以上基本信息，大致知道该往哪个方向查找资料了。</p>
<h3 id="解决问题？"><a href="#解决问题？" class="headerlink" title="解决问题？"></a>解决问题？</h3><p>我是以 <code>winhvr.sys ntoskrnl.exe 蓝屏</code> 为关键词进行谷歌搜索的，查到的<a href="https://social.technet.microsoft.com/Forums/zh-CN/b95905a4-5b9a-4936-9d65-b7f68df089d6/ntoskrnlexe3401323631-277142116165281240501997820256dmp?forum=win10itprogeneralCN">这篇</a>我认为是最有帮助的，虽然也有一点小错误。</p>
<p>参照上面回复中提供的解决方法，操作如下：</p>
<ol>
<li><p>首先以管理员身份运行 CMD，输入 <code>sfc /SCANNOW</code> 进行系统扫描验证并尝试修复，扫描结果发现确实存在损坏文件。</p>
</li>
<li><p>接着，运行 <code>DISM /Online /Cleanup-Image /RestoreHealth</code> 应该会自动运行什么还原操作。</p>
</li>
<li><p>待上述操作完成后，输入 <code>sfc /VERIFYONLY</code> 再进行系统扫描验证，发现已经可以了，不存在完整性冲突。</p>
</li>
</ol>
<p><img data-src="https://img.zs.fyi/2308/SCANNOW.png" alt="SCANNOW" loading="lazy"></p>
<p>不过，至于是否真的解决了问题，我也不确定，后续没再更新的话就是没问题了。</p>
<h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>似乎并没有用，之后 <code>sfc /VERIFYONLY</code> 虽然扫描验证说不存在完整性冲突但还是蓝屏了几次。而且，一个奇怪的现象是，关机后启动不会蓝屏，选择重启大概率会蓝屏。这是之后两次的 dmp 文件：<a href="https://img.zs.fyi/2308/011720-10140-01.dmp">011720-10140-01.dmp</a> 和 <a href="https://img.zs.fyi/2308/011720-10281-01.dmp">011720-10281-01.dmp</a></p>
<p>受不了了，我太菜了，实在找不到办法解决了，最后决定重装系统了。另外，我后来复盘发现，极有可能是 VMware 和 Hyper-V 冲突的原因，然而当时没有意识到。</p>
]]></content>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>专治 Windows 10 各种不服</title>
    <url>/archives/windows-bugs.html</url>
    <content><![CDATA[<p>大约从 2015 年开始使用 Windows 10 系统，这是一个不断遇到坑然后想办法填坑的过程，以下便是遇到的各种稀奇古怪的问题以及可能的解决方案。</p>
<span id="more"></span>

<ul>
<li><p><a href="https://zs.fyi/archives/windows-msn.html">Windows 10 开机后浏览器自动打开 MSN 中文网</a></p>
</li>
<li><p><a href="https://zs.fyi/archives/task-scheduler-cpu.html">Task Scheduler CPU 占用高</a></p>
</li>
<li><p><a href="https://zs.fyi/archives/windows-igfxDTCM-igfxcui.html">删除 Windows 10 桌面右键菜单中的图形选项和图形属性选项</a></p>
</li>
<li><p><a href="https://zs.fyi/archives/windows-account-avatar.html">Windows 10 用户账号历史头像删除</a></p>
</li>
<li><p><a href="https://zs.fyi/archives/windows-disable-autoupdate.html">通过组策略禁用 Windows 10 系统的自动更新功能</a></p>
</li>
<li><p><a href="https://zs.fyi/archives/windows-start-program.html">如何删除 Windows 启动项中的「Program」</a></p>
</li>
<li><p><a href="https://zs.fyi/archives/windows-1803-oem.html">Windows 10 升级 1803 后多了个 OEM 分区并分配盘符</a></p>
</li>
<li><p><a href="https://zs.fyi/archives/windows-cpu-0-4ghz.html">CPU 频率锁定在 0.4GHz</a></p>
</li>
<li><p><a href="https://zs.fyi/archives/windows-network-profile.html">更改无线网络名称</a></p>
</li>
<li><p><a href="https://zs.fyi/archives/windows-sleep-bug.html">Windows 10 无法进入休眠状态</a></p>
</li>
<li><p><a href="https://zs.fyi/archives/windows-linux-udisk.html">恢复 Linux U 盘启动盘在 Windows 下的使用</a></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>CPU 频率锁定在 0.4GHz</title>
    <url>/archives/windows-cpu-0-4ghz.html</url>
    <content><![CDATA[<p>如下图，查到的解决办法各不相同，最后哪一种都没有采用。我目前的做法是，将控制面板中的电池计划选项重置为默认，然后关机重启，勉强解决燃眉之急。</p>
<span id="more"></span>

<p><img data-src="https://img.zs.fyi/2308/CPU.png" alt="CPU" loading="lazy"></p>
]]></content>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>通过组策略禁用 Windows 10 系统的自动更新功能</title>
    <url>/archives/windows-disable-autoupdate.html</url>
    <content><![CDATA[<p>众所周知近年微软发布的更新经常性的导致 Windows 10 用户出现诸如开机黑屏或者是直接无法启动的问题。显然对于绝大多数用户来说能否稳定的运行才是最重要的，同时也并不是所有的用户都有能力解决各类问题。</p>
<span id="more"></span>

<p>例如近期微软更新致使部分用户启动出现黑屏的问题，虽有临时解决方案但并不是所有的设备都可顺利解决。因此还不如直接禁用掉 Windows 10 的自动更新策略，省的每次安装更新都是提心吊胆的害怕出现新的问题。基于安全性考虑我们是不会建议大家不安装更新的，此处的禁用只是禁用掉自动更新而不是禁用更新。</p>
<ol>
<li><p>快捷键 <kbd>Start</kbd> + <kbd>R</kbd> 打开运行，然后在运行的对话框中填写 <code>gpedit.msc</code> 并确定</p>
</li>
<li><p>打开组策略后点击左侧菜单依次展开<code>计算机配置 — 管理模板 — Windows 组件 — Windows 更新</code></p>
</li>
</ol>
<p><img data-src="https://img.zs.fyi/2308/Windows-Update.png" alt="Windows-Update" loading="lazy"></p>
<ol start="3">
<li>双击<code>配置自动更新</code>即可打开如下图的新窗口，在新窗口左侧的选项里将默认的<code>未配置</code>更改为<code>已禁用</code>即可</li>
</ol>
<p><img data-src="https://img.zs.fyi/2308/AutoUpdate.png" alt="AutoUpdate" loading="lazy"></p>
<div class="note info"><p>将此项变更为已禁用后系统将不再自动检查和下载安装更新，因此你需要定期去更新里手动进行检查。原文出处为 <a href="https://www.landiannews.com/archives/40677.html">https://www.landiannews.com/archives/40677.html</a></p>
</div>
]]></content>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>删除 Windows 10 桌面右键菜单中的图形选项和图形属性选项</title>
    <url>/archives/windows-igfxDTCM-igfxcui.html</url>
    <content><![CDATA[<p>我的笔记本电脑经常在集成显卡驱动更新后，点击鼠标右键要等很长时间才能弹出菜单来。作为强迫症自然不能忍受，网络搜索得到答案后，写在这作为记录。</p>
<span id="more"></span>

<ol>
<li><p>按下 <kbd>Start</kbd> + <kbd>R</kbd> 调出运行，输入 <code>regedit</code> 回车</p>
</li>
<li><p>在注册表编辑器中定位到</p>
</li>
</ol>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">HKEY_CLASSES_ROOT\Directory\Background\shellex\ContextMenuHandlers</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>删除 <code>igfxDTCM</code> 和 <code>igfxcui</code> 两个项目</li>
</ol>
]]></content>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>恢复 Linux U 盘启动盘在 Windows 下的使用</title>
    <url>/archives/windows-linux-udisk.html</url>
    <content><![CDATA[<p>通过 DD 方式制作 Linux 启动盘后，将 U 盘插在 Windows 笔记本上，要么在文件资源管理器中不显示或者显示可用空间只有 200MB，尽管在磁盘管理器中是正常的。而且，此时尝试直接格式化也是没有用的。可通过以下两步解决：</p>
<span id="more"></span>

<p>第一步，调用 diskpart 命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">diskpart</span><br><span class="line">list disk</span><br><span class="line">select disk &lt;number&gt;  # &lt;number&gt; 为实际磁盘编号</span><br><span class="line">clean</span><br></pre></td></tr></table></figure>

<p><img data-src="https://img.zs.fyi/2308/diskpart.png" alt="diskpart" loading="lazy"></p>
<p>第二步，在磁盘管理器中创建</p>
<p><img data-src="https://img.zs.fyi/2308/disk-management.png" alt="disk-management" loading="lazy"></p>
]]></content>
      <tags>
        <tag>Windows</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 10 开机后浏览器自动打开 MSN 中文网</title>
    <url>/archives/windows-msn.html</url>
    <content><![CDATA[<p>重装系统后，遇到这个问题，得到微软社区的解答后问题解决，顺便记录一下。</p>
<span id="more"></span>

<ol>
<li><p>Windows 10 专业版，打开组策略</p>
</li>
<li><p>依次展开<code>计算机配置 - 管理模板 - 系统 - Internet 通信管理</code>，然后单击 <code>Internet 通信设置</code></p>
</li>
<li><p>在详细信息窗格中，双击<code>关闭 Windows 网络连接状态指示器活动测试</code>，然后单击<code>已启用</code>，点<code>确定</code></p>
</li>
</ol>
<p><img data-src="https://img.zs.fyi/2308/Group-Policy.png" alt="Group-Policy" loading="lazy"></p>
]]></content>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>更改无线网络名称</title>
    <url>/archives/windows-network-profile.html</url>
    <content><![CDATA[<p>注册表地址如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\NetworkList\Profiles</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 右键「打开方式」</title>
    <url>/archives/windows-open-with.html</url>
    <content><![CDATA[<p>虽然标题是右键「打开方式」，但可能会把近期碰到的问题、发现、猜想都揉在一起。</p>
<span id="more"></span>

<h3 id="右键中的「打开方式」"><a href="#右键中的「打开方式」" class="headerlink" title="右键中的「打开方式」"></a>右键中的「打开方式」</h3><p>之前通过 Scoop 安装了 vscode，用 vscode 打开过 <code>.py</code> 文件，而后又把 vscode 卸载了。我发现，当你右键单击 <code>.py</code> 文件选择打开方式时，会发现残存的东西（如下图），不用说肯定又和注册表有关。</p>
<p><img data-src="https://img.zs.fyi/2308/open-with.png" alt="open-with" loading="lazy"></p>
<p>打开注册表编辑器，搜索 <code>C:\Users\Zheng\scoop\apps\vscode\current\Code.exe</code> 在路径 <code>计算机\HKEY_CLASSES_ROOT\py_auto_file\shell\open\command</code> 下发现了相关注册表值，将其删除，问题似乎解决，在这篇<a href="https://www.lmdouble.com/1820352339.html">文章</a>中也得到印证。但是，这个问题是否真的解决了呢，有没有其他的注册表残留项。问题的关键在于，我对 Windows 注册表不了解，不了解它的文件结构和各部分功能，下次遇到其他问题又得像瞎子一样乱撞，在网络上疯狂查找资料。所以，得了解有关注册表的知识，包括设计思路、演变发展、各部分功能等。</p>
<h3 id="从-CMD-打开文件夹"><a href="#从-CMD-打开文件夹" class="headerlink" title="从 CMD 打开文件夹"></a>从 CMD 打开文件夹</h3><p>在解决上述问题的过程中，还学习到了一点，从 CMD 快速打开一些特殊文件夹。</p>
<p>假设说，你当前的 CMD Prompt 是在桌面，即 <code>C:\Users\Zheng\Desktop&gt;</code>，那么</p>
<p><code>start .</code> 可以快速打开当前所在目录，<code>start ..</code> 打开的则是用户目录，<code>.</code> 和 <code>..</code> 和 Linux 中是一致的。</p>
<p>类推，<code>start %appdata%</code> 打开的便是用户程序安装目录，<code>start shell:startup</code> 打开的是「用户启动文件夹」，等等。</p>
<h3 id="关于软件安装位置的困惑"><a href="#关于软件安装位置的困惑" class="headerlink" title="关于软件安装位置的困惑"></a>关于软件安装位置的困惑</h3><p>以我 64 位的 Windows 10 系统来说，软件可能安装在如下位置：</p>
<ul>
<li><code>C:/Program Files</code> 和 <code>C:/Program Files (x86)</code></li>
<li><code>C:/Users/&lt;username&gt;/AppData</code></li>
<li><code>C:/ProgramData</code></li>
</ul>
<p>这些安装位置的不同跟权限和系统架构有着直接关系。很多软件现在都默认安装在用户文件夹下，因为可以实现静默安装，尤其是一些流氓软件。此外，像上面后两个目录默认是隐藏状态的，一般人可能还不容易找到，更别谈修改删除，当然可能这部分（甚至是大部分）用户也不会想要去干点什么。</p>
<h3 id="Scoop-迁移及重装后恢复使用"><a href="#Scoop-迁移及重装后恢复使用" class="headerlink" title="Scoop 迁移及重装后恢复使用"></a>Scoop 迁移及重装后恢复使用</h3><p>根据 GitHub issue「<a href="https://github.com/lukesampson/scoop/issues/2894">How to use scoop after reinstalling the system</a>」及参考该<a href="https://jiayaoo3o.github.io/2019/03/19/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%A6%82%E4%BD%95%E6%81%A2%E5%A4%8D%E4%BD%BF%E7%94%A8scoop/">文章</a>（文章作者即为上述 issue 的提出者），步骤如下：</p>
<ol>
<li><p>将 Scoop 安装目录完整保存至他处</p>
</li>
<li><p>将上述保存的文件夹放置在目标处</p>
</li>
<li><p>在用户环境变量中，新建一个 SCOOP 变量，值为第二步中 scoop 文件夹地址，如 <code>D:\Scoop</code></p>
</li>
<li><p>在用户变量 Path 中新增一条，值为第二步中 scoop 文件夹下 shims 文件夹地址，如 <code>D:\Scoop\shims</code></p>
</li>
<li><p>允许脚本执行：<code>set-executionpolicy remotesigned -s currentuser</code></p>
</li>
<li><p><code>scoop reset *</code> 等待 scoop 重置完</p>
</li>
</ol>
<h3 id="Python-3-8-1-下-Jupyter-Notebook-启动报错"><a href="#Python-3-8-1-下-Jupyter-Notebook-启动报错" class="headerlink" title="Python 3.8.1 下 Jupyter Notebook 启动报错"></a>Python 3.8.1 下 Jupyter Notebook 启动报错</h3><p>原本打算将 Python 转到也使用 Scoop 进行安装，安装完后发现 Python 版本为 3.8.1 并且启动不了 Jupyter Notebook。在网上查到，<a href="https://stackoverflow.com/questions/58422817/jupyter-notebook-with-python-3-8-notimplementederror">这一问题</a>跟 tornado 有关并且知道了解决办法。</p>
<p>但是呢，我不想这样做，于是尝试通过 <code>scoop install python37</code> 安装 3.7.6 版本的 Python，安装完后 <code>scoop reset python37</code> 但是 <code>python --version</code> 依然显示 3.8.1。几番尝试之后，无果，作罢，不知道是我的姿势有问题，还是说 <code>scoop reset</code> 目前只支持在 2.7 和 3.x 版本之间切换而不支持 3.7.6 与 3.8.1 版本间的切换？最后，还是采用手动的方式安装 Python 3.7.6，问题解决。Python 和 R 也是为数不多的没有通过 Scoop 进行安装的软件。</p>
]]></content>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 10 无法进入休眠状态</title>
    <url>/archives/windows-sleep-bug.html</url>
    <content><![CDATA[<p>系统是 Windows 专业版 1909，电源计划是默认的平衡模式。有时候晚上合盖后第二天早上笔记本发烫，揭开盖子直接进入解锁登录界面。这次又遇到了，寻找解决方法，并稍作记录。</p>
<span id="more"></span>

<p><img data-src="https://img.zs.fyi/2308/powercfg.png" alt="powercfg" loading="lazy"></p>
<p>如图，我的笔记本支持 Standby (S3)、Hibernate、Hybrid Sleep、Fast Startup 这四种 sleep states。其中第一种就相当于 Sleep，中文翻译为睡眠；第二种则叫做休眠；第三种叫做混合睡眠；第四种是 Windows 8 时引入的快速关机。</p>
<p>它们之间乱七八糟的关系和区别可以查看以下几篇文章：</p>
<ul>
<li><p><a href="https://blog.csdn.net/Listener_ri/article/details/50835594">hybrid-sleep 和 sleep 以及 hibernate 的区别</a></p>
</li>
<li><p><a href="https://blog.csdn.net/y97523szb/article/details/78108777">睡眠、休眠、混合睡眠三者之间的关系与区别</a></p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/47006051">关于电脑的待机、睡眠、休眠，这篇应该可以解答你所有的疑问</a>（推荐）</p>
</li>
<li><p><a href="https://www.howtogeek.com/102897/whats-the-difference-between-sleep-and-hibernate-in-windows/">What’s the Difference Between Sleep and Hibernate in Windows?</a></p>
</li>
</ul>
<p>下面则是电池平衡模式下默认的高级设置选项，留存方便日后对比：</p>
<p><img data-src="https://img.zs.fyi/2308/default_settings.png" alt="default_settings" loading="lazy"></p>
<p>上面第三篇文章中有这么两段话点醒了我</p>
<blockquote>
<p>不过呢，随着移动时代的到来，微软肯定也意识到了这个问题。从 Windows 8 开始，Windows 引入了一种新的电源状态，叫 S0 Standby，或 Modern Standby，原理和我上面分析的 iPhone 熄屏状态一模一样。该状态在一些 Windows 平板电脑上实现了，比如 Surface Pro 3，小米平板二代。</p>
<p>用 <code>powercfg -a</code> 可查得当前系统是否支持 Modern Standby。Modern Standby 又分两种，一种是不带网络连接的，另一种是带网络连接的，后者在进入熄屏状态时可以被特定的网络数据包唤醒（需要网卡硬件支持），后者也称 Connected Standby。小米平板二代支持后者。</p>
</blockquote>
<p>同时结合这篇<a href="https://blog.csdn.net/hanziyuan08/article/details/89396894">文章</a>，我查看了 <code>Computer\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Power</code> 下的「CsEnabled」键值，竟然默认是 1。</p>
<p><img data-src="https://img.zs.fyi/2308/CsEnabled.png" alt="CsEnabled" loading="lazy"></p>
<p>那么问题来了，上面第一张图明明显示我的电脑不支持 S0 Standby，电池驱动管理却依然将其开启。我觉得很可能就是这个问题了。</p>
]]></content>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>如何删除 Windows 启动项中的「Program」</title>
    <url>/archives/windows-start-program.html</url>
    <content><![CDATA[<p>这世界对强迫症患者太不友好，比如 Windows 10 上某一软件卸载后可能启动项还残留在那里，并且名称显示为 Program（下图中第二项），关键他喵的名称前还没有软件图标（当然没有，毕竟软件已经被卸载了）。</p>
<span id="more"></span>

<p><img data-src="https://img.zs.fyi/2308/Before.png" alt="Before" loading="lazy"></p>
<p>通过 Google，得知可以修改注册表来解决这一问题：</p>
<p>首先 <kbd>Start</kbd> + <kbd>R</kbd> 呼出运行，输入 <code>regedit</code>，回车打开注册表编辑器</p>
<ul>
<li>如果是要删除系统开机启动项（影响所有用户），注册表定位到</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run</span><br></pre></td></tr></table></figure>

<ul>
<li>如果要删除当前用户的开机启动项，注册表定位到</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run</span><br></pre></td></tr></table></figure>

<p>像我的就是属于第二种情况，进入注册表后找到已删除软件的残余启动项</p>
<p><img data-src="https://img.zs.fyi/2308/Registry.png" alt="Registry" loading="lazy"></p>
<p>接下来当然是右键直接删除该键值了</p>
<p>然后再打开任务管理器，发现原本闹心的「Program」果然不见了，世界又充满爱了</p>
<p><img data-src="https://img.zs.fyi/2308/After.png" alt="After" loading="lazy"></p>
]]></content>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
</search>
